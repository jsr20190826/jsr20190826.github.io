<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>HTTP Methods on JavaScript</title>
    <link>/09-http-and-apis/http/http-request/http-methods/</link>
    <description>Recent content in HTTP Methods on JavaScript</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/09-http-and-apis/http/http-request/http-methods/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GET</title>
      <link>/09-http-and-apis/http/http-request/http-methods/get/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/09-http-and-apis/http/http-request/http-methods/get/</guid>
      <description> GET  A GET request retrieves data at the provided URL
 The most common HTTP method, as it&amp;rsquo;s the default when we enter a URL into our browser
 For example, making the request GET https://restaurant-reviews.com/restaurants/353 returns the HTML content for Maysville restaurant.
 GET requests are idempotent. We can make the same request again and again and get the same result.
  </description>
    </item>
    
    <item>
      <title>POST</title>
      <link>/09-http-and-apis/http/http-request/http-methods/post/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/09-http-and-apis/http/http-request/http-methods/post/</guid>
      <description>POST  A POST request creates a new item on the server
 A request like POST https://restaurant-reviews.com/reviews could make a new review when we click the &amp;ldquo;Submit review&amp;rdquo; button on the webpage
 POST requests are often accompanied by data passed along in the HTTP request body. e.g. when we write a review for Little Beet, we would include our username (eric), our review (The shrimp salad is so delightful), and a star rating (4 out of 5)</description>
    </item>
    
    <item>
      <title>PUT</title>
      <link>/09-http-and-apis/http/http-request/http-methods/put/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/09-http-and-apis/http/http-request/http-methods/put/</guid>
      <description> PUT  The PUT method updates an item at the specified resource
 A request like PUT https://restaurant-reviews.com/restaurants/353 could update the information for Little Beet Restaurant after the owner edits the restaurant&amp;rsquo;s hours
 Like POST requests, PUT requests come with data in the HTTP request body to specify the fields and new values to update
 For example Hours: M-F 10a-10p, closed on Saturday and Sunday
  </description>
    </item>
    
    <item>
      <title>DELETE</title>
      <link>/09-http-and-apis/http/http-request/http-methods/delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/09-http-and-apis/http/http-request/http-methods/delete/</guid>
      <description>DELETE  The DELETE method removes the resource at the URL.
 For example, DELETE https://restaurant-reviews.com/restaurants/353 will delete the review with the ID of 353
 DELETE requests are not idempotent. When we make one of these requests, the state of the server changes. Making the request again would probably result in an error since the item was already deleted
 The DELETE method is similar to the DELETE FROM statement</description>
    </item>
    
  </channel>
</rss>
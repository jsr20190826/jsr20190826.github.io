<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Array Iterators on JavaScript</title>
    <link>/05-arrays-objects/array-iterators/</link>
    <description>Recent content in Array Iterators on JavaScript</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/05-arrays-objects/array-iterators/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>.forEach()</title>
      <link>/05-arrays-objects/array-iterators/for-each/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-arrays-objects/array-iterators/for-each/</guid>
      <description>.forEach()  Method allows us to run a callback function for every element of the array
 The callback function for forEach provides the following:
 element - this current element from the array that is being evaluated
 index - this represents the current element&amp;rsquo;s index (or position in the array)
   Example const chipmunks = [&amp;#34;alvin&amp;#34;, &amp;#34;simon&amp;#34;, &amp;#34;theodore&amp;#34;] chipmunks.forEach((element, index) =&amp;gt; { console.log(`${element}is at index ${index}`) })  JS Bin on jsbin.</description>
    </item>
    
    <item>
      <title>.map()</title>
      <link>/05-arrays-objects/array-iterators/map/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-arrays-objects/array-iterators/map/</guid>
      <description>.map()  Calls a function for each element of the array and returns a new array of results
 .map() is one of the most useful and used iterator methods
 .map() is does NOT mutate the original array
 The callback function for .map() accepts the following parameters:
 currentValue: (required) current element being processed in the array.
 index: (optional) index of the current element being processed in the array</description>
    </item>
    
    <item>
      <title>.find()</title>
      <link>/05-arrays-objects/array-iterators/find/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-arrays-objects/array-iterators/find/</guid>
      <description>.find()  Returns the value of the first element in the array that satisfies the provided testing function
 undefined is returned if no element satisfies testing function
 The callback function for .find() accepts the following parameters:
 element: (required) current element being processed in the array.
 index: (optional) index of the current element being processed in the array
 array: (optional) the array map was called upon</description>
    </item>
    
    <item>
      <title>.filter()</title>
      <link>/05-arrays-objects/array-iterators/filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-arrays-objects/array-iterators/filter/</guid>
      <description>.filter()  Returns the value of the first element in the array that satisfies the provided testing function
 undefined is returned if no element satisfies testing function
 The callback function for .find() accepts the following parameters:
 element: (required) current element being processed in the array.
 index: (optional) index of the current element being processed in the array
 array: (optional) the array map was called upon</description>
    </item>
    
    <item>
      <title>.reduce()</title>
      <link>/05-arrays-objects/array-iterators/reduce/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-arrays-objects/array-iterators/reduce/</guid>
      <description>.reduce()  .reduce() is used calculate a single value based on the array
 A reducer function (that you provide) is called on each element of the array and results in a single output value
 Often used to perform a calculation that accepts all the elements of an array (usually numbers) as inputs
 For example: Calculating the sum of all the items in an array  .reduce() accepts the following parameters</description>
    </item>
    
    <item>
      <title>Other Iterators</title>
      <link>/05-arrays-objects/array-iterators/other-iterators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/05-arrays-objects/array-iterators/other-iterators/</guid>
      <description>Other Iterators  There are many other built-in iterator methods, a complete list can be found on MDNâ€™s Array iteration methods list
 As developer, you will be working with arrays of data on a constant basis; which means you&amp;rsquo;ll be visiting the documentation often to look up array methods you may not have used before
 Let&amp;rsquo;s get some practice &amp;ldquo;looking things up&amp;rdquo;
  Exercise Visit the MDN Array Documentation and find the appropriate iterator method that will allow you to sort the list of words found in the words array in descending alphabetical order</description>
    </item>
    
  </channel>
</rss>
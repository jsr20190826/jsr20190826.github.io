[
{
	"uri": "/00-course-intro-and-tools/",
	"title": "Course Introduction &amp; Tools",
	"tags": [],
	"description": "",
	"content": " Lesson 00 Class Introduction \u0026amp; Tools "
},
{
	"uri": "/01-command-line-js-and-git/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Use the most common commands to navigate and modify files / directories via the command line\n Learn the basics of working with a Git project\n Gain familiarity with the most common git commands\n Learn how GitHub is used for developer collaboration\n Run basic JavaScript script on the command line using Node\n  "
},
{
	"uri": "/02-javascript-basics/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": "After this lesson, students will be able to:\n Describe the concept of a \u0026ldquo;data type\u0026rdquo; and how it relates to variables\n Declare, assign to, and manipulate data stored in a variable\n Create arrays and access values in them\n Understand the difference between comparison operators\n Distinguish between the different types of logical operators\n Run simple JavaScript programs from the command line using Node\n  "
},
{
	"uri": "/03-control-flow-and-loops/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": "After this lesson, students will be able to:\n Use if/else conditionals to control program flow based on Boolean (true or false) tests\n Use switch/case conditionals to control program flow based on matching explicit values\n Use while and do/while loops\n Understand how loop iteration using for and forEach works\n  "
},
{
	"uri": "/04-functions-and-scope/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": "After this lesson, students will be able to:\n Declare and call named functions\n Create functions in a way that promotes code reuse\n Create functions that accept parameters and / or return data\n Understand scope impacts visibility of variables in your program\n Create arrow functions introduced by ES6\n  "
},
{
	"uri": "/05-arrays-objects/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Gain deeper understanding of arrays and objects\n Understand the difference between loops and iterators\n Leverage the most commonly used iterators to efficiently access data\n  "
},
{
	"uri": "/06-dom-and-jquery/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Understand the key differences between using Native JavaScript and jQuery for DOM manipulation\n Learn the most commonly used jQuery methods to manipulate the DOM\n  "
},
{
	"uri": "/07-dom-and-jquery-ii/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Understand the benefits of $(this) or $(event.currentTarget)\n Explain how the type of function used (regular or array) dictates usage of $(this) or $(event.currentTarget)\n Use knowledge of DOM manipulation with jQuery to build small frontend applications\n  "
},
{
	"uri": "/class-resources/office-hours/",
	"title": "Office Hours",
	"tags": [],
	"description": "",
	"content": " Weekly Office Hours Weekly, the instructional team will hold office online\n Day / Time:\n Thursdays, 8:30 PM ET to 10:30 PM ET\n Mondays, 7:00 PM ET to 8:00 PM ET\n Wednesdays, 7:00 PM ET to 8:00 PM ET\n  Location: Online via Zoom (link will be provided in Slack prior the start of office hours)\n Policy: No prior sign up required, just log drop in if you have questions\n  "
},
{
	"uri": "/09-http-and-apis/ajax/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": " What is AJAX?  AJAX stands for Asynchronous JavaScript And XML\n The meaning: Web clients can send or receive data to/from the server without requesting an entire page - instead, clients can just request or send an arbitrary amount of data\n In front-end development, AJAX is often used to make API requests that will fetch data from another service without having to refresh the web page\n  Click here for more information about AJAX\n Benefits of AJAX  Update a web page without reloading the page\n Request data from a server - after the page has loaded\n Receive data from a server - after the page has loaded\n Send data to a server - in the background\n  "
},
{
	"uri": "/09-http-and-apis/apis/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": " What is an API?  Stands for \u0026ldquo;Application Programing Interface\u0026rdquo;\n A way to exchange data between servers / services (i.e. software to software communication)\n Set of programming instructions and standards for accessing a service, tool or application\n For example, Amazon.com released its API so that Web site developers could more easily access Amazon\u0026rsquo;s product information\n In a nutshell, if you want to leverage information from another website or application your first choice should be to use an API (if they offer one)\n  API Considerations  Does the website I need data from even have an API?\n Do I need to authenticate with the remote data source before retrieving the information I need, either as an API consumer or as a user of that service?\n What are the URLs I use to access the data I need?\n In API terms, these URLs are known as endpoints and can usually be found in an API\u0026rsquo;s documentation   What happens when no API is available?  If the website you need data from does not have an API, you could resort to data scraping through the use of \u0026ldquo;spiders\u0026rdquo; which crawl websites and extracts information\n Many online services consider data scraping to be a violation of their Terms of Service\n  API Data Formats  The \u0026ldquo;modern standard\u0026rdquo; for API responses is JSON, or JavaScript Object Notation\n Some APIs are implemented using XML, this includes the API for WordPress, which is implemented using the XML-RPC standard\n  Request, Response lifecycle  When making an API call, you are essentially making an Request to a server and then receiving a Response\n Most of the time this response will contain data that you will make use of within your application\n  "
},
{
	"uri": "/09-http-and-apis/http/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": " What is HTTP  HTTP stands for \u0026ldquo;HyperText Transfer Protocol\n HTTP is a protocol which allows the fetching of resources, such as HTML documents\n It is the foundation of any data exchange on the Web and it is a client-server\n Communication between client computers and web servers is done by sending HTTP Requests and receiving HTTP Responses\n  Example  A client (a browser) sends an HTTP request to the web\n An web server receives the request\n The server runs an application to process the request\n The server returns an HTTP response (output) to the browser\n The client (the browser) receives the response\n  Exercise: Inspect your Browser\u0026rsquo;s HTTP Request and Response We can use our browser\u0026rsquo;s developer tools to see what an HTTP Request and HTTP Response looks like when our browser visits a webpage:\nTry the following:\n Open up your browser\u0026rsquo;s developer tools\n Select the \u0026ldquo;Network\u0026rdquo; tab\n In your browser\u0026rsquo;s address bar, navigate to https://generalassemb.ly/\n In the \u0026ldquo;Network\u0026rdquo; tab of your developer tools, you will see a list of files that were received from the web server, inspect the file named: generalassemb.ly\n Inspect the \u0026ldquo;Headers\u0026rdquo;, \u0026ldquo;Preview\u0026rdquo; \u0026amp; \u0026ldquo;Response\u0026rdquo; tabs\n  "
},
{
	"uri": "/09-http-and-apis/json/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": " What is JSON?  Stands for JavaScript Object Notation\n A way to store information in an organized, easy-to-access manner\n A popular way to send data from on web server (service) to another\n Most data between services are sent as objects\n JSON objects resemble a normal Javascript Object (it contains properties and values) but does not contain methods\n  { \u0026#34;id\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;Scoobie Doo\u0026#34;, \u0026#34;favoriteFood\u0026#34;: \u0026#34;Scoobie Snacks\u0026#34; }  JSON Guidelines  Property names must be double-quoted strings in order to be considered compliant JSON\n Use meaningful property names\n Access properties of a JSON object using dot notation or bracket notation\n  Example const avengers = { \u0026#34;members\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;Spider-Man\u0026#34;, \u0026#34;alias\u0026#34;: \u0026#34;Peter Parker\u0026#34; }, { \u0026#34;name\u0026#34;: \u0026#34;Black Widow\u0026#34;, \u0026#34;alias\u0026#34;: \u0026#34;Natasha Romanova\u0026#34; } ] } console.log(avengers.members[1].name) console.log(avengers[\u0026#34;members\u0026#34;][0].alias)  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-overview/what-is-jquery/",
	"title": "What is jQuery?",
	"tags": [],
	"description": "",
	"content": " What is jQuery?  A JavaScript library that makes it easy to dynamically update your pages (i.e. perform DOM manipulation)\n Offers a simple way to achieve a variety of common JavaScript tasks\n Consistent across all browsers\n Does not do anything native / vanilla JavaScript cannot do, just does it with a more intuitive syntax\n  It\u0026rsquo;s important to note that jQuery is NOT another programming language it is a library or tool built on top of JavaScript\n "
},
{
	"uri": "/06-dom-and-jquery/jquery-overview/add-jquery/via-download/",
	"title": "Add jQuery via Download",
	"tags": [],
	"description": "",
	"content": " Add jQuery via Download This approach assumes you downloaded the jQuery file and stored it on your js folder\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Add jQuery by downloading jQuery file(s)\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script src=\u0026quot;js/jquery-3.4.1.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;js/app.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  "
},
{
	"uri": "/09-http-and-apis/ajax/ajax-request-native-js/",
	"title": "AJAX Requests using Native JS",
	"tags": [],
	"description": "",
	"content": " Making AJAX Requests using Native JavaScript  JavaScript has a built-in object called XMLHttpRequest that can be used to make AJAX requests (i.e. Client-side HTTP requests made in the background which do not require a page refresh)\n XMLHttpRequest is not normally used due to large amount to code needed to make requests; libraries jQuery (using $.ajax(), $.get(), etc) and others are often used in place of XMLHttpRequest\n  Example  Here\u0026rsquo;s an example of what an AJAX request using XMLHttpRequest looks like:  function logResponse(data) { console.log(\u0026#39;response complete ====\u0026gt;\u0026#39;, data) } function get(url, callback) { console.log(\u0026#39;step 2: declare request.\u0026#39;) const request = new XMLHttpRequest() console.log(\u0026#39;Step 3: open request.\u0026#39;) request.open(\u0026#39;GET\u0026#39;, url, true); console.log( \u0026#39;Step 4: set the request state change handler to call the callback when status = 200\u0026#39;, ) request.onreadystatechange = function() { if (request.readyState === 4 \u0026amp;\u0026amp; request.status === 200) { callback(request); } } console.log(\u0026#39;Step 5: send request.\u0026#39;) request.send() } console.log(\u0026#39;Step 1: invoke AJAX function.\u0026#39;) get( \u0026#39;http://api.giphy.com/v1/gifs/search?q=smooth\u0026amp;api_key=2qqBvRkz56JiTUcMbOJbak5VRRLEbV84\u0026#39;, logResponse, ) console.log(\u0026#39;Step 6: End of JS file.\u0026#39;)  JS Bin on jsbin.com\n"
},
{
	"uri": "/solutions/classwork-lab-solutions/",
	"title": "Classwork &amp; Lab Solutions",
	"tags": [],
	"description": "",
	"content": " Solutions Disclaimer: These files are not meant to be viewed as the \u0026ldquo;right answer, instead view them as a way to learn how another developer approached the same problem.\n Lesson 03: Control Flow \u0026amp; Loops  JS Basics, Control Flow \u0026amp; Loops Lab Solution  Lesson 05: Arrays \u0026amp; Objects  Warmup Functions Practice Solution  Lesson 04: Functions \u0026amp; Scope  Rolling Dice (native JavaScript) Solution  Lesson 06: DOM \u0026amp; jQuery  Rolling Dice (jQuery) Solution  Lesson 07: DOM \u0026amp; jQuery II  Warmup Iterators Practice Solution\n Color Scheme Switcher Solution\n Traffic Light Solution\n Score Keeper Solution\n  Lesson 08: DOM \u0026amp; jQuery III  HiLo Solution\n CitiPix Solution\n  "
},
{
	"uri": "/01-command-line-js-and-git/",
	"title": "Command Line JS &amp; Git",
	"tags": [],
	"description": "",
	"content": " Lesson 01 Command Line JavaScript \u0026amp; Git "
},
{
	"uri": "/05-arrays-objects/objects/creating-objects/",
	"title": "Creating Objects",
	"tags": [],
	"description": "",
	"content": " Creating Objects  Data in an object is organized into key-value pairs\n A key is like a variable name that points to a location in memory that holds a value\n keys are strings, but when we have a key that does not have any special characters in it, JavaScript allows us to omit the quotation marks:\nconst superHero = { \u0026#39;secret identity\u0026#39;: \u0026#39;Peter Parker\u0026#39;, name: \u0026#39;Spiderman\u0026#39;, powers: [\u0026#39;super strength\u0026#39;, \u0026#39;hyper awareness\u0026#39;, \u0026#39;agility\u0026#39;, \u0026#39;genius intellect\u0026#39;], age: 17 }  values can be of any data type\n  "
},
{
	"uri": "/06-dom-and-jquery/dom-intro/",
	"title": "Document Object Model",
	"tags": [],
	"description": "",
	"content": " Document Object Model (DOM)  Browsers view our webpages as documents\n Programming interface for HTML documents\n The DOM allows us to use a programming language (JavaScript) to make dynamic changes to our web pages  Using JavaScript to dynamically change our web pages is also referred to as manipulating the DOM\n  Example: Visual representation of the DOM\nIn the image above, we have a html document on the left and a visual representation of this page\u0026rsquo;s DOM on the right\nClick here for a good overview of the DOM\n "
},
{
	"uri": "/class-resources/documentation/",
	"title": "Documentation",
	"tags": [],
	"description": "",
	"content": "  Referencing documentation is a core task for developers.\n Documentation communicates how something (in our case programming languages, software libraries) works.\n Good documentation reduces implementation time and increases predictability of our software programs.\n  We will be referring to the following list of the documentation resources frequently throughout the course:\nHTML MDN\u0026rsquo;s HTML Reference\nCSS MDN\u0026rsquo;s CSS Reference\nJavaScript MDN\u0026rsquo;s JavaScript Reference\njQuery jQuery Documentation\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-events/event-handlers/",
	"title": "Events Handlers",
	"tags": [],
	"description": "",
	"content": " Event Handlers  Event handlers are blocks of code (usually a user-defined JavaScript function) that will be run when an event fires\n There are two parts to an event handler: an event listener and a callback function.\n An event listener is a method that listens for a specified event to occur, like a click event\n A callback function is a function that executes when something triggers the event listener\n  Both the event listener and callback function make up an event handler\n  Example $(() =\u0026gt; { $(\u0026#39;button\u0026#39;).click(() =\u0026gt; { $(\u0026#39;.box\u0026#39;).hide() }) })  JS Bin on jsbin.com\n Here\u0026rsquo;s a summary of what is happening in the code above:\n $('.box') selects all HTML elements with a class of .box\n The .click() method is the event listener; it checks if the user has clicked an .box HTML element\n The second argument to .on() is a callback function; when a \u0026lsquo;click\u0026rsquo; occurs on an .box element, this function executes\n   "
},
{
	"uri": "/09-http-and-apis/apis/finding-apis/",
	"title": "Finding APIs",
	"tags": [],
	"description": "",
	"content": " Where Do We Find APIs? APIs are published everywhere. Chances are good that most major content sources you follow online publish their data in some type of serialized format. Heck, even Marvel publishes an API. Look around for a \u0026ldquo;Developers\u0026rdquo; section on major websites.\nList Of Commonly Used APIs Here is a short list of commonly used APIs for testing purposes.\n   API Sample URL     This for That http://itsthisforthat.com/api.php?json   Giphy http://api.giphy.com/v1/gifs/search?q=funny+cat\u0026amp;api_key=dc6zaTOxFJmzC   Stocks http://dev.markitondemand.com/Api/Quote/xml?symbol=AAPL   Swapi https://swapi.co/api/people/1/    APIs Are No Longer Supported Sometimes APIs change their data structure or support structure. This is an important consideration if you intend to build an app based on this API only to find out several weeks\\months later that you can longer leverage their data in your project. OMBD was free to use but never had required license, however they changed this model and it\u0026rsquo;s required.\n   API Sample URL     OMDB API http://www.omdbapi.com/?t=Game%20of%20Thrones\u0026amp;Season=1    "
},
{
	"uri": "/04-functions-and-scope/function-overview/",
	"title": "Function Overview",
	"tags": [],
	"description": "",
	"content": " What are Functions?  Functions are the main “building blocks” of the program; they allow the code to be called many times without repetition\n One of the main advantages of functions is code reuse\n You can control when functions are executed, for example - you can write functions that only get executed (or called) when a user clicks a specific button\n  // a simple function that greets you with a \u0026#39;Good Morning\u0026#39; alert  // 1) Declare a function named greeting  function greeting(){ console(\u0026#39;Good Morning\u0026#39;) } // 2) Call (or run) the function  greeting()  "
},
{
	"uri": "/09-http-and-apis/http/http-request/http-methods/get/",
	"title": "GET",
	"tags": [],
	"description": "",
	"content": " GET  A GET request retrieves data at the provided URL\n The most common HTTP method, as it\u0026rsquo;s the default when we enter a URL into our browser\n For example, making the request GET https://restaurant-reviews.com/restaurants/353 returns the HTML content for Maysville restaurant.\n GET requests are idempotent. We can make the same request again and again and get the same result.\n  "
},
{
	"uri": "/04-functions-and-scope/scope/global-scope/",
	"title": "Global Scope",
	"tags": [],
	"description": "",
	"content": " Global Scope  Variables defined outside of a function are in in the Global Scope  Example // Global function because it was declared outside of a function const name = \u0026#39;Simone Biles\u0026#39; console.log(name) function bestGymnastEver() { // \u0026#39;name\u0026#39; variable is accessible here and everywhere else because it is global  console.log(name) } logName() // logs \u0026#39;Simone Biles\u0026#39;  JS Bin on jsbin.com\n"
},
{
	"uri": "/09-http-and-apis/http/http-request/",
	"title": "HTTP Requests",
	"tags": [],
	"description": "",
	"content": " HTTP Requests  An HTTP request is made by a client, to a named host, which is located on a server\n The aim of the request is to access a resource on the server.\n To make the request, the Client uses components of a URL (Uniform Resource Locator), which includes the information needed to access the resource\n A correctly composed HTTP request contains the following elements:\n A request line\n A series of HTTP headers, or header fields\n A message body, if needed\n   Request Line  The request line is the first line in the request message. It consists of at least three items:   A HTTP method\n The method is a one-word command that tells the server what it should do with the resource. For example, the server could be asked to send the resource to the client.  The path component of the URL for the request:\n The path identifies the resource on the server.  The HTTP version number:\n The HTTP specification to which the client has tried to make the message comply (current version is 1.1 but you don\u0026rsquo;t have to worry about this)   Example Request Line GET /path/to/resource/index.html HTTP/1.1\n the method is GET\n the path is /path/to/resource/index.html\n the HTTP version is HTTP/1.1\n  The HTTP Client (e.g. web browser) is responsible for constructing this request line; as developers we just need to know how this works\n "
},
{
	"uri": "/09-http-and-apis/json/json-stringify/",
	"title": "JSON.stringify()",
	"tags": [],
	"description": "",
	"content": " JSON.stringify()  When JSON is used to send data from one service to the next \u0026ldquo;over the wire\u0026rdquo; (i.e. via cloud) it is transmitted as a string which makes it lightweight and fast\n JSON.stringify() allows developers to easily transform objects / arrays (or any value) into a JSON string which makes it compatible to be transmitted along with an HTTP Request\n \u0026ldquo;Stringify-ing\u0026rdquo; data is a common step developers take before sending data to another service\n  Example const avengers = { members: [ { name: \u0026#34;Spider-Man\u0026#34;, alias: \u0026#34;Peter Parker\u0026#34; }, { name: \u0026#34;Black Widow\u0026#34;, alias: \u0026#34;Natasha Romanova\u0026#34; } ] } // convert object into a JSON string  const jsonString = JSON.stringify(avengers)) console.log(jsonString) console.log(typeof jsonString); // result: string  JS Bin on jsbin.com\n"
},
{
	"uri": "/09-http-and-apis/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Learn about APIs and understand how they are used\n Understand APIs and why they are used\n Explore a real use case of API usage\n  "
},
{
	"uri": "/10-asynchronous-js-and-promises/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Understand the differences between synchronous and asynchronous programming\n Explain the different ways developers address issues presented with asynchronous programming\n Create and Consume Promises\n Handle errors generated from promises\n Use Async / Await to improve readability of asynchronous code\n  "
},
{
	"uri": "/11-lab-giphy-weather-app/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Leverage knowledge of Promises to build an application that makes asynchronous requests to multiple APIs  "
},
{
	"uri": "/12-project-build-a-slackbot/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Leverage Slack\u0026rsquo;s API and OpenWeather\u0026rsquo;s API to build a slackbot that delivers a city\u0026rsquo;s current weather directly in Slack  "
},
{
	"uri": "/13-object-oriented-js/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Understand the benefits of using Classes\n Create Classes with a public and private interface\n Create Classes that inherit properties and methods from another Class\n  "
},
{
	"uri": "/14-intro-to-crud-and-firebase/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Explain what CRUD means\n Learn about Firebase and its benefits\n Use Firebase\u0026rsquo;s real-time database to provide data persistence to a front-end app\n  "
},
{
	"uri": "/15-project-firebase-todo-app/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Leverage knowledge of Firebase to add persistent data storage to a Todo Application  "
},
{
	"uri": "/16-intro-to-express/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Review the HTTP request / response flow\n Explain the role of a web server in a full-stack application\n Write a route handler for a GET request with Express\n Pass information with query and route parameters\n  "
},
{
	"uri": "/17-deploying-your-app/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Deploy a JavaScript-based application using Github Pages, Surge or Heroku\n Learn how to secure sensitive credentials in a \u0026ldquo;non node-based\u0026rdquo; front-end application\n Deploy your final projects the approach that best fits your application\u0026rsquo;s needs\n  "
},
{
	"uri": "/10-asynchronous-js-and-promises/async-await/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": " Async / Await  Async / Await is special that makes working with promises easy to use and understand\n The syntax and structure of Async / Await is makes our asynchronous handling look like synchronous code\n Async / Await is alternative way of consuming promises a\n  async  In order for you to use Async / Await, you must declare a function with the async keyword\nasync function someFunction() { return \u0026quot;something\u0026quot; }  Prepending async to a function declaration means that function always returns a promise\n  await  The keyword await makes JavaScript wait until that promise settles and returns its result\n await can only be used in a function that is prepended with async\n await will be ignored (and your code will not wait for the asynchronous action to complete) it you try to use await in a function that is not prepended with async   Example function delayedGreeting() { return new Promise(resolve =\u0026gt; { setTimeout(() =\u0026gt; { resolve(\u0026#39;Hi, sorry for the wait!\u0026#39;) }, 3000) }); } /* Declare function with \u0026#34;async\u0026#34; keyword */ async function msg() { // use \u0026#34;await\u0026#34; keyword to call promise and wait  // for the result before moving on  // to the next line of code  const msg = await delayedGreeting() console.log(msg) } console.log(\u0026#34;Calling msg()\u0026#34;) msg() console.log(\u0026#34;end of the code\u0026#34;)  JS Bin on jsbin.com\n"
},
{
	"uri": "/10-asynchronous-js-and-promises/promises/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": " What are Promises?  Promises are objects that represent the eventual outcome of an asynchronous operation\n A Promise object can be in one of three states:\n Pending: The initial state the operation has not completed yet\n Fulfilled: The operation has completed successfully and the promise now has a resolved value; for example, a request’s promise might resolve with a JSON object as its value.\n Rejected: The operation has failed and the promise has a reason for the failure; This reason is usually an Error of some kind.\n   Dishwasher Analogy  We refer to a promise as settled if it is no longer pending— it is either fulfilled or rejected\n Let’s think of a dishwasher as having the states of a promise:\n Pending: The dishwasher is running but has not completed the washing cycle.\n Fulfilled: The dishwasher has completed the washing cycle and is full of clean dishes.\n Rejected: The dishwasher encountered a problem (it didn’t receive soap!) and returns unclean dishes.\n  If our dishwashing promise is fulfilled, we’ll be able to perform related tasks, such as unloading the clean dishes from the dishwasher\n If it’s rejected, we can take alternate steps, such as running it again with soap or washing the dishes by hand\n All promises must eventually settle; this enables us to write logic for what to do if the promise fulfills or if it rejects\n  "
},
{
	"uri": "/13-object-oriented-js/classes/methods/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": " Methods  Methods in a Class function very similar to a method of an regular JavasScript object\n Let\u0026rsquo;s recap, an method in an object is a property that has a function as a value, for example:\n  const superHero = { secretIdentity: \u0026#39;Peter Parker\u0026#39;, name: \u0026#39;Spiderman\u0026#39;, sayTagline: function() { // \u0026lt;- method  console.log(\u0026#34;Hey everyone it\u0026#39;s your friendly neighborhood Spiderman\u0026#34;) } }   If we were to rewrite this object as a Class, it may look something like this:  class superHero { constructor(secretIdentity, name) { this._secretIdentity = secretIdentity this._name = name } sayTagline() { console.log(\u0026#34;Hey everyone it\u0026#39;s your friendly neighborhood Spiderman\u0026#34;) } }   The key difference here is that methods of a class are not separated by commas  "
},
{
	"uri": "/13-object-oriented-js/classes/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": " What are Classes?  As we have discussed earlier in the course, in JavaScript, objects are oftentimes used to represent (or model) real world items\n Here\u0026rsquo;s an example of using an object to represent a car:\n  const myCar = { make: \u0026#39;Honda\u0026#39;, model: \u0026#39;Accord\u0026#39;, color: \u0026#39;blue\u0026#39;, year: 2015 } console.log(myHonda.make) console.log(myHonda.model) console.log(myHonda.color) // change color  myHonda.color = `blue` console.log(myHonda.color)   In practice, we often need to create many objects of the same kind, like cars, or users or whatever\n Classes are a tool that developers use to quickly produce similar objects\n  Example - Creating a Car class  If we were creating an application for a used car dealership that needed to keep track of many cars, we could use \u0026ldquo;classes\u0026rdquo; to help us quickly produce cars within our program\n Here\u0026rsquo;s what that class might look like:\n  // define Car class  class Car { constructor(make, model, color, year) { this._make = make this._model = model this._color = color this._year = year } get make() { return this._make } get model() { return this._model } get color() { return this._color } get year () { return this._year } set model (newModel) { this._model = newModel } set color (newColor) { this._color = newColor } } // create new \u0026#34;cars\u0026#34; using the Car class as a blueprint  const myHonda = new Car(\u0026#39;Honda\u0026#39;, \u0026#39;Accord\u0026#39;, \u0026#39;gray\u0026#39;, \u0026#39;2017\u0026#39;) console.log(myHonda.make) console.log(myHonda.model) console.log(myHonda.color) // change color  myHonda.color = `blue` console.log(myHonda.color)  JS Bin on jsbin.com\nCompare our Car class with our earlier car object example. Note the similarities and the differences. We\u0026rsquo;ll discuss those differences in the upcoming sections\n"
},
{
	"uri": "/13-object-oriented-js/inheritance/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": " What is Inheritance?  Often we find commonality between our classes — repeated code that we’d like to consolidate\n Subclasses let us incorporate another class’s state and behavior into our own\n This process is often called inheritance, and our subclass is said to “inherit” from a parent class, also called a superclass\n Inheritance can avoid duplication and simplify the implementation of a class that needs the same data and functions as another class\n  Example class Animal { constructor(name, weight) { this._name = name this._weight = weight } eat() { return `${this._name}is eating!` } sleep() { return `${this._name}is going to sleep!` } wakeUp() { return `${this._name}is waking up!` } } class Gorilla extends Animal { constructor(name, weight, height) { super(name, weight) // property not shared with Animal class  this._height = height } get height() { return this._height } climbTrees() { return `${this._name}is climbing trees!` } poundChest() { return `${this._name}is pounding its chest!` } showVigour() { return `${this.eat()}${this.poundChest()}` } dailyRoutine() { return `${this.wakeUp()}${this.poundChest()}${this.eat()}${this.sleep()}` } } const gorilla = new Gorilla(\u0026#39;George\u0026#39;, \u0026#39;160Kg\u0026#39;) console.log(gorilla.eat()) console.log(gorilla.poundChest()) console.log(gorilla.sleep()) console.log(gorilla.height) console.log(gorilla.dailyRoutine())  JS Bin on jsbin.com\n"
},
{
	"uri": "/14-intro-to-crud-and-firebase/firebase/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": " What is Firebase?  Firebase is a mobile and web application platform for developers\n Acquired by Google in 2014\n Offers many other services but we\u0026rsquo;ll be covering the basics of Firebase\u0026rsquo;s real-time backend database and seeing how we can use this in our applications\n  "
},
{
	"uri": "/16-intro-to-express/express/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": " What is Express?  Express is a popular Node web framework that enables developers to build web servers (backend) that can respond to http requests and return data\n Outside of providing built-in support for routing, Express has minimal functionality of its own\n Functionality is added to an Express application through the use of Middleware\n  "
},
{
	"uri": "/final-projects/overview-requirements/",
	"title": "Overview &amp; Requirements",
	"tags": [],
	"description": "",
	"content": " Overview  Final Projects are a requirement of \u0026ldquo;course completion\u0026rdquo;\n Project should be something that you are passionate about\n We\u0026rsquo;ve established some milestones (and due dates) that will help you stay on track to complete your projects on time\n Each milestone will include a deliverable  Instruction team will actively work with you to help you manage scope and come up with a project plan\n  Requirements For the final project, you\u0026rsquo;ll be designing and building a web application of your choice. This project will test your knowledge of JavaScript and ask you to apply everything you\u0026rsquo;ve learned in this course. The result will be a web app that you can add to your portfolio.\nYou could create anything from: a blog users can comment on; an app that allows users to search for social media posts; or a web-based game (memory, tic-tac-toe, etc). Use of an API is optional but highly recommended (because it\u0026rsquo;s fun!).\nI\u0026rsquo;ll work with you to determine the scope and feasibility of your ideas considering the amount of time remaining in the class and other other factors.\nYour final projects must make use of the following:\n JavaScript\n Adhere to DRY principle (Don\u0026rsquo;t Repeat Yourself)\n Code is properly indented\n Follow best practices for file/folder structure\n  "
},
{
	"uri": "/lesson-recordings/recordings/",
	"title": "Recordings",
	"tags": [],
	"description": "",
	"content": " Lesson Recordings    Lesson Date Link Notes     00 8/26/2019 lesson 00 recording    01 8/28/2019 lesson 01 recording    02 9/4/2019 lesson 02 recording The 1st half of Lesson 03 was also covered   03 9/9/2019 lesson 03 recording We also covered some of lesson 04 up through (Returning values from functions)   04 9/11/2019 lesson 04 recording    05 9/18/2019 lesson 05 recording    06 9/23/2019 lesson 06 recording    07 9/25/2019 lesson 07 recording During this class we continued to work through lesson 06 and completed 2 code alongs (Color Scheme Switcher \u0026amp; Traffic Light) in lesson 07   08 9/30/2019 lesson 08 recording Finished up lesson 07 and worked through the HiLo Code Along in Lesson 08   09 10/2/2019 lesson 09 recording     "
},
{
	"uri": "/01-command-line-js-and-git/git-vocabulary/repository/",
	"title": "Repository",
	"tags": [],
	"description": "",
	"content": " Repository  Most basic element of GitHub\n A repository can be referred to as a project\n contains all of a project\u0026rsquo;s files\n Stores each file\u0026rsquo;s revision history\n Repositories can have multiple collaborators and can be either public or private.\n  "
},
{
	"uri": "/09-http-and-apis/http/http-response/status-codes/",
	"title": "Status Codes",
	"tags": [],
	"description": "",
	"content": " Status Codes  In the HTTP response that is sent to a client, the status code, which is a three-digit number, is accompanied by a reason phrase (also known as status text) that summarizes the meaning of the code\n Along with the HTTP version of the response, these items are placed in the first line of the response, which is therefore known as the status line.\n The status codes are classified by number range, with each class of codes having the same basic meaning\n The range 100-199 is classed as Informational\n 200-299 is Successful\n 300-399 is Redirection\n 400-499 is Client error\n 500-599 is Server error\n   Check out HTTP Status Dogs for a fun way to learn the different status codes\n Exercise: See example of 404 Status Code  404 means resource not found\n Let\u0026rsquo;s see an example of how some websites handle situations where users try to navigate to a page on their site that doesn\u0026rsquo;t exist\n   Try navigating to the following url: https://github.com/okokwhatupareyouthere\n Open up your developer tools and navigate to the \u0026ldquo;Network\u0026rdquo; tab; see if you can find the 404 response returned from Github\u0026rsquo;s servers\n  "
},
{
	"uri": "/12-project-build-a-slackbot/tutorial/step-1-new-slack-workspace/",
	"title": "Step 1: Create New Slack Workspace",
	"tags": [],
	"description": "",
	"content": " Step 1: Create New Slack Workspace We\u0026rsquo;re going to need a Slack workspace to test our bot. Click on the link below and follow the instructions to create a new Slack workspace\nCreate a new workspace\n"
},
{
	"uri": "/17-deploying-your-app/code-along-hosting-with-heroku/step-1-install-heroku/",
	"title": "Step 1: Install Heroku",
	"tags": [],
	"description": "",
	"content": " Step 1: Install Heroku a. Sign up for a free Heroku account  Sign up here: https://signup.heroku.com/signup/dc  \nb. Install Heroku Command Line Interface (CLI)  Follow the instructions for your Operation System found here: https://devcenter.heroku.com/articles/getting-started-with-nodejs?singlepage=true#set-up  \nc. Use the Heroku CLI to log into your Heroku Account  Once installed, open your terminal and run the command below to log into the Heroku CLI\n$ heroku login   "
},
{
	"uri": "/02-javascript-basics/data-types/strings/",
	"title": "Strings",
	"tags": [],
	"description": "",
	"content": " Strings  Strings can consist of letters and other characters\n They are surrounded by either double quotes or single quotes (this is how you recognize you are working with a string)\n Concatenation allows you to combine strings\n  // declare a variable called color and store a string  let color = \u0026#34;green\u0026#34;  Single or double quotes can be used for strings, but the opening quote must match the closing quote\n String Methods  JavaScript has some built-in methods that allow developers to work with strings\n For example: if you wanted to know how many characters were in a string, you would use the .length method\n Here are some example of other methods you can use on strings\n  JS Bin on jsbin.com\nString Template Literals  Template literals were introduced with ES6 (the newest version of JavaScript)\n Template literals provides are much cleaner syntax for mixing variables with strings\n Template literals are enclosed by the back-tick (` `) character instead of double or single quotes\n Template literals can contain placeholders. These are indicated by the dollar sign and curly braces (${expression})\n  let name = \u0026#34;Tristan\u0026#34; console.log(`Hello ${name}`)  JS Bin on jsbin.com\nClick here for complete list of all the String methods\n "
},
{
	"uri": "/09-http-and-apis/http/http-request/urls/",
	"title": "URLs",
	"tags": [],
	"description": "",
	"content": " Importance of URLs  URLs allows Clients to specify (to the Server) which resources it wants to work it (create, read, update or delete)\n URL stands for \u0026ldquo;Uniform Resource Locator\u0026rdquo;\n Parts of a url are mandatory (such as the \u0026ldquo;http\u0026rdquo;) and parts are optional (i.e. ?key=1\u0026amp;key=2)\n All parts the parts of a URL are meant to provide context to the Server so the Server will know how to handle the HTTP Request   Anatomy of a URL  Let\u0026rsquo;s look at the following URL:\nhttps://www.example.com:80/path/to/myfile.html?key1=value1\u0026amp;key2=value2#SomewhereInTheDocument  It is made up of the following parts:\n   Part Example Description     Protocol https communicate to the Server that the HTTP protocol is being used for this Request (FTP, mailto) are examples of other protocols   Domain www.example.com Name of the web server being requested   Path /path/to/myfile.html The path to the resource on the Server   Query ?/key1=value\u0026amp;key2=value Extra parameters provided to the Server   Anchor #SomewhereInTheDocument An anchor to another part of the document; works a \u0026ldquo;bookmark\u0026rdquo; inside the resource     "
},
{
	"uri": "/05-arrays-objects/warm-up-functions-practice/",
	"title": "Warm Up: Functions Practice",
	"tags": [],
	"description": "",
	"content": " Warm Up: Functions Practice  Work in groups of 2-3 to solve problems using functions\n The problem set for this warm up is hosted on Github, see the url below:\n Warm Up: Functions Practice  Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment\n  "
},
{
	"uri": "/07-dom-and-jquery-ii/warm-up-iterators-practice/",
	"title": "Warm Up: Iterators Practice",
	"tags": [],
	"description": "",
	"content": " Warm Up: Iterators Practice  Work in groups of 2-3 to solve problems using functions\n Only use either .map(), .find() or .filter() to solve the problems in the problem set\n Do not use .forEach()\n The problem set for this warm up is hosted on Github, see the url below:\n Warm Up: Iterators Practice  Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment\n  "
},
{
	"uri": "/02-javascript-basics/variables/what-are-variables/",
	"title": "What are Variables?",
	"tags": [],
	"description": "",
	"content": " What are variables?  Allows us to store values and so our programs can keep track of Data\n Similar to algebra\n Helps you represent data or values\n Used to help your program “remember” values\n Can be thought of as a “box” that we put values in\n In programming, you store values in variables if you plan on referencing that value at a later time\n  "
},
{
	"uri": "/class-resources/git-commands/",
	"title": "Git Commands",
	"tags": [],
	"description": "",
	"content": " The following is a summary of the most commonly used git commands\nCreate Repositories Start a new repository or obtain one from an existing URL\n   Command Description     git init Creates a new local repository in the current directory   git init [project-name] Creates a new local repository with the specified name   git clone [url] Downloads a project and its entire version history    Making Changes    Command Description     git status Lists all new or modified files to be committed   git add [file] Snapshots the file in preparation for versioning   git commit -m \u0026quot;[descriptive message]\u0026quot; Records file snapshots permanently in version history   git diff Shows file differences not yet staged   git diff --staged Shows file differences between staging and the last file version   git reset [file] Unstages the file, but preserve its contents    Working with Branches    Command Description     git branch Lists all local branches in the current repository   git branch [branch-name] Creates a new branch   git checkout [branch-name] Switches to the specified branch and updates the working directory   git merge [branch] Combines the specified branch’s history into the current branch   git branch -d [branch-name] Deletes the specified branch    Review History    Command Description     git log Lists version history for the current branch   git log --follow [file] Lists version history for a file, including renames   git show [commit] Outputs metadata and content changes of the specified commit   git diff [first-branch]...[second-branch] Shows content differences between two branches    Synchronize Changes    Command Description     git fetch [bookmark] Downloads all history from the repository bookmark   git merge [bookmark]/[branch] Combines bookmark’s branch into current local branch   git push [alias] [branch] Uploads all local branch commits to GitHub   git pull Downloads bookmark history and incorporates changes    "
},
{
	"uri": "/01-command-line-js-and-git/intro-to-the-command-line/",
	"title": "Intro the the Command Line",
	"tags": [],
	"description": "",
	"content": " Introduction to the Command Line  The command line is the heart of your operating system\n Almost anything you can do from a GUI (Graphical User Interface), you can also do from the command line, but FASTER!\n We\u0026rsquo;ll learn how to navigate computer files and folders using the terminal; this will help us when we start working with git and GitHub\n  Command Line Basics Here are some important UNIX commands to know as you\u0026rsquo;re working on the terminal.\n   Command Description Command Description     ls List the contents of the directory atom Open atom   cd Change directories pwd Print working directory   mkdir Make directory say Make your computer talk   rmdir Remove empty directories open Open a particular file in their default application   rm Remove files or directories ./ The current folder   touch Create an empty file ../ One folder above your current working directory   echo Return a string ~/ The home folder    "
},
{
	"uri": "/01-command-line-js-and-git/code-along-command-line-intro/",
	"title": "Code Along: Command Line Intro",
	"tags": [],
	"description": "",
	"content": " Code Along: Command Line Intro For Macs: * Open the \u0026ldquo;Terminal\u0026rdquo; app (Applications \u0026gt; Utilities \u0026gt; Terminal) * Optionally, download and install iTerm 2, which is a replacement for the terminal app that is more configurable.\nFor Windows: * Open the \u0026ldquo;Command Prompt\u0026rdquo; application. * For a better experience, try Console.\nGet familiar with the basic commands on the terminal!\nWhen copying the following code snippets, DO NOT include the $ this is a universal symbol to indicate that the anything following the \u0026lsquo;$\u0026rsquo; should be entered into the command line\n Step 0: Navigate to your class folder on your command line  From your command line, navigate to your class folder (i.e. the folder named jsd)\n Navigate to your jsd from your Root Directory. cd ~ and then cd Documents/jsd (assuming your class folder is named \u0026lsquo;jsd\u0026rsquo; and located in your Documents folder)\n  Step 1: Make a new directory and \u0026ldquo;change\u0026rdquo; into it  Create a directory named command_line_tutorial\n$ mkdir command_line_tutorial  Change into this directory\n$ cd command_line_tutorial   Step 2: Create some files from the command line  Create a file named \u0026ldquo;index.html\u0026rdquo; using the touch command.\n$ touch text1.txt text2.txt   Step 3: Open your your text editor from the command line $ atom .   Use subl if you are using sublime  Step 4: Create an empty folder and remove it  Create a folder named test_folder\n$ mkdir test_folder  Now remove it\n$ rmdir test_folder   Student Exercise - Part I : More Independent Practice Complete the following instructions below in the Terminal application.\n Create a folder in your jsd/lesson_01_files directory named my_site\n Once inside that folder, create three empty files:\n goals.html\n worries.html\n index.html\n  Open the my_site folder with in your text editor\n  In the respective files (goals.html and worries.html), write your top three goals and top three worries for this course.\n Paste the following contents into index.html:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;My Site \u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;a href=\u0026quot;goals.html\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://i.imgur.com/dosK05U.gif\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;br\u0026gt; \u0026lt;a href=\u0026quot;worries.html\u0026quot;\u0026gt;\u0026lt;img src=\u0026quot;http://i.imgur.com/2s0HwpM.gif\u0026quot; /\u0026gt;\u0026lt;/a\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;    Open index.html with your browser and make sure you see your goals and worries.  Student Exercise - Part II: More Independent Practice  Use your new knowledge of the command line to create a lesson folder for each of the remaining lessons in the course inside your jsd folder\n There are 20 lessons in the course and the lesson names should use the following format: lesson_02_files, lesson_03_files, etc\n The last class should be named lesson_19_files (we started counting at 00)\n  "
},
{
	"uri": "/class-resources/git-workflow-submitting-assignments/",
	"title": "Git Workflow for Submitting Assignments",
	"tags": [],
	"description": "",
	"content": " Step 0: Fork the Assignment Repository  This step is only done once per project\n Every assignment will be accompanied by repository url on GitHub\n Click on the provided url and then fork the repository\n   Step 1: Clone the project down to your computer  This step is only done once per project\n While on the repository page of the forked repository, click on the \u0026ldquo;Clone or Download\u0026rdquo; button\n Copy the provided url (you may need to click on \u0026ldquo;Use HTTPS\u0026rdquo; if you don\u0026rsquo;t have SSH configured (ssh instructions)\n Use your command line to navigate to the desired directory / folder\n Then type the following command:\n$ git clone paste-url-to-remote-repository-on-github-here    Step 2: Work on Assignment in text editor, Commit and Push  This step is done as many times as needed\n Next step is to use your text editor to work on the assignment\n You should be using the best practice of committing as often as needed (this is especially important when working on larger assignments and projects)\n You should also periodically push your code to GitHub using git push so your local and remote repositories stay in sync\n Once you\u0026rsquo;ve completed the assignment the next step is to submit a Pull Request\n  Step 3: Submit your completed assignment using a Pull Request  This step is only done once per project\n Before proceeding, please ensure that your latest changes have pushed to GitHub\n Next submit a Pull Request by following the instructions in the video below:\n   "
},
{
	"uri": "/class-resources/keyboard-shortcuts/",
	"title": "Keyboard Shortcuts",
	"tags": [],
	"description": "",
	"content": " General Window Management \u0026amp; Browser Shortcuts    Action Mac Windows     Open Chrome Developer Tools cmd+option + i F2 or ctrl + shift + i   Refresh page cmd + R ctrl + R   Switch between applications cmd + tab alt + tab   Switch between windows in the same application cmd + ~     Atom Shortcuts Files, Windows, Tabs Management    Command macOS Windows Linux Description     Open Settings Menu cmd+, ctrl+, ctrl+, Opens the Atom\u0026rsquo;s settings menu   Open File (Fuzzy) cmd+p or cmd+t ctrl+p or ctrl+t ctrl+p or ctrl+t Opens the Fuzzy Finder   Browse Open Files cmd+b ctrl+b ctrl+b Browse tabs within the window   Previous Tab alt+cmd+left ctrl+pageup ctrl+pageup Cycles left through open tabs (in the active pane)   Next Tab alt+cmd+right ctrl+pagedown ctrl+pagedown Cycles right through open tabs (in the active page)   Toggle Tree View cmd+\\ ctrl+\\ ctrl+\\ Toggles Atom\u0026rsquo;s file Tree View   Show Available Snippets alt+shift+s alt+shift+s alt+shift+s Shows the snippets available to Atom   Save cmd+s ctrl+s ctrl+s Saves the currently active file   Save As shift+cmd+s ctrl+shift+s ctrl+shift+s Saves the currently active file under a different name   Save All alt+cmd+s   Saves all changed files   Close Tab cmd+w ctrl+w ctrl+w Closes the currently active tab   Close Window shift+cmd+w ctrl+shift+w ctrl+shift+w Closes the currently active editor window   Split Window cmd+k up/down/left/right ctrl+k up/down/left/right ctrl+k up/down/left/right Split the currently active tab in one of the four directions   Focus Pane cmd+k cmd+up/down/left/right ctrl+k ctrl+up/down/left/right ctrl+k ctrl+up/down/left/right Move the focus to the pane in one of the four directions   Toggle full screen ctrl+cmd+f F11 F11 Toggle full screen window    Editing    Command macOS Windows Linux Description     Duplicate Lines shift+cmd+d ctrl+shift+d ctrl+shift+d Duplicates the line of the current cursor position and creates a new line under it with the same contents   Delete Line ctrl+shift+k ctrl+shift+k ctrl+shift+k Deletes the current line   Move Line Up ctrl+cmd+up ctrl+up ctrl+up Moves the contents of the current cursor position up one line. If there is a line above with content, the current lines content will swap with the one above it.   Move Line Down ctrl+cmd+down ctrl+down ctrl+down Moves the contents of the current cursor position down one line. If there is a line below with content, the line\u0026rsquo;s content will swap with the one below it.   Find/Replace cmd+f ctrl+f ctrl+f Opens up the Find/Replace panel   Find Next cmd+g F3 F3 Toggles forward through the results of the current buffer in the file while the Find/Replace panel is active   Find Previous shift+cmd+g shift+F3 shift+F3 Toggles backward through the results of the current buffer in the file while the Find/Replace panel is active   Find in Project shift+cmd+f ctrl+shift+f ctrl+shift+f Opens the Find in Project Panel   Go To Line ctrl+g ctrl+g ctrl+g Opens the Go To Line panel   Go To Matching Bracket ctrl+m ctrl+m ctrl+m The cursor goes to the matching top bracket that the cursor is ecapsulated in   Select Line cmd+l ctrl+l ctrl+l Selects the entire line the cursor\u0026rsquo;s current position is in   Toggle Comment cmd+/ ctrl+/ ctrl+/ Toggles the selected text into a comment of the current grammar   Column Selection ctrl+shift+up/down ctrl+alt+up/down shift+alt+up/down Allows to select multiple rows, where the same edit will be applied   Select Same Words cmd+d ctrl+d ctrl+d If you select a word, and then hit the key combo for this command, Atom will select the next same word for you. Then you can either type directly (which will replace the old words) or use left or right arrow to append things.   Undo Selection cmd+u ctrl+u ctrl+u This undoes the previous selection, like from Select Same Words.   Select All The Same Words At Once cmd+ctrl+g alt+f3 alt+f3 This shortcut is similar to cmd+d/ctrl+d but it selects all the matching words at once.    "
},
{
	"uri": "/07-dom-and-jquery-ii/jquery-this/",
	"title": "$(this)",
	"tags": [],
	"description": "",
	"content": " $(this)  this one of the most misunderstood concepts in JavaScript\n this (native JavaScript) refers to the owner of a function\n $(this) (jquery) gives you reference to uses jQuery to select the current element\n  We\u0026rsquo;ll cover the this (native JavaScript) in later in the course\n Example $(() =\u0026gt; { $(\u0026#34;#box\u0026#34;).click(function() { // use $(this) with with regular function syntax  // to reference the element that is being \u0026#34;acted on\u0026#34;  $(this).fadeOut(1000) }) })  JS Bin on jsbin.com\nExample: Active Link using $(this)  The following is example of how a developer could go using javascript to implement an \u0026ldquo;active link\u0026rdquo; effect  $(function(){ // store reference to ALL li elements that are children of ul.nav  let $links = $(\u0026#39;ul.nav li\u0026#39;) // Add click event to each link  // using special jquery object $(this)  // to reference each element that was matched  $links.on(\u0026#39;click\u0026#39;, function(){ // Remove the active class from all links  $links.removeClass(\u0026#39;active\u0026#39;) // Add the active class to the link that was clicked  // which is refererenced by $(this)  $(this).addClass(\u0026#39;active\u0026#39;) }) })  JS Bin on jsbin.com\n$(this) can only be used with \u0026ldquo;regular functions\u0026rdquo;  $(this) can only be used in conjunction with regular function syntax and will not work with arrow functions\n This is due to the difference in the way regular functions (using function keyword) and arrow functions (=\u0026gt;) create a private scope (we\u0026rsquo;ll go deeper into this concept later in the course)\n  Example: Using $(this) with arrow functions  This will not work because of the way arrow functions create local scope  $(\u0026#34;#box\u0026#34;).click(() =\u0026gt; { // use $(this) with with an arrow function  // this will not work  $(this).fadeOut(1000) })  JS Bin on jsbin.com\nExercise: Fix the Todo List using $(this)  Fix the Todo List application below so clicking on a single item will only toggle the item that was selected and not toggle all of the items  $(function(){ // 1) Add a click event to each span element  $(\u0026#39;.todo li span\u0026#39;).click(function(){ // 2) Add toggleClass method to the span  // that is clicked so its class will toggle  // \u0026#34;.done\u0026#34; on and off  $(\u0026#39;.todo li span\u0026#39;).toggleClass(\u0026#34;done\u0026#34;) }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-manipulation/inserting-removing-content/append/",
	"title": ".append()",
	"tags": [],
	"description": "",
	"content": " .append() Method  Method used to insert content to the end of selected elements (as the last child)  Example $(() =\u0026gt; { $(\u0026#39;#appendParagraph\u0026#39;).click(() =\u0026gt; { // append a new paragraph to list of paragraphs  const newParagraph = \u0026#34;\u0026lt;p class=\u0026#39;four\u0026#39;\u0026gt;Four\u0026lt;/p\u0026gt;\u0026#34; $(\u0026#39;.numbers\u0026#39;).append(newParagraph) }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-events/form-events/change/",
	"title": ".change() Event",
	"tags": [],
	"description": "",
	"content": " .change() Event  Attaches an event handler function to the \u0026lt;input\u0026gt;, \u0026lt;textarea\u0026gt; and \u0026lt;select\u0026gt; elements that is executed when its value changes  Example  The following example will display an alert message when you select any option in dropdown select box  $(\u0026#39;select\u0026#39;).change((event) =\u0026gt; { const selectedOption = $(event.currentTarget).find(\u0026#39;:selected\u0026#39;).val() alert(`You have selected ${$selectedOption}`) })  JS Bin on jsbin.com\nWe\u0026rsquo;ll discuss currentTarget and the .find() method later in the course\n "
},
{
	"uri": "/06-dom-and-jquery/jquery-events/mouse-events/click/",
	"title": ".click() Event",
	"tags": [],
	"description": "",
	"content": " .click() Event  Attaches an event handler function to an element that is triggered when users click on the element with their mouse  Example $(() =\u0026gt; { // listen for .click() on #toggleBtn  $(\u0026#39;#toggleBtn\u0026#39;).click(() =\u0026gt; { $(\u0026#39;.box\u0026#39;).slideToggle() }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-manipulation/css-style-manipulation/css/",
	"title": ".css()",
	"tags": [],
	"description": "",
	"content": " .css() Method  Method that provides a quick way to apply the styles directly to the HTML elements (i.e. inline styles) that haven\u0026rsquo;t been or can\u0026rsquo;t easily be defined in a stylesheet  Example of Getting (Reading) a css property from an element  To Get (Read) css properties of an element use css(cssPropertyName) with nothing inside the parentheses  $(() =\u0026gt; { $(\u0026#34;#readBorderProperties\u0026#34;).click(() =\u0026gt; { // read \u0026#34;border\u0026#34; css properties of box  const borderProperties = $(\u0026#34;.box\u0026#34;).css(\u0026#34;border\u0026#34;) alert(borderProperties) }) })  JS Bin on jsbin.com\nExample of Setting (writing) css properties on an element  To Set (Write) text of an element use css({cssPropertyName: , cssPropertyValue }) with an object representing the new css properties inside the parentheses  $(() =\u0026gt; { $(\u0026#34;#setCssProperties\u0026#34;).click(() =\u0026gt; { // set new css properties on box  $(\u0026#34;.box\u0026#34;).css({ backgroundColor: \u0026#34;green\u0026#34;, border: \u0026#34;3px dashed black\u0026#34;, width: \u0026#34;200px\u0026#34; }) }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/05-arrays-objects/array-iterators/for-each/",
	"title": ".forEach()",
	"tags": [],
	"description": "",
	"content": " .forEach()  Method allows us to run a callback function for every element of the array\n The callback function for forEach provides the following:\n element - this current element from the array that is being evaluated\n index - this represents the current element\u0026rsquo;s index (or position in the array)\n   Example const chipmunks = [\u0026#34;alvin\u0026#34;, \u0026#34;simon\u0026#34;, \u0026#34;theodore\u0026#34;] chipmunks.forEach(function(element, index) { console.log(`${element}is at index ${index}`) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/05-arrays-objects/array-review/adding-removing-items/push/",
	"title": ".push()",
	"tags": [],
	"description": "",
	"content": " .push()  Appends the element to the end of the array  Example const fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;] fruits.push(\u0026#34;Pear\u0026#34;) console.log( fruits ) // Apple, Orange, Pear   Note that our fruits array has been changed by push(); this means that the push() method is a mutating method  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-effects/show-hide/",
	"title": ".show() &amp; .hide()",
	"tags": [],
	"description": "",
	"content": " .show() \u0026amp; .hide() Methods .hide()  Method used to hide targeted elements  Example $(() =\u0026gt; { $(\u0026#34;button\u0026#34;).click(() =\u0026gt; { // hide #box element  $(\u0026#34;#box\u0026#34;).hide() }) })  JS Bin on jsbin.com\n.show() $(() =\u0026gt; { $(\u0026#34;button\u0026#34;).click(() =\u0026gt; { // show #box element  $(\u0026#34;#box\u0026#34;).show() }) })   Method used to show targeted elements that are currently hidden  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-manipulation/getting-setting-content/text/",
	"title": ".text()",
	"tags": [],
	"description": "",
	"content": " .text() Method  Method is either used to get (read) the combined text contents of the selected elements, including their descendants, or set (write) the text contents of the selected elements  Example of Getting (Reading) text  To Get (Read) text of an element use .text() with nothing inside the parentheses  $(() =\u0026gt; { $(\u0026#39;#readAll\u0026#39;).click(() =\u0026gt; { // read text from all p elements  const allParagraphs = $(\u0026#34;p\u0026#34;).text() alert(`text from all paragraphs: ${allParagraphs}`) }) $(\u0026#39;#readFirst\u0026#39;).click(() =\u0026gt; { // read text from only the 1st p element  const firstParagraph = $(\u0026#34;p:first\u0026#34;).text() alert(`text from the 1st paragraph: ${firstParagraph}`) }) })  JS Bin on jsbin.com\nExample of Setting (writing) text  To Set (Write) text of an element use .text(newText) with the new text inside the parentheses  $(\u0026#39;#convertAllWords\u0026#39;).click(() =\u0026gt; { // set text for all p elements to spanish translation  $(\u0026#34;.one\u0026#34;).text(\u0026#34;uno\u0026#34;) $(\u0026#34;.two\u0026#34;).text(\u0026#34;dos\u0026#34;) $(\u0026#34;.three\u0026#34;).text(\u0026#34;tres\u0026#34;) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/05-arrays-objects/objects/accessing-properties/",
	"title": "Accessing Properties",
	"tags": [],
	"description": "",
	"content": " Accessing Properties  There are two ways we can access an object’s property:\n Dot Notation   Bracket Notation     "
},
{
	"uri": "/06-dom-and-jquery/jquery-overview/add-jquery/via-cdn/",
	"title": "Add jQuery via CDN",
	"tags": [],
	"description": "",
	"content": " Add jQuery via CDN  This approach references the jQuery file that lives on a CDN (another server)\n The example below utilizes a jQuery-specific CDN found here\n The integrity and crossorigin properties in the example ensure the file is delivered without any third-party manipulation\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Add jQuery using a CDN\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script src=\u0026quot;https://code.jquery.com/jquery-3.4.1.min.js\u0026quot; integrity=\u0026quot;sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=\u0026quot; crossorigin=\u0026quot;anonymous\u0026quot;\u0026gt; \u0026lt;/script\u0026gt; \u0026lt;script src=\u0026quot;js/app.js\u0026quot;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;   Using a CDN like jQuery or Google also helps with loading time, and potential caching benefits.\n  What is a CDN?  A CDN is a collection of servers that can deliver content\n A content delivery network (CDN) places files in different locations so that the person using your webpage can receive the nearest copy of it faster\n Prevents your users\u0026rsquo; browsers from downloading commonly used libraries(like jQuery) every time they visit your site\n Use of CDNs increases page speed for highly trafficked sites\n Click here for a nice overview of CDNs\n  "
},
{
	"uri": "/09-http-and-apis/ajax/ajax-request-jquery/",
	"title": "AJAX Requests with jQuery",
	"tags": [],
	"description": "",
	"content": " Using $.ajax  jQuery offers an .ajax() method that can be used to make API calls\n Example of an AJAX call using jQuery\u0026rsquo;s $.ajax method\n  $.ajax({ url: \u0026#39;some/url/specified/by/api\u0026#39;, type: \u0026#34;GET\u0026#34;, data: { name: \u0026#39;bob\u0026#39; } }) .done(() =\u0026gt; { // execute this function if request is successful  console.log(data) }) .fail(() =\u0026gt; { // execute this function if request fails  alert(\u0026#39;error occurred\u0026#39;) })  $.ajax() properties Here are some of the commonly used properties of the $.ajax() method:\n url: address where the request is being sent\n type: HTTP method that is being used for the request (i.e. GET, POST, PUT, DELETE), most of the time you\u0026rsquo;ll be using GET or POST\n data: data to be sent to the server, for GET requests, this info will be added to the url value\n done: function that will be called if request is successful\n fail: function that will be called if request fails\n  Click here more information about the $.ajax() method\n Example function search (term) { const url = \u0026#39;https://api.giphy.com/v1/gifs/search\u0026#39; // this is the public beta key, sign up for production if you want this to be live on the web  // In a real project, NEVER store your API keys in Git  const apiKey = \u0026#39;2qqBvRkz56JiTUcMbOJbak5VRRLEbV84\u0026#39; // Makes an API request to the giphy server with a request for data using the search term  // This uses jQuery\u0026#39;s .ajax() function  console.log(\u0026#39;step 2: make http request using $.ajax().\u0026#39;) $.ajax({ url: url, type: \u0026#39;GET\u0026#39;, data: { q: term, api_key: apiKey } }) .done((response) =\u0026gt; { console.log(\u0026#39;step 3a: call this function if request is successful\u0026#39;) console.log(response) }) .fail((error) =\u0026gt; { console.log(\u0026#39;step 3b: call this function if request errors out\u0026#39;) console.log(error) }) } console.log(\u0026#39;Step 1: invoke AJAX function.\u0026#39;) search(\u0026#34;kittens\u0026#34;) console.log(\u0026#39;Step 4: End of JS file.\u0026#39;)  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-traversing/ancestors/",
	"title": "ancestors",
	"tags": [],
	"description": "",
	"content": " ancestor Methods  Methods used to get the ancestors of the selected element  .parent()  Method is used to get the direct parent of the selected element  Example $(() =\u0026gt; { $(\u0026#39;button\u0026#39;).click(() =\u0026gt; { $(\u0026#39;.box\u0026#39;).parent().toggleClass(\u0026#39;backgroundEffect\u0026#39;) }) })  JS Bin on jsbin.com\n.parents()  Method is used to get the ancestors of the selected element  Example $(() =\u0026gt; { $(\u0026#39;button\u0026#39;).click(() =\u0026gt; { // this will apply the class to \u0026#34;all\u0026#34; ancestors  $(\u0026#39;.box\u0026#39;).parents().toggleClass(\u0026#39;backgroundEffect\u0026#39;) // uncomment the line below and observe the difference; we are using method chaining here to target only the \u0026#34;grandparent\u0026#34; of the black box  //$(\u0026#39;.box\u0026#39;).parent().parent().toggleClass(\u0026#39;backgroundEffect\u0026#39;)  }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/05-arrays-objects/array-review/",
	"title": "Array Review",
	"tags": [],
	"description": "",
	"content": " Array Review  Creating Arrays   Accessing Array Values   Updating Array Values   Adding \u0026amp; Removing Items   length Property   "
},
{
	"uri": "/14-intro-to-crud-and-firebase/firebase/benefits/",
	"title": "Benefits",
	"tags": [],
	"description": "",
	"content": " Firebase Benefits  Firebase provides a seamless way for front-end developers to add data persistence to their front-end applications\n Relieves developers from having to build out backend to support their apps\n Firebase platform offers a variety of products such as realtime database, authentication, file storage, analytics, hosting, etc\n Generous free tier\n Advanced features that developers can grow their applications into as their applications grow\n  "
},
{
	"uri": "/06-dom-and-jquery/jquery-overview/benefits-of-jquery/",
	"title": "Benefits of jQuery",
	"tags": [],
	"description": "",
	"content": " Benefits of jQuery?  Uses CSS selectors to help us grab or select elements programmatically (i.e. in our code)\n Accomplishes more with less code vs using native JavaScript\n  CSS selectors means less code Here\u0026rsquo;s how we would programmatically select an element with an id of \u0026ldquo;flavors\u0026rdquo; using native JavaScript\n// selecting an element using native JavaScript document.getElementById(\u0026#39;flavors\u0026#39;).onClick = doSomething()  Here\u0026rsquo;s how we would programmatically select an element with an id of \u0026ldquo;flavors\u0026rdquo; using jQuery\n// using jQuery (same as above but with much more intuitive syntax) $(\u0026#39;#flavors\u0026#39;).click(doSomething)  In this code snippet above you can see jQuery allows us to use CSS selectors to programmatically select elements on our page\nThe ability to use CSS selectors to programmatically select elements is the main reason jQuery is so popular today\n Another Example Here\u0026rsquo;s another example of how jQuery results in much more clear and readable DOM manipulation logic\nIn this code snippet, we are using native JavaScript to programmatically select the \u0026lt;body\u0026gt; element and then change the background color to white\n// selecting an element using native JavaScript  document.getElementsByTagName(\u0026#39;body\u0026#39;)[0].style.backgroundColor = \u0026#39;white\u0026#39;  Compare the snippet above with the following snippet that accomplishes the same result using jQuery\n// using jQuery (same as above but with much more intuitive syntax)  $(\u0026#39;body\u0026#39;).css(\u0026#39;backgroundColor\u0026#39;, \u0026#39;white\u0026#39;)  Note: best practice is to use camel case when referencing css properties that have multiple words i.e. \u0026lsquo;backgroundColor\u0026rsquo; instead of \u0026lsquo;background-color\u0026rsquo;\n "
},
{
	"uri": "/13-object-oriented-js/classes/",
	"title": "Classes",
	"tags": [],
	"description": "",
	"content": " Classes  Overview   Constructor   Encapsulation   Instances   Methods   "
},
{
	"uri": "/09-http-and-apis/clients-servers/",
	"title": "Clients &amp; Servers",
	"tags": [],
	"description": "",
	"content": " Client \u0026amp; Servers  Computers connected to the web are called clients and servers\n Communication between the client and server are done through requests and responses\n A simplified diagram of how they interact might look like this:\n  Clients  Typically user-facing devices connected to the internet:\n Computers\n Mobile devices\n Smart Speakers (Amazon Echo, Google Home)\n Smart Appliances (Ring Doorbell, Nest Thermostat, etc)\n   Server  A computer dedicated to run services to serve the needs of other computers; examples include the following:\n Web server (stores and delivers files needed to generate web pages)\n Database server (stores and delivers data)\n File server (stores and delivers files)\n Print server (sends and receives print jobs)\n Home media server (stores and delivers video and/or audio)\n   "
},
{
	"uri": "/16-intro-to-express/clients-servers/",
	"title": "Clients &amp; Servers",
	"tags": [],
	"description": "",
	"content": " Client \u0026amp; Servers  Computers connected to the web are called clients and servers\n Communication between the client and server are done through requests and responses\n A simplified diagram of how they interact might look like this:\n  Clients  Typically user-facing devices connected to the internet:\n Computers\n Mobile devices\n Smart Speakers (Amazon Echo, Google Home)\n Smart Appliances (Ring Doorbell, Nest Thermostat, etc)\n   Server  A computer dedicated to run services to serve the needs of other computers; examples include the following:\n Web server (stores and delivers files needed to generate web pages)\n Database server (stores and delivers data)\n File server (stores and delivers files)\n Print server (sends and receives print jobs)\n Home media server (stores and delivers video and/or audio)\n   "
},
{
	"uri": "/01-command-line-js-and-git/git-vocabulary/commit/",
	"title": "Commit",
	"tags": [],
	"description": "",
	"content": " Commit  A \u0026ldquo;revision\u0026rdquo;, is an individual change to a file (or set of files)\n Git\u0026rsquo;s version of saving\n Commits save a \u0026ldquo;snapshot\u0026rdquo; of all of the project\u0026rsquo;s files at that point in time\n Using commits you can \u0026ldquo;time travel\u0026rdquo; and navigate back to any previous commit that was made throughout the history of the project\n Commits usually contain a commit message which is a brief description of what changes were made\n  "
},
{
	"uri": "/03-control-flow-and-loops/conditionals/",
	"title": "Conditionals",
	"tags": [],
	"description": "",
	"content": " What are Conditionals?  Conditional statements enable our programs to decide which blocks of code to execute and which to skip, based on whether an \u0026ldquo;expression\u0026rdquo; evaluates to true or false\n if statements are the most common form of conditionals\n There are a few types of if statements\n if statement\n if..else statement\n if..else if statement\n ternary operator\n   "
},
{
	"uri": "/13-object-oriented-js/classes/constructor/",
	"title": "Constructor",
	"tags": [],
	"description": "",
	"content": " Constructor  JavaScript calls the constructor() method every time it creates a new instance of a class (using the new keyword)  // define Car class  class Car { constructor(make, model) { this._make = make this._model = model } }   Car is the name of our class; by convention, we capitalize and CamelCase class names\n JavaScript will invoke the constructor() method every time we create a new instance of our Car class\n This constructor() method accepts two parameters, make and model\n Inside of the constructor() method, we use the this keyword; in the context of a class, this refers to an instance of that class\n In the Car class, we use this to set the value of the Car instance’s make property (this._make) and to the make parameter and the instance\u0026rsquo;s model property (this._model) to the model parameter\n  Think of a Class as a blueprint and think of a instance as something that is made from that blueprint\n Exercise  Create an class called Cat and inside that class create a constructor() that accepts two parameters: name and breed\n Inside the constructor() method, create _name and _breed properties and sent them equal to your parameters\n  JS Bin on jsbin.com\n"
},
{
	"uri": "/05-arrays-objects/array-review/creating-arrays/",
	"title": "Creating Arrays",
	"tags": [],
	"description": "",
	"content": " Creating Arrays  You can create that doesn\u0026rsquo;t initially contain any values, this is called an empty array\n An array can also be created with initial values\n Square brackets are a means of identifying if a variable is an array\n  Example // declare a variable as an empty array const numbers = [] // or you can declare an array with initial values const streets = [\u0026#39;Broadway\u0026#39;, \u0026#39;Houston\u0026#39;, \u0026#39;Grand\u0026#39;]  JS Bin on jsbin.com\n"
},
{
	"uri": "/10-asynchronous-js-and-promises/promises/creating-promises/",
	"title": "Creating Promises",
	"tags": [],
	"description": "",
	"content": " Creating Promise Objects  To create a new Promise object, we use the new keyword and the Promise constructor method:\nconst executorFunction = (resolve, reject) =\u0026gt; { } const myPromise = new Promise(executorFunction)  The Promise constructor method takes a function parameter called the executor function which runs automatically when the constructor is called\n The executor function generally starts an asynchronous operation and dictates how the promise should be settled\n  We\u0026rsquo;ll talk more about constructor methods in a later lesson\n Executor Function  The executor function has two function parameters:\n resolve(): If invoked, resolve() will change the promise’s status from \u0026ldquo;pending\u0026rdquo; to \u0026ldquo;fulfilled\u0026rdquo;, and the promise’s resolved value will be set to the argument passed into resolve()\n reject(): If invoked, reject() will change the promise’s status from \u0026ldquo;pending\u0026rdquo; to \u0026ldquo;rejected\u0026rdquo;, and the promise’s rejection reason be set to the argument passed into reject()\n  The resolve() and reject() functions aren’t defined by the programmer; when the Promise constructor runs, JavaScript will pass its own resolve() and reject() functions into the executor function\n  Example: Basic structure of an executor function // example below is meant to show structure only, this is not working code  const executorFunction = (resolve, reject) =\u0026gt; { if (someCondition) { resolve(\u0026#39;I resolved!\u0026#39;) } else { reject(\u0026#39;I rejected!\u0026#39;) } } // pass the executor function as a parameter to the Promise constructor  const myPromise = new Promise(executorFunction)  In the example above, myPromise resolves or rejects based on a simple condition, but, in practice, promises settle based on the results of asynchronous operations.; for example an API request to another service may \u0026ldquo;fulfill\u0026rdquo; by returning the desired data or it may \u0026ldquo;reject\u0026rdquo; if an error occurred during the request\n Example: Creating a Promise const inventory = { sunglasses: 202, pants: 421, shirts: 1344 } // Write your code below:  const myExecutor = (resolve, reject) =\u0026gt; { if (inventory.sunglasses \u0026gt; 0) { resolve(\u0026#39;Sunglasses order processed.\u0026#39;) } else { reject(\u0026#39;That item is sold out.\u0026#39;) } } const orderSunglasses = () =\u0026gt; { return new Promise(myExecutor) } const orderPromise = orderSunglasses() // print out the promise object  console.log(orderPromise)   Run the jsbin below and open up chrome developer tools and inspect the promise object that is being printed to the console. Can you identify the current status of the promise?  JS Bin on jsbin.com\nAlternative Syntax The most common syntax for constructing promise involves combining the executor function with the Promise constructor\nconst inventory = { sunglasses: 202, pants: 421, shirts: 1344 } const orderSunglasses = () =\u0026gt; { // Most common syntax for creating promises  return new Promise((resolve, reject) =\u0026gt; { if (inventory.sunglasses \u0026gt; 0) { resolve(\u0026#39;Sunglasses order processed.\u0026#39;) } else { reject(\u0026#39;That item is sold out.\u0026#39;) } }) } const orderPromise = orderSunglasses() // print out the promise object  console.log(orderPromise)  JS Bin on jsbin.com\n"
},
{
	"uri": "/14-intro-to-crud-and-firebase/crud/",
	"title": "CRUD",
	"tags": [],
	"description": "",
	"content": " What is CRUD  Stands for Create, Read, Update and Delete\n CRUD paradigm is common in constructing data-backed software applications\n Helps developers plan how their application\u0026rsquo;s data should be structured\n In the context of working with APIs, CRUD maps nicely to HTTP Verbs GET (read), Post (create), PUT (update) and DELETE (delete)\n     CRUD Operation HTTP VERB Description     CREATE POST Create new data or resource   READ GET Read / fetch data or resource   UPDATE PUT Update existing data or resource   DELETE DELETE Delete existing data or resource    "
},
{
	"uri": "/09-http-and-apis/apis/data-formats/",
	"title": "Data Formats",
	"tags": [],
	"description": "",
	"content": " What is Serialized Data?  All data sent via HTTP are strings\n Unfortunately, what we really want to pass between web applications is structured data (i.e., arrays and hashes)\n Thus, native data structures can be serialized into a string representation of the data\n This string can be transmitted and then parsed back into data by another web agent.  There are two major serialized data formats\u0026hellip;\n  JSON JSON stands for \u0026ldquo;JavaScript Object Notation\u0026rdquo; and has become a universal standard for serializing native data structures for transmission. It is light-weight, easy to read and quick to parse.\n{ \u0026quot;users\u0026quot;: [{ \u0026quot;name\u0026quot;: \u0026quot;Bob\u0026quot;, \u0026quot;id\u0026quot;: 23 }, { \u0026quot;name\u0026quot;: \u0026quot;Tim\u0026quot;, \u0026quot;id\u0026quot;: 72 }] }   Remember, JSON is a serialized format. While it may look like an object, it needs to be parsed so we can interact with it as a true Javascript object.\nFor more information about JSON\n XML XML stands for \u0026ldquo;eXtensible Markup Language\u0026rdquo; and is the granddaddy of serialized data formats (itself based on HTML). XML is fat, ugly and cumbersome to parse. It remains a major format, however, due to its legacy usage across the web. You\u0026rsquo;ll probably always favor using a JSON API, if available.\n\u0026lt;users\u0026gt; \u0026lt;user id=\u0026quot;23\u0026quot;\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[Bob]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;/user\u0026gt; \u0026lt;user id=\u0026quot;72\u0026quot;\u0026gt; \u0026lt;name\u0026gt;\u0026lt;![CDATA[Tim]]\u0026gt;\u0026lt;/name\u0026gt; \u0026lt;/user\u0026gt; \u0026lt;/users\u0026gt;  Many APIs publish data in multiple formats, for example\u0026hellip;\n http://dev.markitondemand.com/Api/Quote/json?symbol=AAPL http://dev.markitondemand.com/Api/Quote/xml?symbol=AAPL  "
},
{
	"uri": "/04-functions-and-scope/declaring-functions/",
	"title": "Declaring Functions",
	"tags": [],
	"description": "",
	"content": " Declaring a Function  A function declaration is code that stipulates what the function can do\n Use the function keyword to define a function\n Functions can be given a name\n The name must be followed by parentheses\n The opening and closing curly braces indicate a “code block”\n The statements for your function goes within the code block\n Also referred to as \u0026ldquo;defining a function\u0026rdquo;\n  Simply declaring the function will not run this code, this function must be called in order for the code inside the function to be run\n Example // declare a function named sayGoodMorning() function sayGoodMorning() { console.log(\u0026#34;Good Morning\u0026#34;) }  JS Bin on jsbin.com\nExercise  Declare a function named bark that prints (via console.log()) 'Woof, Woof'  JS Bin on jsbin.com\n"
},
{
	"uri": "/02-javascript-basics/variables/declaring-variables/",
	"title": "Declaring Variables",
	"tags": [],
	"description": "",
	"content": " Declaring Variables  Variables are created by declaring them\n Use the let or const keyword to declare a variable\n If you declare a variable without assigning it an initial value, the value of that variable will be undefined\n  // declaring a variable  let firstName  Variables only need to be declared once\n "
},
{
	"uri": "/06-dom-and-jquery/jquery-overview/document-ready/",
	"title": "Document Ready Function",
	"tags": [],
	"description": "",
	"content": " Document Ready Function  jQuery (and native JavaScript) must wait for a page to be loaded before it can try to dynamically update a page (i.e. Manipulate the page\u0026rsquo;s DOM)  We can also avoid this issue by adding the \u0026lt;script\u0026gt; tag (the tag we used to link our .js files to our .html files) at the bottom of your html pages right before the closing \u0026lt;\\body\u0026gt; tag\n  jQuery provides a \u0026ldquo;document ready\u0026rdquo; function that will run once the DOM is fully loaded (i.e the page elements have been fully rendered)\n There are two ways to express the \u0026ldquo;document ready\u0026rdquo; function for jQuery\n  Option #1: Long form syntax // using jQuery (same as above but with much more intuitive syntax)  $(document).ready(function(){ // place your code here  // jQuery code must be placed inside of a document ready block })  Option #2: Short form alternative syntax // using jQuery (same as above but with much more intuitive syntax)  $(function(){ // this is the same as the $(document).ready(function(){}) function  // just much less code  // place your code here })  Option #2a: Short form alternative syntax with ES6  Even less typing :)  // using jQuery (same as above but with much more intuitive syntax)  $(() =\u0026gt; { // this is the same as the $(document).ready(function(){}) function  // just much less code  // place your code here })  There are no advantages to choosing one syntax over the other. However, option #2 \u0026amp; #2a is less typing :)\n "
},
{
	"uri": "/05-arrays-objects/objects/accessing-properties/dot-notation/",
	"title": "Dot Notation",
	"tags": [],
	"description": "",
	"content": " Dot Notation  Dot notation allows us to access properties with a .  Example const superHero = { \u0026#39;secret identity\u0026#39;: \u0026#39;Peter Parker\u0026#39;, name: \u0026#39;Spiderman\u0026#39;, powers: [\u0026#39;super strength\u0026#39;, \u0026#39;hyper awareness\u0026#39;, \u0026#39;agility\u0026#39;, \u0026#39;genius intellect\u0026#39;], age: 17 } console.log(superHero.name) console.log(superHero.powers)  JS Bin on jsbin.com\n"
},
{
	"uri": "/16-intro-to-express/express/",
	"title": "Express",
	"tags": [],
	"description": "",
	"content": "  Overview   Middleware   Routing   Route Parameters   "
},
{
	"uri": "/13-object-oriented-js/classes/methods/getters-and-setters/",
	"title": "Getters &amp; Setters",
	"tags": [],
	"description": "",
	"content": " Getters \u0026amp; Setters  Getters and Setters allow developers to write methods that enable reading (get) and the writing (set) of properties of the instances (objects)\n Getters and setters is a common pattern used in object oriented programming; ES6 classes introduced a new syntax for getters and setters on object properties\n  class Car { constructor(make, model) { this._make = make this._model = model } get make() { return this._make } get model() { return this._model } set model(newModel) { this._model = newModel } } const myTesla = new Car(\u0026#34;Telsa\u0026#34;, \u0026#34;Model 3\u0026#34;) console.log(myTesla.make) console.log(myTesla.model) // change model of myTesla  myTesla.model = \u0026#34;Model X\u0026#34; console.log(myTesla.model)  Here\u0026rsquo;s a summary of the code above:\n We are using get and set which allows us to run code on the reading or writing of a property\n Notice that we\u0026rsquo;ve prepended our property names with underscores (_make and _model) this is a convention to indicate that these properties should not be accessed directly\n Our getters simply return the value associated with the property, for example:\nget make() { return this._make }  Our setters allows use to reassign a new value to our properties, for example:\nset model(newModel) { this._model = newModel }  We call out getter methods the using dot notation *without parentheses\nmyTesla.make // this returns the make property  We call out setter methods the using dot notation reassigning a new value using an = sign\nmyTesla.model = \u0026quot;Model X\u0026quot; // this sets the model property to new value   Example JS Bin on jsbin.com\nWhy Getters and Setters?  Getters and Setters effectively protect your data, particularly when creating classes\n They provide a simple syntax for reading and writing properties\n  Exercise  In the Employee constructor, prepend the name and salary properties with an underscore (_).\n Add a getter method called name() that returns the value of the name property\n Add a getter method called salary() that returns the value of the salary property\n Add a setter method called name(newName) that allows you to provide an employee with a new name\n  class Employee { constructor(name, salary) { this.name = name this.salary = salary } // add code below  // add code above } /* Uncomment lines below after you\u0026#39;ve made your updates */ // const methodMan = new Employee(\u0026#34;Johnny Blaze\u0026#34;, \u0026#34;100000\u0026#34;) // console.log(methodMan.name) // console.log(methodMan.salary) // methodMan.name = \u0026#34;Jonathan Blaze\u0026#34; // console.log(methodName.name)  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-manipulation/getting-setting-content/",
	"title": "Getting &amp; Setting Content",
	"tags": [],
	"description": "",
	"content": " Getting \u0026amp; Setting Content  .text()   .html()   .val()   .attr()   "
},
{
	"uri": "/17-deploying-your-app/github-pages/",
	"title": "Github Pages",
	"tags": [],
	"description": "",
	"content": " What is Github Pages?  GitHub Pages is a static site hosting service designed to host your personal, organization, or project pages directly from a GitHub repository\n GitHub Pages is a static site hosting service and doesn\u0026rsquo;t support server-side code such as, Express (via Node JS), Ruby, Python or PHP\n  "
},
{
	"uri": "/10-asynchronous-js-and-promises/async-await/handling-async-issues-with-async-await/",
	"title": "Handling Async Issues with Async / Await",
	"tags": [],
	"description": "",
	"content": " Handling Async Issues with Async / Await  Let\u0026rsquo;s see how we can apply Async / Await to your .printLetter() program  Example: Using Async / Await to control the execution order of async functions function printLetter(letter) { return new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; { console.log(letter) resolve() }, Math.floor(Math.random() * 3000)) }) } /* convert .printAll() to an async / await function by prepending \u0026#39;await\u0026#39; before the function keyword */ async function printAll(){ await printLetter(\u0026#34;A\u0026#34;) await printLetter(\u0026#34;B\u0026#34;) await printLetter(\u0026#34;C\u0026#34;) await printLetter(\u0026#34;D\u0026#34;) } console.log(\u0026#39;Calling printAll function\u0026#39;) printAll() console.log(\u0026#39;End of code\u0026#39;)  JS Bin on jsbin.com\n In the code above, we modify .printAll() by prepending the declaration with async\n As a result of this change, we can simplify our promise consumption by using await inside the function to call the letters in sequence: \u0026quot;A\u0026quot; -\u0026gt; \u0026quot;B\u0026quot; -\u0026gt; \u0026quot;C\u0026quot; -\u0026gt; \u0026quot;D\u0026quot;\n Compare this code to the approach we used with the regular Promise syntax and you\u0026rsquo;ll notice that the async / await syntax is much cleaner and looks like synchronous code\n  "
},
{
	"uri": "/solutions/homework-solutions/",
	"title": "Homework Solutions",
	"tags": [],
	"description": "",
	"content": " Homework Solutions Disclaimer: These files are not meant to be viewed as the \u0026ldquo;right answer, instead view them as a way to learn how another developer approached the same problem.\n Homework #1:  Homework #1: JS Basics, Control Flow Loops Solution  Homework #2:  Homework #2: Functions Solution  "
},
{
	"uri": "/09-http-and-apis/http/",
	"title": "HTTP",
	"tags": [],
	"description": "",
	"content": " HTTP  Overview   HTTP Requests   HTTP Responses   "
},
{
	"uri": "/09-http-and-apis/http/http-request/http-methods/",
	"title": "HTTP Methods",
	"tags": [],
	"description": "",
	"content": " HTTP Methods  The method, like GET, describes what effect a request is intended to have, and how the server should process it\n The following are the most widely used HTTP Methods:\n GET   POST   PUT   DELETE     "
},
{
	"uri": "/09-http-and-apis/http/http-response/",
	"title": "HTTP Responses",
	"tags": [],
	"description": "",
	"content": " HTTP Responses  An HTTP response is made by a server to a client\n The aim of the response is to provide the client with the resource it requested, or inform the client that the action it requested has been carried out; or else to inform the client that an error occurred in processing its request\n An HTTP response contains:\n A status line\n A series of HTTP headers, or header fields\n A message body, which is usually needed\n   Status Line  The status line is the first line in the response message. It consists of at least three items:   The HTTP version number\n The HTTP specification to which the server has tried to make the message comply.  A status code\n Three-digit number indicating the result of the request  A reason phrase\n also known as status text, which is human-readable text that summarizes the meaning of the status code   Example Status Line HTTP/1.1 200 OK\n the HTTP version is HTTP/1.1\n the status code is 200\n the reason phrase is OK\n  The Server is responsible for constructing the status line of a request\n "
},
{
	"uri": "/homework-assignments/hw-assignment-01/",
	"title": "HW Assignment #1",
	"tags": [],
	"description": "",
	"content": " Summary of this week\u0026rsquo;s homework assignment: Due Date: Wednesday, September 18th\nComplete Homework #1 - JS Basics, Control Flow \u0026amp; Loops  You are tasked with completing the problem set which is hosted on Github, see the url below:\n Github Repo for Homework #1 - JS Basics, Control Flow \u0026amp; Loops  Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment\n  "
},
{
	"uri": "/03-control-flow-and-loops/conditionals/if-statement/",
	"title": "if Statement",
	"tags": [],
	"description": "",
	"content": " if Statement  Used when you want to have some sort of single branching logic  if (condition) { code to run if condition is true } // run some other code  Example const isRewardsMember = true let totalPrice = 100 if (isRewardsMember) { totalPrice = totalPrice * 0.80 } console.log(totalPrice)  JS Bin on jsbin.com\n"
},
{
	"uri": "/11-lab-giphy-weather-app/instructions/",
	"title": "Instructions",
	"tags": [],
	"description": "",
	"content": " Overview You are tasked with building an application that leverages different APIs to provide a city’s weather in a fun way\nInstructions 1) Download starter code\n The starter code for this code along is hosted on Github, see the url below:\n Lab: Giphy Weather App   2) Get API keys for OpenWeather and Giphy (if you haven’t done so already)\n"
},
{
	"uri": "/15-project-firebase-todo-app/instructions/",
	"title": "Instructions",
	"tags": [],
	"description": "",
	"content": " Overview You are tasked with adding persistent data storage to an unfinished todo application using Firebase\u0026rsquo;s Realtime Database product\nInstructions 1) Download starter code\n The starter code for this code along is hosted on Github, see the url below:\n Project: Firebase Todo App   2) Create a new Firebase project called doit-app\n3) Add a \u0026ldquo;Realtime Database\u0026rdquo; to the project and choose the \u0026ldquo;Start in test mode\u0026rdquo; option\n4) Add a top level node called tasks(in the name field) and paste the following in the value field: { \u0026quot;111\u0026quot;: { \u0026quot;name\u0026quot;: \u0026quot;do taxes\u0026quot;, \u0026quot;completed\u0026quot;: false }}\nAfter adding the tasks node, your data should look similar to the image below:\n"
},
{
	"uri": "/02-javascript-basics/",
	"title": "JavaScript Basics",
	"tags": [],
	"description": "",
	"content": " Lesson 02 JavaScript Basics "
},
{
	"uri": "/06-dom-and-jquery/jquery-overview/",
	"title": "jQuery Overview",
	"tags": [],
	"description": "",
	"content": " jQuery Overview During this section we\u0026rsquo;ll cover:\n What is jQuery?   Benefits of jQuery   Document Ready Function   Adding jQuery to your Projects   jQuery Syntax   jQuery Selectors   jQuery Objects   "
},
{
	"uri": "/09-http-and-apis/json/json-parse/",
	"title": "JSON.parse()",
	"tags": [],
	"description": "",
	"content": " JSON.parse()  When JSON is received from another service, it is in a string format\n In order to effectively work with JSON data in our code, we need to covert it so an object, array or value\n JSON.parse() is a method that converts an stringified JSON to native JavaScript datatypes (most commonly objects or arrays)\n  Example const jsonString = \u0026#39;{\u0026#34;members\u0026#34;:[{\u0026#34;name\u0026#34;:\u0026#34;Spider-Man\u0026#34;,\u0026#34;alias\u0026#34;:\u0026#34;Peter Parker\u0026#34;},{\u0026#34;name\u0026#34;:\u0026#34;Black Widow\u0026#34;,\u0026#34;alias\u0026#34;:\u0026#34;Natasha Romanova\u0026#34;}]}\u0026#39; const parsedJson = JSON.parse(jsonString) console.log(\u0026#39;parsedJson\u0026#39;, parsedJson) console.log(`data type of parsedJson: ${typeof parsedJson}`)  JS Bin on jsbin.com\n"
},
{
	"uri": "/04-functions-and-scope/scope/local-scope/",
	"title": "Local Scope",
	"tags": [],
	"description": "",
	"content": " Local Scope  Variables defined inside a function are in the local scope\n A variable with local scope cannot be referenced outside of that function\n Functions create their own private scope that prevents code from outside directly accessing it\u0026rsquo;s variables\n  Example function showInspirationalMessage() { // \u0026#34;message\u0026#34; variable is declared **inside** a function which means it is LOCAL to this function  const message = \u0026#34;Don\u0026#39;t give up, you can do it!!\u0026#34; console.log(message) } // prints message variable showInspirationalMessage() /* Now let\u0026#39;s attempt to directly access the message variable and log it out to the console */ console.log(message) // \u0026lt;-- Error! The variable is local to the function can cannot be \u0026#34;directly\u0026#34; accessed outside of the function  JS Bin on jsbin.com\n As you can see in this example any variables declared / defined inside of the showInspirationalMessage() function are only accessible inside showInspirationalMessage; this prevents any other code from outside of the function from directly accessing it\u0026rsquo;s variables  Local Scope with Parameters  Function parameters are local to the function and cannot be accessed outside of the function  Example function squareMe(number) { // The \u0026#34;number\u0026#34; parameter is variable that is LOCAL to the squareMe function  return number**2 } const result = squareMe(7) console.log(result) /* Now let\u0026#39;s attempt to directly access the `number` parameter */ console.log(number) // \u0026lt;-- Error! The variable is local to the function can cannot be \u0026#34;directly\u0026#34; accessed outside of the function  JS Bin on jsbin.com\nVariables with the same name in different scopes ARE NOT THE SAME  Multiple variables with the same name but different scopes each will be treated as if they are distinct variables with each variable containing their own separate values  Example // declare a variable named \u0026#39;actor\u0026#39; in the Global Scope const actor = \u0026#34;Daniel Craig\u0026#34; function bestBondActor() { // declare a variable named \u0026#39;actor\u0026#39; within a function (Local Scope)  const actor = \u0026#34;Sean Connery\u0026#34; return actor } const result = bestBondActor() console.log(result) // \u0026lt;-- prints Sean Connery  /* Now let\u0026#39;s print out the `actor` variable */ console.log(actor) // \u0026lt;-- prints Daniel Craig  JS Bin on jsbin.com\n"
},
{
	"uri": "/class-resources/node-git-installation/mac-os-x/",
	"title": "Mac OS X Installation Instructions",
	"tags": [],
	"description": "",
	"content": " Mac OS X Installation Instructions 1) Open your terminal application  Open your terminal (Applications \u0026gt; Utilities \u0026gt; Terminal)\n All of the following commands (below) that start with $ should be copied and pasted in your terminal / command prompt (also referred to as the \u0026ldquo;command line\u0026rdquo;)\n DO NOT include the \u0026lsquo;$\u0026rsquo; when copying and pasting the commands below; \u0026lsquo;$\u0026rsquo; is a universal symbol for the terminal / command line\n Press the enter / return key on your keyboard after pasting the command\n  2) Install brew  Brew is a package manager that we use to install various command line applications to your computer.\n Paste the following command in your Terminal, and hit enter:\n$ ruby -e \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u0026quot;   3) Install Git Git is used to track the state of your code over time. GitHub has built its platform on Git technology. We will be using both Git and GitHub to distribute code, submit assignments, and offer feedback.\nPaste the following command in your Terminal, and hit enter to install Git:\n $ brew install git  4) Configure Git  Copy and paste the following two commands (separately) into your Terminal. Replace the name and email address values with your own\n$ git config --global user.name \u0026quot;Steve Jobs\u0026quot; $ git config --global user.email \u0026quot;steve@apple.com\u0026quot;  Follow these instructions to create a new SSH Key (a special, very secure, key which allows your laptop access to your github account without having to remember your github password)\n Add your new SSH Key to GitHub following these instructions\n Verify your key works by running the following:\n$ ssh git@github.com  You should see output similar to:\nHi \u0026lt;you\u0026gt;! You've successfully authenticated, but GitHub does not provide shell access. Connection to github.com closed.   5) Install Node  Refer to the package installer on Node’s website  "
},
{
	"uri": "/16-intro-to-express/express/middleware/",
	"title": "Middleware",
	"tags": [],
	"description": "",
	"content": " Middleware  Middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the application’s request-response cycle\n Middleware functions can perform the following tasks:\n Execute any code.\n Make changes to the request and the response objects.\n End the request-response cycle.\n Call the next middleware function in the stack\n  An Express application is essentially a series of middleware function calls\n Here\u0026rsquo;s an example of one type of Middleware that can be found in an Express application\n  app.get(\u0026#39;/user/:id\u0026#39;, function (req, res, next) { res.send(\u0026#39;USER\u0026#39;) })   The code above uses the .get() middleware to listen for GET requests to /user/:id  "
},
{
	"uri": "/final-projects/milestones-due-dates/",
	"title": "Milestones &amp; Due Dates",
	"tags": [],
	"description": "",
	"content": " Throughout the course you will be providing deliverables that will help keep your final projects on track to be completed on time.\nMilestones    Milestone Due Date     Submit three (3) of project ideas Tues, Oct 8th   Get your project idea approved Wed, Oct 9th   Create github repository for your final project Wed, Oct 9th   Create and submit wireframes Mon, Oct 14th   Provide a project plan for your final project Wed, Oct 16th   Host your project Fri, Nov 1st   Complete your final project Mon, Nov 4th    "
},
{
	"uri": "/06-dom-and-jquery/jquery-events/mouse-events/",
	"title": "Mouse Events",
	"tags": [],
	"description": "",
	"content": " Mouse Events  Mouse events are fired when users click some element, move the mouse pointer etc\n Here are some commonly used jQuery methods to handle the mouse events:\n .click() Event   .hover() Event     "
},
{
	"uri": "/02-javascript-basics/data-types/numbers/",
	"title": "Numbers",
	"tags": [],
	"description": "",
	"content": " Numbers  Used for tasks involving counting or calculating sums\n Whole numbers (integers) or decimals (floats)\n Numbers can be negative or positive\n Numbers do not have quotes around them\n  There are no commas used when expressing numbers, for example the number 1,750 is expressed as 1750 in JavaScript\n JS Bin on jsbin.com\nConverting Strings to Numbers  Sometimes you will find yourself in a position where you need to convert a string to a number\n This happens when you attempt to read numeric values from html (html displays everything as a string)\n Use the parseInt() or parseFloat() methods to accomplish this\n  JS Bin on jsbin.com\n"
},
{
	"uri": "/00-course-intro-and-tools/objectives/",
	"title": "Objectives",
	"tags": [],
	"description": "",
	"content": " Cover class logistics, structure \u0026amp; keys to success\n Introduce tools you will be using throughout the class\n Discuss the benchmarks for assessments in terms of class participation, homework, and unit projects\n Confirm installation and configuration of Node, Git, and other command line tools\n Practice programmatic thinking by writing pseudocode\n  "
},
{
	"uri": "/09-http-and-apis/http/http-request/http-methods/post/",
	"title": "POST",
	"tags": [],
	"description": "",
	"content": " POST  A POST request creates a new item on the server\n A request like POST https://restaurant-reviews.com/reviews could make a new review when we click the \u0026ldquo;Submit review\u0026rdquo; button on the webpage\n POST requests are often accompanied by data passed along in the HTTP request body. e.g. when we write a review for Little Beet, we would include our username (eric), our review (The shrimp salad is so delightful), and a star rating (4 out of 5)\n POST requests often return an ID of the new item, like 3\n POST requests are not idempotent\n When we make one of these requests, the state of the server changes\n Making the request again would create another item with another ID\n   "
},
{
	"uri": "/12-project-build-a-slackbot/project-overview/",
	"title": "Project Overview",
	"tags": [],
	"description": "",
	"content": " Project Overview OpenWeatherBot: We will be building a slackbot that allows users to get information about a city\u0026rsquo;s current weather directly in Slack.\nHere\u0026rsquo;s a diagram that provides a high-level view of how our slackbot will work:\n"
},
{
	"uri": "/04-functions-and-scope/scope/block-statements/",
	"title": "Scope in Block Statements",
	"tags": [],
	"description": "",
	"content": " Scope in Block Statements  Block statements like if and switch conditions or for and while loops, unlike functions, will create a new scope if you use let or const but NOT when you use var  Example  Declaring a variable within a Block statement using let creates local scope  if (true) { // this \u0026#39;if\u0026#39; conditional block creates a new scope because we use \u0026#39;let\u0026#39;  const name = \u0026#39;Prince\u0026#39; // name is local to the if block  console.log(name) // logs \u0026#39;Prince\u0026#39; } console.log(\u0026#39;----\u0026#39;) console.log(name) // \u0026lt;--- error because the \u0026#39;name\u0026#39; variable can only be accessed from within the block (due to the use of \u0026#39;let\u0026#39;)  JS Bin on jsbin.com\n Declaring a variable within a Block statement using var DOES NOT create local scope  if (true) { var name = \u0026#39;Prince\u0026#39; // declare a variable using \u0026#39;var`  console.log(name) // logs \u0026#39;Prince\u0026#39; } console.log(\u0026#39;----\u0026#39;) console.log(name) // \u0026lt;--- logs \u0026#39;Prince\u0026#39; because the \u0026#39;name\u0026#39; variable is in the global scope due to the use of `var`  JS Bin on jsbin.com\n"
},
{
	"uri": "/12-project-build-a-slackbot/tutorial/step-2-create-new-slack-app/",
	"title": "Step 2: Create New Slack App",
	"tags": [],
	"description": "",
	"content": " Step 2: Create New Slack App Slack bots are packaged as Slack apps. Slack apps allow you to add more functionality into your Slack workspace\n To create your new Slack app, go to this page: https://api.slack.com/apps?new_app=1 and set your app name to OpenWeatherBot.\n Set the \u0026ldquo;Development Slack Workspace\u0026rdquo; to the new workspace you created in Step 1.\n  "
},
{
	"uri": "/17-deploying-your-app/code-along-hosting-with-heroku/step-2-prepare-the-app/",
	"title": "Step 2: Prepare the App",
	"tags": [],
	"description": "",
	"content": " Prepare the App During this step we are going to get the application ready for a Heroku deployment\na. Install parcel-bundler locally Since this application used Parcel, we need to instruct Heroku\u0026rsquo;s servers to install Parcel before it tries to \u0026ldquo;build\u0026rdquo; the application in the cloud\n In your terminal, navigate to the project folder and run the following command:\n$ npm install parcel-bundler   Do not include the -g or --global flag here\n  Check your package.json file to confirm that parcel-bundler is listed in the dependencies section  \nb. Update the scripts section of your package.json file The scripts section of the package.json are commands that can be run to carry about any type of action; they are usually meant to automate the process of manually typing in commands in the terminal\nWe are going to add scripts that will be responsible for building and running our Parcel application both locally and in Heroku\n Replace the contents of the scripts section of package.json to following snippet below (leave the rest of the file unchanged):  \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;npm run prepare-prod \u0026amp;\u0026amp; npm run build-prod\u0026#34;, \u0026#34;build-prod\u0026#34;: \u0026#34;./node_modules/parcel-bundler/bin/cli.js index.html\u0026#34;, \u0026#34;prepare-prod\u0026#34;: \u0026#34;parcel build index.html\u0026#34;, \u0026#34;build-dev\u0026#34;: \u0026#34;parcel index.html\u0026#34; },   Here\u0026rsquo;s a summary of each script:     Script name command description     build-dev parcel index.html runs local Parcel web server   prepare-prod parcel build index.html Parcel command used to prepare app for production   build-prod ./node_modules/parcel-bundler/bin/cli.js index.html This command use the Parcel CLI to build the application in production (i.e. on Heroku or another host provider)   start npm run prepare-prod \u0026amp;\u0026amp; npm run build-prod This command run the prepare-prod and build-prod command in sequence    Heroku is configured to run npm start during the deploy process (see docs)\n c. Specify your current node version in package.json Heroku recommends that specify a Node.js version that matches the runtime you’re developing and testing with\n Find which version of Node your computer is currently running on by entering the following command:\n$ node -v  Make note of the node version that is printed as a result of the above command and update your package.json according to the instructions below\n For example, if the result of node -v was v12.1.0 then you should update your package.json by adding an engines property to the json object and updating to look like the snippet below (leave the rest of the file unchanged):\n  \u0026#34;scripts\u0026#34;: { \u0026#34;start\u0026#34;: \u0026#34;npm run prepare-prod \u0026amp;\u0026amp; npm run build-prod\u0026#34;, \u0026#34;build-prod\u0026#34;: \u0026#34;./node_modules/parcel-bundler/bin/cli.js index.html\u0026#34;, \u0026#34;prepare-prod\u0026#34;: \u0026#34;parcel build index.html\u0026#34;, \u0026#34;build-dev\u0026#34;: \u0026#34;parcel index.html\u0026#34; }, \u0026#34;engines\u0026#34;: { \u0026#34;node\u0026#34;: \u0026#34;12.1.0\u0026#34; },  The node version entered in the engines section should reflect the node version running on your local computer; do not include the \u0026ldquo;v\u0026rdquo;\n "
},
{
	"uri": "/final-projects/milestones-due-dates/submit-project-ideas/",
	"title": "Submit Project Ideas",
	"tags": [],
	"description": "",
	"content": " Milestone I: Submit Project Ideas  Submit three (3) ideas for your final project\n Deliverable: Use this form to submit your final project ideas\n Due Date: Tuesday, October 8th\n After which, I\u0026rsquo;ll schedule some time to meet with you to discuss your ideas\n  "
},
{
	"uri": "/13-object-oriented-js/inheritance/super-and-extends/",
	"title": "Super &amp; Extends",
	"tags": [],
	"description": "",
	"content": " Super \u0026amp; Extends  super keyword is used to access and call functions on an object\u0026rsquo;s parent\n The extends keyword is used in a Class to create a class which is a child of another class\n super and extends are used together to create parent-child relationships between Classes\n  Example class Rectangle { constructor(height, width) { this._name = \u0026#39;Rectangle\u0026#39; this._height = height this._width = width } sayName() { console.log(`Hi, I am a ${this._name}`) } calculateArea() { return this._height * this._width } } // use \u0026#34;extends\u0026#34; keyword to create a \u0026#34;child\u0026#34; class // of the Rectangle class class Square extends Rectangle { constructor(length) { // Here, it calls the parent class\u0026#39;s constructor with lengths  // provided for the Rectangle\u0026#39;s width and height  super(length, length) // Note: In derived classes, super() must be called before you  // can use \u0026#39;this\u0026#39;. Leaving this out will cause a reference error.  this._name = \u0026#39;Square\u0026#39; } calculateSurfaceArea() { return this.calculateArea() * 6 } } const myRectangle = new Rectangle(5, 7) myRectangle.sayName() const rectangleArea = myRectangle.calculateArea() console.log(rectangleArea) console.log(\u0026#39;----\u0026#39;) const mySquare = new Square(7) mySquare.sayName() const squareArea = mySquare.calculateArea() console.log(squareArea) // call calculateSurfaceArea() method owned by // the child class (Square) const surfaceAreaOfSquare = mySquare.calculateSurfaceArea() console.log(surfaceAreaOfSquare)  JS Bin on jsbin.com\nExercise  Below we\u0026rsquo;ve created two classes Employee \u0026amp; Manager\n Unfortunately our implementation contains some duplication\n Use your knowledge of inheritance and \u0026ldquo;super\u0026rdquo; and \u0026ldquo;extends\u0026rdquo; keywords to remove the duplicated logic\n  class Employee { constructor(firstName, lastName) { this._firstName = firstName this._lastName = lastName } getFullName() { return `${this._firstName}${this._lastName}` } } class Manager { constructor(firstName, lastName) { this._firstName = firstName this._lastName = lastName this._managedEmployees = [] } getFullName() { return `${this._firstName}${this._lastName}` } addEmployee(employee) { this._managedEmployees.push(employee) } listEmployees(employees) { return this._managedEmployees.map(member =\u0026gt; member) } } const employee1 = new Employee(\u0026#34;Mickey\u0026#34;, \u0026#34;Mouse\u0026#34;) const employee2 = new Employee(\u0026#34;Donald\u0026#34;, \u0026#34;Duck\u0026#34;) console.log(employee1.getFullName()) console.log(employee2.getFullName()) const manager = new Manager(\u0026#34;Minnie\u0026#34;, \u0026#34;Mouse\u0026#34;) console.log(manager.getFullName()) manager.addEmployee(employee1) manager.addEmployee(employee2) const minniesTeam = manager.listEmployees() console.log(minniesTeam)  JS Bin on jsbin.com\n"
},
{
	"uri": "/10-asynchronous-js-and-promises/synchronous-programming/",
	"title": "Synchronous Programming",
	"tags": [],
	"description": "",
	"content": " What is Synchronous Programming?  In a synchronous programming model, things happen one at a time\n This means that only one operation can be in progress at time\n When you call a function that performs a long-running action, it returns only when the action has finished and it can return the result\n Subsequent actions can only be run after the previous action has completed; this means that action #1 blocks action #2\n JavaScript is a synchronous, blocking, single-threaded language by default\n  Most of the code we\u0026rsquo;ve written so far has been synchronous\n Example Here\u0026rsquo;s an example of Synchronous code\nfunction printLetter(letter) { console.log(letter) } function printAll(){ printLetter(\u0026#34;A\u0026#34;) printLetter(\u0026#34;B\u0026#34;) printLetter(\u0026#34;C\u0026#34;) } printAll()  The the example above, printAll() calls printLetter() 3 times with \u0026ldquo;A\u0026rdquo;, \u0026ldquo;B\u0026rdquo;, \u0026ldquo;C\u0026rdquo; as parameters and each letter is printed out in the order in which the function was called\nJS Bin on jsbin.com\n"
},
{
	"uri": "/03-control-flow-and-loops/loops-and-iteration/while-loops/",
	"title": "while Loop",
	"tags": [],
	"description": "",
	"content": " while Loop  While loops run its statements as long as a specified condition evaluates to true  while (condition) { statement } // run some other code   If the condition becomes false, statement within the loop stops executing and control passes to the statement following the loop  Example let n = 0 while (n \u0026lt; 5) { console.log(n) n++ }  JS Bin on jsbin.com\nExercise Write a program that uses a while loop to print (using console.log()) a countdown from 10 to 1\nJS Bin on jsbin.com\n"
},
{
	"uri": "/09-http-and-apis/apis/",
	"title": "APIs",
	"tags": [],
	"description": "",
	"content": " APIs  Overview   Finding APIs   Data Formats   API Keys   "
},
{
	"uri": "/13-object-oriented-js/classes/encapsulation/",
	"title": "Encapsulation",
	"tags": [],
	"description": "",
	"content": " What is Encapsulation?  A core concept in OOP\n Refers to enclosing all the functionality of an object within that object so that the object’s internal workings (its methods and properties) are hidden from the rest of the application\n This allows us to only we only expose data and functionality that is needed to accomplish such a task and nothing else; this makes your code less prone to errors\n The means breaking up our classes / objects into two 2 parts\n Public Interface - what everyone needs to know in order to get our object to accomplish some task\n Private Interface - the inner workings of the object, the parts that most people don\u0026rsquo;t see, \u0026ldquo;under the hood\u0026rdquo;\n  Real-world Analogy: Cars\n Public Interface - everything needed to accomplish the core task of getting people from point A to point B; knowledge of how to drive the car, park the car, turn on air conditioning, etc\n Private Interface - everything \u0026ldquo;under the hood\u0026rdquo; or \u0026ldquo;behind the scenes\u0026rdquo; necessary for the car to be able to function and provide all of the \u0026ldquo;features\u0026rdquo; available in the public interface\n   Most people know how to operate a car (public interface) but they probably don\u0026rsquo;t know much about fixing an engine (private interface)\nEncapsulation in JavaScript  Encapsulation can be achieved with JavaScript Classes by not directly \u0026ldquo;exposing\u0026rdquo; instance variables of a Class\n Example of an \u0026ldquo;exposed\u0026rdquo; Class\n  // define Car class  class Car { constructor(make, model) { this._make = make this._model = model } } // create a new instance of the \u0026#34;Car\u0026#34; class  // and store it in a const variable named \u0026#34;myCar\u0026#34;  const myCar = new Car(\u0026#34;toyota\u0026#34;, \u0026#34;prius\u0026#34;) // changing the \u0026#34;model\u0026#34; instance variable  // using \u0026#34;direct access\u0026#34;  myCar._model = \u0026#34;corolla\u0026#34;  The example above is not considered best practice because our instance variables are being accessed \u0026ldquo;outside\u0026rdquo; of the class; meaning our private data was accessed \u0026ldquo;publicly\u0026rdquo;\nHow do we make instance variables private?  Unfortunately, JavaScript does not have built in support for \u0026ldquo;private\u0026rdquo; data within object or class\n The most common way to communicate that an instance variable is private (best practice is to make ALL instance variables private) is to prefix the property with an underscore (_)\n This is a convention only and does not prevent someone from writing code to access a class\u0026rsquo;s private data publicly, the instance variables are still technically accessible outside of the class / object, developers will have to rely on our own discipline to do the right thing (until JavaScript implements proper support)\n The best practice is to provide \u0026ldquo;indirect\u0026rdquo; access to your class\u0026rsquo;s private dat through the use of methods (which we\u0026rsquo;ll cover next)\n  "
},
{
	"uri": "/06-dom-and-jquery/jquery-effects/toggle/",
	"title": ".toggle()",
	"tags": [],
	"description": "",
	"content": " .toggle() Method  Method that shows or hides element in such a way that if the element is initially displayed, it will be hidden; if hidden, it will be displayed  Example $(() =\u0026gt; { $(\u0026#34;button\u0026#34;).click(() =\u0026gt; { // toggle #box element  $(\u0026#34;#box\u0026#34;).toggle() }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-overview/add-jquery/",
	"title": "Adding jQuery to your Projects",
	"tags": [],
	"description": "",
	"content": " There are two ways to add jQuery to your projects  Download the jQuery library file and store it within your project\n Use a CDN (content delivery network) and reference the jQuery library file remotely\n   Add jQuery via Download   Add jQuery via CDN   "
},
{
	"uri": "/09-http-and-apis/apis/api-keys/",
	"title": "API Keys",
	"tags": [],
	"description": "",
	"content": " What Is An API Key?  While the majority of APIs are free to use, many of them require an API \u0026ldquo;key\u0026rdquo; that identifies the developer requesting data access\n This is done to regulate usage and prevent abuse. Some APIs also rate-limit developers, meaning they have caps on the free data allowed during a given time period\n  Exercise A: Access the Giphy API Try hitting the Giphy API\u0026hellip;\n No key: http://api.giphy.com/v1/gifs/search?q=funny+cat\n With key: http://api.giphy.com/v1/gifs/search?q=funny+cat\u0026amp;api_key=dc6zaTOxFJmzC\n  It is very important that you not push your API keys to a public Github repo.\n This is especially true when working with Amazon Web Services (AWS). Here\u0026rsquo;s an example of a stolen key horror story.\n Exercise B: Your First API Key(s) As a developer you will need to figure out how to navigate a site and find what your looking for\n Now go to the following web site(s) and sign up for an API key(s).\n giphy.com\n openweathermap.com\n   "
},
{
	"uri": "/10-asynchronous-js-and-promises/asynchronous-programming/",
	"title": "Asynchronous Programming",
	"tags": [],
	"description": "",
	"content": " What is Asynchronous Programming?  An asynchronous model allows multiple things to happen at the same time\n An asynchronous operation is one that allows the computer to “move on” to other tasks while waiting for the asynchronous operation to complete\n Asynchronous programming means that time-consuming operations don’t have to bring everything else in our programs to a halt\n When you start an action, your program continues to run. When the action finishes, the program is informed and gets access to the result\n  Examples of Asynchronous Operations  Program making an API request to another service\n Program making a database request\n Program making a time-consuming complex calculation\n Program running a large batch operation (i.e. sending out weekly newsletter only to customers that have opted in)\n  "
},
{
	"uri": "/02-javascript-basics/data-types/booleans/",
	"title": "Booleans",
	"tags": [],
	"description": "",
	"content": " Booleans  Can only have a value of true or false\n true/false are special keywords in JavaScript and do not have quotes around them\n  // declare a variable called isOn and assign a value of true const isOn = true // declare a variable called isWarm let isWarm // assign a value of false to isWarm isWarm = false   Booleans are useful for helping our programs make decisions (when used with conditionals, comparison \u0026amp; logical operators)\n Booleans also helps a program known when it should stop/start looping\n  "
},
{
	"uri": "/01-command-line-js-and-git/git-vocabulary/branch/",
	"title": "Branch",
	"tags": [],
	"description": "",
	"content": " Branch  Parallel version of a repository\n Branches allow developers to work on new features without affecting the \u0026ldquo;master\u0026rdquo; branch and disrupting the \u0026ldquo;live\u0026rdquo; version\n The process of creating a separate branch to work on a feature is referred to as \u0026ldquo;creating a feature branch\u0026ldquo;\n After developers have added their new feature (on their feature branch) they will then make a Pull Request (which is a request for comments and a request to Merge their changes back into the main branch (master branch))\n  "
},
{
	"uri": "/04-functions-and-scope/calling-functions/",
	"title": "Calling Functions",
	"tags": [],
	"description": "",
	"content": " Calling a Function  Calling a function means you are using the function (as opposed to defining a function which only tells us what the function can do)\n To call a function you simply write function name followed by parentheses (don’t forget the parentheses!)\n Now you can call this function as many times as you want\n  /** define / declare a function named shout() by itself this doesn\u0026#39;t do anything, we must \u0026#34;Call\u0026#34; it in order to use it **/ function shout() { console.log(\u0026#34;HELLO!\u0026#34;) } /** Calling the function named shout we call a function by writing the name of the function followed by parentheses **/ shout()  JS Bin on jsbin.com\nExercise:  Create a function named yolo that logs 'yolo'. Next, use your knowledge of calling functions to ensure that 'yolo' is printed 3 times in the console  JS Bin on jsbin.com\n"
},
{
	"uri": "/17-deploying-your-app/code-along-hosting-with-github-pages/",
	"title": "Code Along: Hosting with Github Pages",
	"tags": [],
	"description": "",
	"content": " Code Along: Hosting with Github Pages  Together we\u0026rsquo;ll walk through the process of hosting a static application, an application that does not have a server (i.e. Express), on Github Pages  Instructions 1. Find Traffic Light project Using your operating system\u0026rsquo;s finder / explorer application, copy your Traffic Light application (project name: traffic-light) application from a lesson earlier in the course folder to your lesson_17 folder\n If you do not have a working version of traffic-light you can clone down a working version here  \n2. Set up Git for the Traffic Light application  On the command line, navigate to the project folder for the traffic-light application in your lesson_17 folder and delete the .git folder by running the following command:\n$ rm -rf .git  This command will remove the local repository from this copy of the traffic-light application\n Initialize a new git repository and run git add . and git commit -m \u0026quot;initial commit\u0026quot;\n$ git init \u0026amp;\u0026amp; git add . \u0026amp;\u0026amp; git commit -m \u0026quot;initial commit\u0026quot;   \n3. Host the project on Github Pages  We\u0026rsquo;re going to follow the instructions found in the link below:\n Step by Step Instructions for hosting on Github Pages   \n4. Delete the Github Pages repository (Only do this after you\u0026rsquo;ve completed Step #3)  Congrats, you\u0026rsquo;ve successfully launched a static application on Github Pages\n Since Github only allows you to have one \u0026ldquo;Github Pages repository\u0026rdquo; per Github account, you should delete this repository so it can be available for your Final Project or some other application or site you\u0026rsquo;d like to host in the future\n Follow the steps below to delete your Github Pages repository (your_account_name/your_account_name.github.io):\n Deleting a Repository   "
},
{
	"uri": "/10-asynchronous-js-and-promises/promises/consuming-promises/",
	"title": "Consuming Promises",
	"tags": [],
	"description": "",
	"content": " Consuming Promises  While knowing how to construct a promise is useful, most of your interactions with promises will be spent consuming (or using) Promises\n Put another way, you’ll be handling Promise objects returned to you as the result of an asynchronous operation\n These promises will start off pending but must settle eventually\n  Settling Promises  Promise objects offer a .then() function that allows us to dictate what should happen after the promise settles\n .then() is a function that takes two callback functions as arguments; when the promise settles, the appropriate handler will be invoked with that settled value\n onFulfilled: The first handler is the success handler, and it should contain the logic for the promise resolving\n onRejected: The second handler is the failure handler, and it should contain the logic for the promise rejecting\n   Example #1: Settling Promises: Successfully resolving a promise let promise = new Promise(function(resolve, reject) { setTimeout(() =\u0026gt; resolve(\u0026#34;done!\u0026#34;), 1000) }) // resolve runs the first function in .then() promise.then( result =\u0026gt; console.log(result), // shows \u0026#34;done!\u0026#34; after 1 second  error =\u0026gt; console.log(error) // doesn\u0026#39;t run )  JS Bin on jsbin.com\nExample #2: Settling Promises: Rejecting a promise let promise = new Promise(function(resolve, reject) { setTimeout(() =\u0026gt; reject(new Error(\u0026#34;Whoops!\u0026#34;)), 1000) }) // reject runs the second function in .then promise.then( result =\u0026gt; console.log(result), // doesn\u0026#39;t run  error =\u0026gt; console.log(error) // shows \u0026#34;Error: Whoops!\u0026#34; after 1 second )  JS Bin on jsbin.com\n"
},
{
	"uri": "/03-control-flow-and-loops/",
	"title": "Control Flow and Loops",
	"tags": [],
	"description": "",
	"content": " Lesson 03 Control Flow and Loops "
},
{
	"uri": "/12-project-build-a-slackbot/documentaton/",
	"title": "Documentation",
	"tags": [],
	"description": "",
	"content": " Documentation Since we\u0026rsquo;ll be the APIs of both Slack and OpenWeather, you should have the API docs of both platforms open in your browser so you can quickly reference them when needed:\n Slack API Docs\n OpenWeather API Docs\n  "
},
{
	"uri": "/14-intro-to-crud-and-firebase/firebase/",
	"title": "Firebase",
	"tags": [],
	"description": "",
	"content": " Firebase  Overview   Benefits   NoSQL Databases   "
},
{
	"uri": "/13-object-oriented-js/classes/methods/general-methods/",
	"title": "General Methods",
	"tags": [],
	"description": "",
	"content": " General Methods  You can specify \u0026ldquo;regular\u0026rdquo; methods that allow you do things other than simply getting and setting the property values  Example class Car { constructor(make, model) { this._make = make this._model = model this._miles = 30 } get make() { return this._make } get model() { return this._model } get miles() { return this._miles } set model(newModel) { this._model = newModel } drive(newMiles) { console.log(`driving ${newMiles}miles`) this._miles = this._miles + newMiles } } const myTesla = new Car(\u0026#34;Telsa\u0026#34;, \u0026#34;Model 3\u0026#34;) console.log(myTesla.make) console.log(myTesla.miles) // call instance.addMilage() method  // to add additional miles  myTesla.drive(15) myTesla.drive(7) console.log(myTesla.miles)  Here\u0026rsquo;s a summary of the code above:\n We\u0026rsquo;ve specified a new property miles and set it to 30 for each new Car instance\n Next, we added a getter method for miles, that simply returns the value stored in the miles property\n Then, we created a \u0026ldquo;regular\u0026rdquo; method drive() that accepts a parameter (newMiles) and updates our miles property with a new value\n  JS Bin on jsbin.com\n"
},
{
	"uri": "/final-projects/milestones-due-dates/get-idea-approved/",
	"title": "Get Idea Approved",
	"tags": [],
	"description": "",
	"content": " Milestone II: Get Final Project Idea Approved  Due Date: Wednesday, October 9th\n After meeting with the instructor and discussing your idea, you\u0026rsquo;ll formally decide what you want to build   "
},
{
	"uri": "/13-object-oriented-js/classes/instances/",
	"title": "Instances",
	"tags": [],
	"description": "",
	"content": " Instances  An instance is an object that contains the property names and methods of a class, but with unique property values (i.e. instances of a Class have their own unique identities)  Example - Creating Instances // define Car class  class Car { constructor(make, model) { this._make = make this._model = model } } // create a new instance of the Car class  // and store it in a variable named myTesla  const myTesla = new Car(\u0026#34;Tesla\u0026#34;, \u0026#34;Model 3\u0026#34;) console.log(myTesla)   Here\u0026rsquo;s a summary of the code above:\n Below our Class definition we are using the new keyword to create a new instance of our Car class\n We create a new variable named myTesla that will store an instance of our Car class\n We use new keyword to generate a new instance of the Car class\n The new keyword calls the constructor() method of a class, runs the code inside of it and then returns a new instance  We pass the two strings to the Car constructor (\u0026quot;Tesla\u0026quot; and \u0026quot;Model 3\u0026quot;)\n This will set the make property to \u0026quot;Tesla\u0026quot; and the model property to \u0026quot;Model 3\u0026quot;  Then we log the value saved to the make property of the myTesla instance which prints out \u0026quot;Tesla\u0026quot;\n   JS Bin on jsbin.com\nExercise  Create an instance of the Cat class and set name to \u0026quot;Hobbes\u0026quot; and breed to \u0026quot;Tabby\u0026quot;; save the instance to a const variable named hobbesCat\n Create another instance of the Cat class and set name to \u0026quot;Tigger\u0026quot; and breed to \u0026quot;Tiger\u0026quot;, save the instance to a const variable named tiggerCat\n  class Cat { constructor(name, breed) { this._name = name this._breed = breed } } // add your code below  // add your code above  console.log(hobbesCat) console.log(tiggerCat)  JS Bin on jsbin.com\n"
},
{
	"uri": "/09-http-and-apis/json/",
	"title": "JSON",
	"tags": [],
	"description": "",
	"content": " JSON  Overview   JSON.stringify()   JSON.parse()   "
},
{
	"uri": "/14-intro-to-crud-and-firebase/firebase/nosql-databases/",
	"title": "NoSQL Databases",
	"tags": [],
	"description": "",
	"content": " What is a NoSQL Database  Firebase uses a NoSQL for it\u0026rsquo;s cloud-based databases\n Like many NoSQL databases, Firebase\u0026rsquo;s Real-time database stores data as JSON objects\n NoSQL databases don\u0026rsquo;t enforce strict data structure which results in much more flexibility than traditional SQL databases\n Downsides: when dealing with \u0026ldquo;loosely structured\u0026rdquo; data, common use cases such as building out relationships (for example: a student has many courses, and courses contain many students) in your data can be non-intuitive and complex\n  Firebase\u0026rsquo;s Realtime Database  Firebase Realtime Database is a cloud-hosted NoSQL database that lets you store and sync between your users in realtime\n It\u0026rsquo;s really just one big JSON object that the developers can manage in realtime\n  "
},
{
	"uri": "/10-asynchronous-js-and-promises/async-await/passing-values-with-async-await/",
	"title": "Passing Values with Async / Await",
	"tags": [],
	"description": "",
	"content": " Passing values with Async / Await  Similar to the original Promise syntax, we can easily pass values from one async function to other functions if needed  Example function getSuperheroes() { return new Promise(resolve =\u0026gt; { setTimeout(() =\u0026gt; { // send an array of heroes when  // promise is resolved  resolve([ { name: \u0026#34;Captain Marvel\u0026#34;, team: \u0026#34;Avengers\u0026#34; }, { name: \u0026#34;Batman\u0026#34;, team: \u0026#34;Justice League\u0026#34;}, { name: \u0026#34;Jean Grey\u0026#34;, team: \u0026#34;X-Men\u0026#34;}, { name: \u0026#34;Domino\u0026#34;, team: \u0026#34;X-Force\u0026#34;} ]) }, 3000) }); } function printHeroes(heroes) { heroes.forEach((hero) =\u0026gt; { console.log(`name: ${hero.name}, team: ${hero.team}`) }) } /* Declare function with \u0026#34;async\u0026#34; keyword */ async function fetchHeroes() { // make asynchronous call to .getSuperheroes()  // wait for the result and then use that  // result as input for the .printHeroes() function  const fetchedHeroes = await getSuperheroes() printHeroes(fetchedHeroes) } console.log(\u0026#34;Calling fetchHeroes()\u0026#34;) fetchHeroes() console.log(\u0026#34;end of the code\u0026#34;)  JS Bin on jsbin.com\n"
},
{
	"uri": "/09-http-and-apis/http/http-request/http-methods/put/",
	"title": "PUT",
	"tags": [],
	"description": "",
	"content": " PUT  The PUT method updates an item at the specified resource\n A request like PUT https://restaurant-reviews.com/restaurants/353 could update the information for Little Beet Restaurant after the owner edits the restaurant\u0026rsquo;s hours\n Like POST requests, PUT requests come with data in the HTTP request body to specify the fields and new values to update\n For example Hours: M-F 10a-10p, closed on Saturday and Sunday\n  "
},
{
	"uri": "/class-resources/atom-editor-settings/",
	"title": "Recommended Atom Editor Settings",
	"tags": [],
	"description": "",
	"content": " All of the settings below can be accessed using the following steps:\n Mac: cmd + , -\u0026gt; Editor PC: ctrl + , -\u0026gt; Editor  Setting indentation levels / default tab-size During our course we will be using a set indentation level of 2 spaces (1 indentation level = 2 spaces). Atom makes it easy conform to this approach by setting our tab to a set level of indentation.\nAfter updating this setting, pressing the tab key will represent one level of indentation which will translate to 2 spaces.\nDisplaying indentation guides Displaying the indentation guide provides a visual way of helping you ensure your indentation levels are correct\nSetting wordwrap Wordwrap ensures that long lines in your code are automatically wrapped to the next line. This improves readability of your code.\n"
},
{
	"uri": "/11-lab-giphy-weather-app/requirements/",
	"title": "Requirements",
	"tags": [],
	"description": "",
	"content": " Requirements Requirement #1: App UI: The user interface should contain a single form input and a submit button (the starter code already provides the UI)\nRequirement #2: Make Multiple API Requests When users enter a city name into the input field and press submit the following should happen:\n API Request #1 - Fetch City’s Current Weather\nYour app should make an API request to OpenWeather and fetch the current weather associated with the city name entered into the form\n API Request #2 - Fetch Gif representing the City\nYour app should make an API request to Giphy and retrieve a gifs associated with the city name entered into the form field\n API Request #3 - Fetch Gif representing City’s weather description\nThe current weather data fetched from “API Request #1” returns a weather description (i.e. rain, clear sky, snow, etc) . Make an API request to the Giphy and retrieve gifs associated with this weather description\n  Requirement #3: Display Data Once all the data has been received from the API requests, display the following data on the screen:\n * The city’s current weather * City name * Current temperature (displayed in Fahrenheit or Celsius) * Weather description * Min temp * Max temp * 1 gif that represents the city * 1 gif that represents the city’s current weather description  Requirement #4: Use Promises  Promises must be used to make consume / handle the API responses\n Axios must be used to make the API requests\n  "
},
{
	"uri": "/15-project-firebase-todo-app/requirements/",
	"title": "Requirements",
	"tags": [],
	"description": "",
	"content": " Requirements Requirement #1: Add Create Functionality When users attempt to add a new task using the #addItem form, the task should be successfully saved in the app\u0026rsquo;s Firebase database. Within your Firebase database, the name of the new task should be stored as name and the completed value of every newly created task should be set to false\nRequirement #2: Add Read Functionality The Doit app should list all tasks stored in your Firebase database within the #taskList div. Make sure you comment out the hardcoded tasks after you\u0026rsquo;ve successfully completed this step.\nRequirement #3: Add Update Functionality 2a: Users should be able update a task name and have that change reflected in the app\u0026rsquo;s Firebase database.\n2b: Users should be able toggle the checkbox (i.e. check and uncheck) to change the completed status of a task. The updated completed status (resulting from a checkbox change) should be reflected in the app\u0026rsquo;s Firebase database.\nRequirement #4: Add Delete Functionality Users should be able delete a task and have that task also deleted from the app\u0026rsquo;s Firebase database.\n"
},
{
	"uri": "/16-intro-to-express/express/routing/",
	"title": "Routing",
	"tags": [],
	"description": "",
	"content": " Routing  Routing refers to determining how an application responds to a client request to a particular endpoint, which is a URI (or path) and a specific HTTP request method (GET, POST, and so on)\n Each route can have one or more handler functions, which are executed when the route is matched\n Route definition takes the following structure:\napp.METHOD(PATH, HANDLER)   app is an instance of express.\n METHOD is an HTTP request method, in lowercase.\n PATH is a path on the server.\n HANDLER is the function executed when the route is matched.\n   Examples Respond with Hello World! on the homepage:\napp.get(\u0026#39;/\u0026#39;, function (req, res) { res.send(\u0026#39;Hello World!\u0026#39;) })  Respond to POST request on the root route (/), the application’s home page:\napp.post(\u0026#39;/\u0026#39;, function (req, res) { res.send(\u0026#39;Got a POST request\u0026#39;) })  Respond to a PUT request to the /user route:\napp.put(\u0026#39;/user\u0026#39;, function (req, res) { res.send(\u0026#39;Got a PUT request at /user\u0026#39;) })  Respond to a DELETE request to the /user route:\napp.delete(\u0026#39;/user\u0026#39;, function (req, res) { res.send(\u0026#39;Got a DELETE request at /user\u0026#39;) })  "
},
{
	"uri": "/17-deploying-your-app/code-along-hosting-with-heroku/step-3-run-heroku-locally/",
	"title": "Step 3: Run Heroku Locally",
	"tags": [],
	"description": "",
	"content": " Step 3: Run Heroku Locally Heroku\u0026rsquo;s CLI has a feature that allows us to run application locally in a \u0026ldquo;heroku production-like\u0026rdquo; environment\nThis is a great way to catch issues before deploying the production\na. Copy .env.local to .env When running heroku locally it, heroku will automatically look for the .env (and not .env.local) for any potential environment variables\n Run the following command from the project folder to copy .env.local to .env\n$ cp .env.local .env   Remember we needed .env.local to meet Parcel\u0026rsquo;s requirements of using environment variables using its web server\n  Add .env to .gitignore\n.env.local /node_modules .env   \nb. Run the application locally  In your terminal, run the following command (from within the project folder) to start the application locally using heroku\n$ heroku local  Heroku\u0026rsquo;s local default web server is http://localhost:5000, navigate to this url in your browser and confirm that the application works as expected\n  "
},
{
	"uri": "/12-project-build-a-slackbot/tutorial/step-3-set-up-node-application/",
	"title": "Step 3: Set Up Node Application",
	"tags": [],
	"description": "",
	"content": " Step 3: Set up Node Application In this step we\u0026rsquo;re going to create a node application that will function as our server\n1. Create project folder  Navigate to the appropriate lesson_0x_file in your class folder\n Create a new folder named openweather-bot\n Change directories into that folder\n  2. Run npm init to bootstrap the Node application  Run npm init from the command line (make sure you inside your newly created project folder)\n Accept all of the default values (just press \u0026ldquo;enter\u0026rdquo; at every prompt)\n  3. Install the node packages (libraries) needed to create our server We\u0026rsquo;re going to be using Express, a minimal Node.js web framework, to quickly create our local server\nIn addition, we\u0026rsquo;ll also be adding other packages such as axios give our sever additional functionality\n From the command line (inside your project folder) run the following command:\n$ npm install express axios body-parser dotenv   4. Confirm package.json contains the recently installed packages  Open the project in your text editor and view the contents of package.json\n Confirm that the content of the file looks similar to the following:\n  { \u0026#34;name\u0026#34;: \u0026#34;openweather-bot\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;main\u0026#34;: \u0026#34;index.js\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;test\u0026#34;: \u0026#34;echo \\\u0026#34;Error: no test specified\\\u0026#34; \u0026amp;\u0026amp; exit 1\u0026#34; }, \u0026#34;author\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;license\u0026#34;: \u0026#34;ISC\u0026#34;, \u0026#34;dependencies\u0026#34;: { \u0026#34;axios\u0026#34;: \u0026#34;^0.19.0\u0026#34;, \u0026#34;body-parser\u0026#34;: \u0026#34;^1.19.0\u0026#34;, \u0026#34;dotenv\u0026#34;: \u0026#34;^8.1.0\u0026#34;, \u0026#34;express\u0026#34;: \u0026#34;^4.17.1\u0026#34; } } 5. Add logic necessary to run our server Let\u0026rsquo;s add some code to our server to get it up and running\n Create a file named index.js\n Next, add the following code to index.js:\n  require(\u0026#39;dotenv\u0026#39;).config() const express = require(\u0026#39;express\u0026#39;) const bodyParser = require(\u0026#39;body-parser\u0026#39;) const axios = require(\u0026#39;axios\u0026#39;) // establishing the I/O port const PORT = process.env.PORT || 3000 const app = express() app.use(bodyParser.urlencoded({ extended: true })) app.use(bodyParser.json()) app.listen(PORT, () =\u0026gt; console.log(`App is up and running listening on port ${PORT}`)) app.get(\u0026#39;/\u0026#39;, async (req, res) =\u0026gt; { try { res.json({ message: \u0026#39;Welcome to Express Auth App!\u0026#39; }) } catch (e) { res.status(e.status).json({ message: e.status }) } })   In the code above, we are specifying that our server should run on port 3000 (const PORT = process.env.PORT || 3000)\n This means that our the url of our server (when running) can be found at http://localhost:3000  app.get('/'...) is what Express refers to as a route handler\n Route handlers are functions that get called when the server receives a request to a specified route  The following code tells our server to return a welcome message (as json) for any successful requests sent to the root path (i.e. /)\napp.get(\u0026#39;/\u0026#39;, async (req, res) =\u0026gt; { try { res.json({ message: \u0026#39;Welcome to Express Auth App!\u0026#39; }) } catch (e) { res.status(e.status).json({ message: e.status }) } })  With servers, the root path represents host part of the url without anyting after the domain\n For example the root path of CNN is https://cnn.com (and not https://cnn.com/world)\n In our case, the root path of our local server http://localhost:3000\n   6. Run the server  On the command line run the following command to run the server\n$ node index.js   Open your browser and enter http://localhost:3000 into the address bar and press enter\n The welcome message should be successfully displayed\n  "
},
{
	"uri": "/03-control-flow-and-loops/switch-statement/",
	"title": "Switch Statement",
	"tags": [],
	"description": "",
	"content": " Switch Statement  Used an alternative to if..else if statements\n Evaluates an expression, and matches that expression against each of the case clauses\n if there\u0026rsquo;s a match, the statements associated with that case clause will be executed\n The break keyword must be used to exit the Switch statement after a match is found\n  switch(expression) { case x: // execute code block when expression === x  break // \u0026lt;- break must be called to exit the switch statement after the match  case y: // execute code block when expression === y  break // \u0026lt;- break must be called to exit the switch statement after the match  default: // execute code block when expression === when none of the above cases match }  Example const food = \u0026#34;apple\u0026#34; switch(food) { case \u0026#39;pear\u0026#39;: console.log(\u0026#34;I like pears\u0026#34;) break case \u0026#39;apple\u0026#39;: case \u0026#39;oranges\u0026#39;: console.log(\u0026#34;I like apples \u0026amp; oranges\u0026#34;) break case \u0026#39;grapes\u0026#39;: console.log(\u0026#34;I like grapes\u0026#34;) break default: console.log(\u0026#34;Your fruit selection is weak :(\u0026#34;) }  JS Bin on jsbin.com\nExercise Rewrite the following if..else if statement using a switch statement:\nconst yourGrade = \u0026#34;C\u0026#34; if (yourGrade === \u0026#34;A\u0026#34;) { console.log(\u0026#34;You earned an A!\u0026#34;) } else if (yourGrade === \u0026#34;B\u0026#34;) { console.log(\u0026#34;You earned a B\u0026#34;) } else if (yourGrade === \u0026#34;C\u0026#34;) { console.log(\u0026#34;You earned a C\u0026#34;) } else { console.log(\u0026#34;You earned less than a C\u0026#34;) }  JS Bin on jsbin.com\n"
},
{
	"uri": "/02-javascript-basics/variables/updating-variables/",
	"title": "Updating Variables",
	"tags": [],
	"description": "",
	"content": " Updating Variables  We can provide variables with a value by updating a value to the variable\n An = (equal sign) is used to assign a value to variable\n This process of updating/changing variable\u0026rsquo;s value is also referred to as assigning a value to a variable\n  let firstName // assigning a value to the variable firstName = \u0026#34;Cletus\u0026#34;  Declaring \u0026amp; Assigning Variables in one step  We can both declare and assign variables in one step\n This would be done if the developer wanted to set the initial value of the variable\n  // declare and assign an intial value to a variable let score = 0  Changing the value of a Variable after an initial value has already been assigned  In this case we will still use a single = (equal sign) to change or reassign a value of a variable  // declare and assign a value of 0 to the score variable let score = 0 // changing the value of the score variable from 0 to 3 score = 3  "
},
{
	"uri": "/02-javascript-basics/variables/",
	"title": "Variables",
	"tags": [],
	"description": "",
	"content": " What are Variables?\n Declaring Variables\n Updating Variables\n Naming Rules for Variables\n let vs var\n const\n  "
},
{
	"uri": "/06-dom-and-jquery/jquery-manipulation/css-style-manipulation/add-class/",
	"title": ".addClass()",
	"tags": [],
	"description": "",
	"content": " .addClass() Method  Method adds one or more classes to the selected elements  Example $(() =\u0026gt; { $(\u0026#34;#addBorderClass\u0026#34;).click(() =\u0026gt; { // add .strongBorder to box  $(\u0026#34;.box\u0026#34;).addClass(\u0026#34;strongBorder\u0026#34;) }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-manipulation/getting-setting-content/html/",
	"title": ".html()",
	"tags": [],
	"description": "",
	"content": " .html() Method  Method is used to get or set the HTML contents of the elements  Example of Getting (Reading) Html  To Get (Read) text of an element use .html() with nothing inside the parentheses\n When using .html() to get html contents, the html contents of the only the first matched element will be returned; see the docs for more info\n  $(() =\u0026gt; { $(\u0026#39;#readHtmlOfParagraph\u0026#39;).click(() =\u0026gt; { // get html of the first matched p element  const htmlOfParagraph = $(\u0026#34;p\u0026#34;).html() alert(htmlOfParagraph) }) $(\u0026#39;#readHtmlOfContainer\u0026#39;).click(() =\u0026gt; { // get html of container  const htmlOfContainer = $(\u0026#34;.container\u0026#34;).html() alert(htmlOfContainer) }) })  JS Bin on jsbin.com\nExample of Setting (writing) Html  To Set (Write) text of an element use .html(newHtml) with the new Html inside the parentheses  $(() =\u0026gt; { $(\u0026#39;#addNewNumber\u0026#39;).click(() =\u0026gt; { // create a new html element  const $htmlOfNewNumber = $(\u0026#34;\u0026lt;p class=\u0026#39;four\u0026#39;\u0026gt; \u0026lt;span\u0026gt;Four\u0026lt;/span\u0026gt;\u0026lt;/p\u0026gt;\u0026#34;) // add new html element to .numbers div  $(\u0026#39;.numbers\u0026#39;).html($htmlOfNewNumber) }) })  JS Bin on jsbin.com\n Notice how the previous paragraphs (\u0026lt;p\u0026gt;one\u0026lt;/p\u0026gt;, \u0026lt;p\u0026gt;two\u0026lt;/p\u0026gt; and \u0026lt;p\u0026gt;three\u0026lt;/p\u0026gt;) were replaced with \u0026lt;p\u0026gt;four\u0026lt;/p\u0026gt;, using .html(newHtml) will replace the children of the targeted element (in our case the targeted element was .container)\n Later in this lesson, we\u0026rsquo;ll see how we can add a new element to a list without replacing the exiting elements\n  "
},
{
	"uri": "/05-arrays-objects/array-iterators/map/",
	"title": ".map()",
	"tags": [],
	"description": "",
	"content": " .map()  Calls a function for each element of the array and returns a new array of results\n .map() is one of the most useful and used iterator methods\n .map() is does NOT mutate the original array\n The callback function for .map() accepts the following parameters:\n currentValue: (required) current element being processed in the array.\n index: (optional) index of the current element being processed in the array\n array: (optional) the array map was called upon.\n   Syntax Using traditional (ES5) function syntax\nconst result = arr.map(function(item, index, array) { // returns the new value instead of item })  Using arrow syntax (ES6)\nconst result = arr.map((item, index, array) =\u0026gt; { // returns the new value instead of item })  Example const numbers = [1, 2, 3, 4, 5 ] const numbersSquared = numbers.map( number =\u0026gt; number**2 ) console.log(numbersSquared) // [2, 4, 9, 16, 25]  console.log(numbers) // [1, 2, 3, 4, 5 ]  JS Bin on jsbin.com\nExercise  Use .map() to downcase all the words in loudWords. Save the returned values to a variable declared with const called lowerCaseWords;  JS Bin on jsbin.com\n"
},
{
	"uri": "/05-arrays-objects/array-review/adding-removing-items/pop/",
	"title": ".pop()",
	"tags": [],
	"description": "",
	"content": " .pop()  Extracts the last element of the array and returns it\n Like pop(), push() is also a mutating method because it changes the value of the original array\n  Example const fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Grapes\u0026#34;] fruits.pop() console.log(fruits) // Apple, Orange  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-manipulation/inserting-removing-content/prepend/",
	"title": ".prepend()",
	"tags": [],
	"description": "",
	"content": " .prepend() Method  Method used to insert content to the beginning of the selected elements (as the first child)  Example $(() =\u0026gt; { $(\u0026#39;#prependParagraph\u0026#39;).click(() =\u0026gt; { // prepend a new paragraph to list of paragraphs  const newParagraph = \u0026#34;\u0026lt;p class=\u0026#39;one\u0026#39;\u0026gt;One\u0026lt;/p\u0026gt;\u0026#34; $(\u0026#39;.numbers\u0026#39;).prepend(newParagraph) }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-effects/slide-up-slide-down/",
	"title": ".slideUp() &amp; .slideDown()",
	"tags": [],
	"description": "",
	"content": " .slideUp() \u0026amp; .slideDown() Methods  Methods used to hide or show the HTML elements by gradually decreasing or increasing their height  .slideUp() Example $(() =\u0026gt; { $(\u0026#34;button\u0026#34;).click(() =\u0026gt; { // slide #box element up with duration of 2 secs  $(\u0026#34;#box\u0026#34;).slideUp(2000) }) })  JS Bin on jsbin.com\n.slideDown() Example $(() =\u0026gt; { $(\u0026#34;button\u0026#34;).click(() =\u0026gt; { // slide #box element down  $(\u0026#34;#box\u0026#34;).slideDown() }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-events/form-events/submit/",
	"title": ".submit() Event",
	"tags": [],
	"description": "",
	"content": " .submit() Event  Attaches an event handler function to \u0026lt;form\u0026gt; elements that is executed when the user is attempts to submit a form  Example $(() =\u0026gt; { // listen for a .submit() event on this form  $(\u0026#39;form\u0026#39;).submit((event) =\u0026gt; { // prevent default behavior of forms  event.preventDefault() // read data from text field  const name = $(\u0026#39;input\u0026#39;).val() if (name === \u0026#39;\u0026#39;) { alert(\u0026#39;Please enter a name\u0026#39;) } else { alert(`Hello ${name}!`) } }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/05-arrays-objects/array-review/accessing-array-values/",
	"title": "Accessing Array Values",
	"tags": [],
	"description": "",
	"content": " Accessing Arrays Values  Values in an array are accessed as if they are in a numbered list\n Arrays are zero based meaning the 1st “value” in an array is at position (index) 0, the 2nd element is at position 1, and so on\n You access the value of an element in the array by passing the index of the item in square brackets\n  Example  You can access a value of an array by referencing its index (i.e. its order within the array)  // declare a variable called chipmunks and use it to store // an array of names const chipmunks = [\u0026#34;Alvin\u0026#34;, \u0026#34;Simon\u0026#34;, \u0026#34;Theodore\u0026#34;] // reference the first value in the array // here we pass in a zero, since that represents the first // element (value) in an array  const bandMember = chipmunks[0] //\u0026gt; the value stored in bandMember is \u0026#34;Alvin\u0026#34;  JS Bin on jsbin.com\n"
},
{
	"uri": "/09-http-and-apis/ajax/",
	"title": "AJAX",
	"tags": [],
	"description": "",
	"content": " AJAX  Overview   AJAX Requests using Native JS   AJAX Requests with jQuery   "
},
{
	"uri": "/05-arrays-objects/array-iterators/",
	"title": "Array Iterators",
	"tags": [],
	"description": "",
	"content": " Array Iterators  Looping though lists is a common task is programming\n Earlier in the course we reviewed loops suchs as while, do..while and for loops\n JavaScript also offers to built-in array methods (also known as iterators or iterator methods) which make looping easier when working with arrays\n Iterator methods called on arrays to manipulate elements and return values\n Let\u0026rsquo;s review some of the most common iterator methods:\n .forEach()   .map()   .find()   .filter()   .reduce()   Other Iterators     "
},
{
	"uri": "/02-javascript-basics/data-types/arrays/",
	"title": "Arrays",
	"tags": [],
	"description": "",
	"content": " Arrays  Used to when you are working with a list of values that are related to each other\n Use square brackets to create an array (this is also how you quickly recognize arrays)\n Values in an array are separated by commas\n  Creating an Array  We can store variables just like any other data type\n You can create that doesn\u0026rsquo;t initially contain any values, this is called an empty array\n An array can also be created with initial values\n Square brackets are a means of identifying if a variable is an array\n  // declare a variable as an empty array const numbers = [] // or you can declare an array with initial values const streets = [\u0026#39;Broadway\u0026#39;, \u0026#39;Houston\u0026#39;, \u0026#39;Grand\u0026#39;]  Values in an Array  Values in an array are accessed as if they are in a numbered list\n Arrays are zero based meaning the 1st “value” in an array is at position (index) 0, the 2nd element is at position 1, and so on\n You access the value of an element in the array by passing the index of the item in square brackets\n  const streets = [\u0026#39;Broadway\u0026#39;, \u0026#39;Houston\u0026#39;, \u0026#39;Grand\u0026#39;] // access the 2nd street listed in the array which is at index 1 const streetTwo = streets[1]  Accessing Values in an Array  You can access a value of an array by referencing its index (i.e. its order within the array)  // declare a variable called chipmunks and use it to store // an array of names const chipmunks = [\u0026#34;Alvin\u0026#34;, \u0026#34;Simon\u0026#34;, \u0026#34;Theodore\u0026#34;] // reference the first value in the array // here we pass in a zero, since that represents the first // element (value) in an array  const bandMember = chipmunks[0] //\u0026gt; the value stored in bandMember is \u0026#34;Alvin\u0026#34;  Changing Values in an Array  You can change a value in an array by referencing the value and then changing the value using an = (equal sign)  // declare a variable called newEditionMembers and use it to store // an array of names  const newEditionMembers = [\u0026#34;Ricky Bell\u0026#34;, \u0026#34;Michael Bivins\u0026#34;, \u0026#34;Bobby Brown\u0026#34;, \u0026#34;Ronnie DeVoe\u0026#34;, \u0026#34;Ralph Tresvant\u0026#34;] // We are going replace Bobby Brown with Johnny Gill // by referencing the 3rd element of the array by using index 2 // and then use assignment (just an equal sign) to change // the value to Johnny Gill  newEditionMembers[2] = \u0026#34;Johnny Gill\u0026#34;  Array Examples JS Bin on jsbin.com\nArrays are a flexible and powerful feature of JavaScript (and other programming languages as well). Click here for more information about Arrays\n "
},
{
	"uri": "/05-arrays-objects/objects/assigning-properties/",
	"title": "Assigning Properties",
	"tags": [],
	"description": "",
	"content": " Assigning Properties  We can use either dot notation, or bracket notation and the assignment operator, = to add new key-value pairs to an object or change an existing property  Example const superHero = { \u0026#39;secret identity\u0026#39;: \u0026#39;Peter Parker\u0026#39;, name: \u0026#39;Spiderman\u0026#39;, powers: [\u0026#39;super strength\u0026#39;, \u0026#39;hyper awareness\u0026#39;, \u0026#39;agility\u0026#39;, \u0026#39;genius intellect\u0026#39;], age: 17 } // update existing properties superHero.powers.push(\u0026#39;endurance\u0026#39;) superHero.age = 18 // add a new property superHero.homeCity = \u0026#39;New York City\u0026#39; console.log(superHero)  JS Bin on jsbin.com\n"
},
{
	"uri": "/05-arrays-objects/objects/accessing-properties/bracket-notation/",
	"title": "Bracket Notation",
	"tags": [],
	"description": "",
	"content": " Bracket Notation  Bracket notation is another way to to access a key’s value is by using bracket notation, [ ]\n To use bracket notation to access an object’s property, we pass in the property name (key) as a string\nsuperHero['secret identity']`\n We must use bracket notation when accessing keys that have numbers, spaces, or special characters in them\n Remember, object keys are always strings\n  Example const superHero = { \u0026#39;secret identity\u0026#39;: \u0026#39;Peter Parker\u0026#39;, name: \u0026#39;Spiderman\u0026#39;, powers: [\u0026#39;super strength\u0026#39;, \u0026#39;hyper awareness\u0026#39;, \u0026#39;agility\u0026#39;, \u0026#39;genius intellect\u0026#39;], age: 17 } console.log(superHero[\u0026#34;secret identity\u0026#34;]) console.log(superHero[\u0026#34;name\u0026#34;])  JS Bin on jsbin.com\nUsing variables to access properties  Bracket notation also allows us to use a variable inside the brackets to select the keys of an object  Example const superHero = { \u0026#39;secret identity\u0026#39;: \u0026#39;Peter Parker\u0026#39;, name: \u0026#39;Spiderman\u0026#39;, powers: [\u0026#39;super strength\u0026#39;, \u0026#39;hyper awareness\u0026#39;, \u0026#39;agility\u0026#39;, \u0026#39;genius intellect\u0026#39;], age: 17 } const attribute = \u0026#34;name\u0026#34; // use the \u0026#39;attribute\u0026#39; variable to access a property in superHero const attributeValue = superHero[attribute] console.log(superHero[attribute]) // This is the result of trying the same thing using dot notation console.log(superHero.attribute) // undefined  JS Bin on jsbin.com\n"
},
{
	"uri": "/16-intro-to-express/code-along-express-tmdb-app/",
	"title": "Code Along: Express TMDB App",
	"tags": [],
	"description": "",
	"content": " Code Along: Express TMDB App  Together we\u0026rsquo;ll walk through creating a full stack (backend \u0026amp; front-end) application that provides movie and tv show data using the TMDb API  1. Get the starter code for this code along  The starter code for this code along is hosted on Github, see the url below:\n Code Along: Express TMDb App\n Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment\n   2. Install Node Packages required to run the app  Navigate to project folder in the terminal and run the following\n$ npm install  Then run the server\n$ npm run start   3. Create a TMDB account  Create a free TMDb Account using the following link: create account\n Register for an API Key - follow the instructions found here: https://developers.themoviedb.org/3/getting-started/introduction\n  4. Access your TMDb API Key  Navigate to https://www.themoviedb.org/settings/api\n Look for the heading with the following label: API Key (v3 Auth)\n Copy the API key\n  5. Store API as Environment Variable  Open project in your editor\n In your terminal from the project folder, create a file named inside the .env\n$ touch .env  Add the following to the .env file\n  TMDB_API_KEY=ADD_YOUR_API_KEY_HERE  "
},
{
	"uri": "/14-intro-to-crud-and-firebase/code-along-firebase-playlist-app/",
	"title": "Code Along: Firebase Playlist App",
	"tags": [],
	"description": "",
	"content": " Code Along: Firebase Playlist App  Together we\u0026rsquo;ll walk through creating a playlist application that has its data persisted in Firebase\u0026rsquo;s Realtime Database (see docs)  1. Get the starter code for this code along  The starter code for this code along is hosted on Github, see the url below:\n Code Along: Firebase Playlist App (Updated)\n Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment\n   2. Create a Firebase account  Create a free Firebase Account using the following link: create account  "
},
{
	"uri": "/final-projects/milestones-due-dates/create-github-repository-for-final-project/",
	"title": "Create Github Repository for Final Project",
	"tags": [],
	"description": "",
	"content": " Milestone III: Create Github Repository for Final Project  Create a github repository for your final project, clone the project down to your \u0026lsquo;github\u0026rsquo; folder on your laptop\n Submit a link to your final project\u0026rsquo;s github repository\n Here\u0026rsquo;s an example of what link should look like: https://github.com/kareemgrant/kg-awesome-game  Due Date: Wednesday, October 9th\n Deliverable: Use this form to submit your repository url\n  Do not include spaces in your github repository names\n - **Deliverable**: Submit a link to your github repo here -- "
},
{
	"uri": "/02-javascript-basics/data-types/",
	"title": "Data Types",
	"tags": [],
	"description": "",
	"content": " Strings\n Numbers\n Booleans\n Arrays\n Objects\n  "
},
{
	"uri": "/09-http-and-apis/http/http-request/http-methods/delete/",
	"title": "DELETE",
	"tags": [],
	"description": "",
	"content": " DELETE  The DELETE method removes the resource at the URL.\n For example, DELETE https://restaurant-reviews.com/restaurants/353 will delete the review with the ID of 353\n DELETE requests are not idempotent. When we make one of these requests, the state of the server changes. Making the request again would probably result in an error since the item was already deleted\n The DELETE method is similar to the DELETE FROM statement\n  "
},
{
	"uri": "/06-dom-and-jquery/jquery-traversing/descendants/",
	"title": "descendants",
	"tags": [],
	"description": "",
	"content": " descendant Methods .children()  Method is used to get the direct children of the selected element  Example $(() =\u0026gt; { $(\u0026#34;button\u0026#34;).click(() =\u0026gt; { // this will add a border bottom  // to all the children of the div element (the \u0026lt;p\u0026gt; elements)  $(\u0026#39;div\u0026#39;).children().css(\u0026#34;border-bottom\u0026#34;, \u0026#34;3px double red\u0026#34;) }) })  JS Bin on jsbin.com\n.find()  Method is used to get the descendant elements of the selected element\n The find() and children() methods are similar, except that the find() method search through multiple levels down the DOM tree to the last descendant, whereas the children() method only search a single level down the DOM tree\n  Example $(() =\u0026gt; { $(\u0026#34;button\u0026#34;).click(() =\u0026gt; { // this will add a border bottom  // to all spans within the div element  $(\u0026#39;div\u0026#39;).find(\u0026#39;span\u0026#39;).css(\u0026#34;border-bottom\u0026#34;, \u0026#34;3px double red\u0026#34;) }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/03-control-flow-and-loops/loops-and-iteration/do-while-loops/",
	"title": "do..while Loop",
	"tags": [],
	"description": "",
	"content": " do..while Loop  A do\u0026hellip;while loop repeats until a specified condition evaluates to false  do { statement } while (condition)   statement is always executed once before the condition is checked (and then again until the while condition returns false)\n With do\u0026hellip;while loops, everything in-between the curly braces (i.e. statement(s)) will run at least once\n  Example let n = 0 do { console.log(n) n++ } while (n \u0026lt; 0)   the loop will run at least once and then terminate because 0 is NOT \u0026lt; 0  JS Bin on jsbin.com\n"
},
{
	"uri": "/10-asynchronous-js-and-promises/async-await/error-handling-with-async-await/",
	"title": "Error Handling with Async / Await",
	"tags": [],
	"description": "",
	"content": " Error Handling with Async / Await  With Async / Await we can use try..catch block to easily catch errors  Example function yayOrNay() { return new Promise((resolve, reject) =\u0026gt; { const val = Math.round(Math.random() * 1) // 0 or 1, at random  val ? resolve(\u0026#39;Lucky!!\u0026#39;) : reject(\u0026#39;Nope 😠\u0026#39;) }) } async function msg() { // use try..catch to handle any potential errors  // when using \u0026#34;async / await\u0026#34;  try { const msg = await yayOrNay(); console.log(msg) } catch(err) { console.log(err) } } msg() msg() msg() msg() msg() msg()  JS Bin on jsbin.com\n Notice how all of your \u0026ldquo;async-related\u0026rdquo; code lives inside the try {} portion of the try..catch block  Example #2: Handling errors with our Superhero fetcher  Let\u0026rsquo;s use try..catch to any errors that occur with our Superhero fetcher program  function getSuperheroes() { return new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; { // comment out to simulate reject()  /* resolve([ { name: \u0026#34;Captain Marvel\u0026#34;, team: \u0026#34;Avengers\u0026#34; }, { name: \u0026#34;Batman\u0026#34;, team: \u0026#34;Justice League\u0026#34;}, { name: \u0026#34;Jean Grey\u0026#34;, team: \u0026#34;X-Men\u0026#34;}, { name: \u0026#34;Domino\u0026#34;, team: \u0026#34;X-Force\u0026#34;} ]) */ // reject promise  reject(\u0026#34;Oh no!!! An error occurred while fetching heroes.\u0026#34;) }, 3000) }); } function printHeroes(heroes) { heroes.forEach((hero) =\u0026gt; { console.log(`name: ${hero.name}, team: ${hero.team}`) }) } async function fetchHeroes() { /* use `try..catch` to catch any errors that occur during our asynchronous operation */ try { const fetchedHeroes = await getSuperheroes() printHeroes(fetchedHeroes) } catch (e) { console.log(e) } } console.log(\u0026#34;Calling fetchHeroes()\u0026#34;) fetchHeroes() console.log(\u0026#34;end of the code\u0026#34;)  JS Bin on jsbin.com\n"
},
{
	"uri": "/07-dom-and-jquery-ii/event-current-target/",
	"title": "event.currentTarget",
	"tags": [],
	"description": "",
	"content": " event.currentTarget  JavaScript property (not specific to jQuery) that identifies the current target for the event\n It always refers to the element to which the event handler has been attached, as opposed\n Similar to $(this), with the added benefit that it works with arrow functions\n When using event.currentTarget in the context of jQuery, it should be wrapped in a jQuery object: $(event.currentTarget)\n  Example $(() =\u0026gt; { $(\u0026#34;#box\u0026#34;).click((event) =\u0026gt; { // use $(event.currentTarget) with with an arrow function  // to reference the element that is being \u0026#34;acted on\u0026#34;  $(event.currentTarget).fadeOut(1000) }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-events/form-events/",
	"title": "Form Events",
	"tags": [],
	"description": "",
	"content": " Form Events  Form events are fired when a form control receive or loses focus or when the user modify a form control value such as by typing text in a text input, select any option in a select box etc\n Here\u0026rsquo;re some commonly used jQuery methods to handle the form events:\n .change() Event   .submit() Event     "
},
{
	"uri": "/04-functions-and-scope/",
	"title": "Functions and Scope",
	"tags": [],
	"description": "",
	"content": " Lesson 04 Functions and Scope "
},
{
	"uri": "/01-command-line-js-and-git/git-overview/",
	"title": "Git Overview",
	"tags": [],
	"description": "",
	"content": " Version Control System (VCS)  Tracks the history of changes as people and teams collaborate on projects together (think \u0026ldquo;track changes feature available for MS Word or Google Docs\u0026rdquo;)\n Developers can review project history to find out:\n Which changes were made?\n Who made the changes?\n When were the changes made?\n Why were changes needed?\n   What is Git?  Git is VCS that is distributed - meaning developers don\u0026rsquo;t need a constant connection to be able to collaborate with other developers (unlike other VCSs)\n Allows developers to work anywhere and collaborate asynchronously from any time zone\n Git is the most popular VCS, used by over 70% of developers across the world\n Git operates a robust filesystem that keeps track every change to every file in your project by taking snapshots of a projects files every time changes are committed\n Git and GitHub are not the same\n  "
},
{
	"uri": "/10-asynchronous-js-and-promises/promises/handling-async-issues-with-promises/",
	"title": "Handling Async Issues with Promises",
	"tags": [],
	"description": "",
	"content": " Handling Async Issues with Promises  Let\u0026rsquo;s revisit our .printLetter() example and use promises\n First let\u0026rsquo;s modify our .printLetter() function to return a Promise\n  function printLetter(letter) { return new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; { console.log(letter) resolve() }, Math.floor(Math.random() * 3000)) }) } //... the rest of code below not shown for brevity  Example: Using Promises to control the execution order of async functions function printLetter(letter) { return new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; { console.log(letter) resolve() }, Math.floor(Math.random() * 3000)) }) } function printAll(){ printLetter(\u0026#34;A\u0026#34;) .then(() =\u0026gt; printLetter(\u0026#34;B\u0026#34;)) .then(() =\u0026gt; printLetter(\u0026#34;C\u0026#34;)) .then(() =\u0026gt; printLetter(\u0026#34;D\u0026#34;)) } console.log(\u0026#39;Calling printAll function\u0026#39;) printAll() console.log(\u0026#39;End of code\u0026#39;)  JS Bin on jsbin.com\nPromise Chain The following code snippet from the example above is referred to as a promise chain:\nprintLetter(\u0026quot;A\u0026quot;) .then(() =\u0026gt; printLetter(\u0026quot;B\u0026quot;)) .then(() =\u0026gt; printLetter(\u0026quot;C\u0026quot;)) .then(() =\u0026gt; printLetter(\u0026quot;D\u0026quot;))  "
},
{
	"uri": "/04-functions-and-scope/hoisting/",
	"title": "Hoisting",
	"tags": [],
	"description": "",
	"content": " Hoisting  Hoisting is a feature in JavaScript which allows access to function declarations before they’re defined\n This means that we can place a function call before our function declaration and everything will still work as expected\n  Example // Calling greetWorld() BEFORE it\u0026#39;s function declararion greetWorld() // declaration of greetWorld() function greetWorld() { console.log(\u0026#39;Hello, World!\u0026#39;) }  JS Bin on jsbin.com\n Notice how hoisting allowed greetWorld() to be called before the greetWorld() function was defined\n This is not considered a best practice, but you should be aware that the feature exists\n  "
},
{
	"uri": "/homework-assignments/hw-assignment-02/",
	"title": "HW Assignment #2",
	"tags": [],
	"description": "",
	"content": " Summary of this week\u0026rsquo;s homework assignment: Due Date: Wednesday, September 25th\nComplete Homework #2 - Functions  You are tasked with completing the problem set which is hosted on Github, see the url below:\n Github Repo for Homework #2 - Functions  Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment\n  "
},
{
	"uri": "/homework-assignments/hw-assignment-03/",
	"title": "HW Assignment #3",
	"tags": [],
	"description": "",
	"content": " Summary of this week\u0026rsquo;s homework assignment: Due Date: Thursday, October 3rd\nComplete Homework #3 - Iterators  You are tasked with completing the problem set\n Only use either .map(), .find() or .filter() to solve the problems in the problem set\n Do not use .forEach()\n  The problem set for this assignment is hosted on Github, see the url below:\n Github Repo for Homework #3 - Iterators  Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment\n  "
},
{
	"uri": "/03-control-flow-and-loops/conditionals/if-else/",
	"title": "if..else Statement",
	"tags": [],
	"description": "",
	"content": " if..else Statement  Used when evaluating between just two choices\n These are great for “either or” situations\n You do not specify a condition for the “else” clause\n  // if..else statement  if (condition) { code to run if condition is true } else { code to run if the above condition is NOT true } // run some other code  Example const yearOfBirth = 2001 if (yearOfBirth \u0026lt;= 2002) { console.log(\u0026#39;you will be old enough to vote in 2020\u0026#39;) } else { console.log(\u0026#39;Sorry, you will not be old enough to vote next year\u0026#39;) }  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-manipulation/inserting-removing-content/",
	"title": "Inserting &amp; Removing Content",
	"tags": [],
	"description": "",
	"content": " Inserting \u0026amp; Removing Content  .append()   .prepend()   .before()   .after()   "
},
{
	"uri": "/06-dom-and-jquery/jquery-overview/jquery-syntax/",
	"title": "jQuery Syntax",
	"tags": [],
	"description": "",
	"content": " $() function  jQuery uses a built-in function called jQuery() to allow developers to programmatically select elements on a html page\n $() is shorthand for jQuery()\n This shorthand syntax is used almost exclusively (because results in less typing) and that is what we will be using throughout the course   // programmatically \u0026#34;select\u0026#34; all p tags on the page using jQuery() syntax  jQuery(\u0026#39;p\u0026#39;)  is the same as:\n// programmatically \u0026#34;select\u0026#34; all p tags on the page using the $() shorthand syntax; most widely used approach  $(\u0026#39;p\u0026#39;)  Example\nWe will be using the shorthand syntax throughout this course:\n// Use jQuery to \u0026#34;select\u0026#34; an element with an id of main and listen for a click event  $(\u0026#34;#main\u0026#34;).click(doSomething)  "
},
{
	"uri": "/03-control-flow-and-loops/loops-and-iteration/",
	"title": "Loops &amp; Iteration",
	"tags": [],
	"description": "",
	"content": " Loops \u0026amp; Iteration  Loops offer a quick and easy way to do something repeatedly\n Loops must terminate or they will run forever; these are referred to as \u0026ldquo;infinite loops\u0026rdquo;\n Some loops use conditions to determine when it should start and stop\n There are many different kinds of loops, but they all essentially do the same thing: they repeat an action some number of times (and it\u0026rsquo;s actually possible that number could be zero)\n while loops\n do..while loops\n for loops\n forEach loops\n   "
},
{
	"uri": "/01-command-line-js-and-git/git-vocabulary/master-branch/",
	"title": "Master Branch",
	"tags": [],
	"description": "",
	"content": " Master Branch  The default branch found in every Git respository\n For most companies, the master branch reflects that latest version of production code (i.e. working code available to customers)\n  "
},
{
	"uri": "/13-object-oriented-js/classes/methods/",
	"title": "Methods",
	"tags": [],
	"description": "",
	"content": "  Overview   Getters \u0026amp; Setters   General Methods   Static Methods   "
},
{
	"uri": "/02-javascript-basics/variables/naming-rules/",
	"title": "Naming Rules for Variables",
	"tags": [],
	"description": "",
	"content": " Naming Rules for Variables    Do Don\u0026rsquo;t     Use variable names that start with a letter, $, or _ Use variable names that start with a number   Use variable names that include letters, numbers, $ or _ Create variable names that include a \u0026ldquo;-\u0026rdquo;, \u0026ldquo;.\u0026rdquo; or space   Use \u0026ldquo;lower camel case\u0026rdquo; when creating variable names made up of more than one word, for example: firstName Create variable names that use reserved JavaScript keywords such as let, var, function or switch    Variables names should describe the kind of information the variable stores\n Here\u0026rsquo;s a list of JavaScript\u0026rsquo;s reserved keywords\n "
},
{
	"uri": "/02-javascript-basics/data-types/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": " Objects  Objects are used to represent real world objects in programming\n Within an object, variables are known as properties and functions are known as methods\n Curly braces are a means of identifying if a variable is an object\n  // create an object that represents a dog  const myDog = { name: \u0026#34;Fido\u0026#34;, age: 4, speak: function() { console.log(\u0026#39;Woof woof\u0026#39;) } }   In the example above, we created an object and stored it in a variable called myDog\n This object has two (2) properties (name and age) and 1 method (speak)\n  Accessing Properties and Methods of Objects  Properties and values can be assigned and read using Dot notation  const myDog = { name: \u0026#34;Fido\u0026#34;, age: 4, speak: function() { console.log(\u0026#39;Woof woof\u0026#39;) } } // store myDog\u0026#39;s name in a variable called dogName const dogName = myDog.name // call the speak method of myDog myDog.speak()  JS Bin on jsbin.com Updating Object properties using dot notation  Object properties can be updated, added or deleted  JS Bin on jsbin.com\nThink of methods as actions that our objects can take. Objects are another flexible and powerful feature of JavaScript. Click here for more information about Objects\n "
},
{
	"uri": "/class-resources/opening-atom-from-command-line/",
	"title": "Opening Atom from Command Line",
	"tags": [],
	"description": "",
	"content": " Atom allows you to open files from the command line\nIf you have Atom installed you can run the atom command with one or more file paths to open up those files in Atom.\nCheck if Atom is already configured to run on your computer\u0026rsquo;s Command Line Open up your terminal and run the following command\n$ atom --help  You should receive output similar to the following\nAtom Editor v1.39.1 Usage: atom atom [options] [path ...] atom file[:line[:column]] One or more paths to files or folders may be specified. If there is an existing Atom window that contains all of the given folders, the paths will be opened in that window. Otherwise, they will be opened in a new window.  If Atom is not configured to run from your computer\u0026rsquo;s Command Line Open Atom and choose the following from the menu bar Atom -\u0026gt; Install Shell Commands\n"
},
{
	"uri": "/16-intro-to-express/express/route-parameters/",
	"title": "Route Parameters",
	"tags": [],
	"description": "",
	"content": " Route Parameters  Route parameters are named URL segments that are used to capture the values specified at their position in the URL\n The captured values are populated in the req.params object, with the name of the route parameter specified in the path as their respective keys\n Route parameters are similar to function parameters\n Given the following route handler:\napp.get('/users/:userId/books/:bookId', function (req, res) { res.send(req.params) })   If the client makes a request to the following url: GET http://localhost:3000/users/34/books/8989\n Then inside our route handle req.params will contain the following object: { \u0026quot;userId\u0026quot;: \u0026quot;34\u0026quot;, \u0026quot;bookId\u0026quot;: \u0026quot;8989\u0026quot; }\n   "
},
{
	"uri": "/10-asynchronous-js-and-promises/simulating-async-operations/",
	"title": "Simulating Async Operations",
	"tags": [],
	"description": "",
	"content": " setTimeout()  .setTimeout() function, available both in Node.js and in browsers, waits a given number of milliseconds (1 sec = 1000 ms) and then calls a function\n .setTimeout() takes two parameters:\n A callback function (remember callbacks are just functions passed in as parameters)\n The number of seconds after which the method will be called\n  .setTimeout() is async by default; this is the primary reason it\u0026rsquo;s often used to simulate asynchronous operations\n  Example const delayedGreeting = () =\u0026gt; { console.log(\u0026#39;Hi, sorry for the wait!\u0026#39;) } /* call setTimout(), it accepts 2 parameters 1. callback (function to be executed) 2. delay in milliseconds (1000 ms = 1 sec) */ console.log(\u0026#39;calling .setTimeout()\u0026#39;) setTimeout(delayedGreeting, 3000) console.log(\u0026#39;end of the code\u0026#39;)  In the code above, .setTimeout() is used to delay the execution of the .delayedGreeting() function by 3 seconds.\n Run the example in the jsbin below and notice how the message: end of the code is executed before the Hi, sorry for the wait!.  JS Bin on jsbin.com\n This means that our program did not wait for .delayedGreeting() to finishing running before it executed  Event Loop  Asynchronous JavaScript uses something called the event-loop\n In the example above, After 3 seconds, .delayedGreeting() is added to a line of code (Event Queue) waiting to be run\n Before it can run, any synchronous code from the program will run first (from the Call Stack)\n Next, any code in front of it in the line will run\n This means it might be more than two seconds before delayedHello() is actually executed\n  "
},
{
	"uri": "/13-object-oriented-js/classes/methods/static-methods/",
	"title": "Static Methods",
	"tags": [],
	"description": "",
	"content": " Static Methods  Static method calls are made directly on the class and are not callable on instances of the class\n Static methods are prepended with the static keyword\n  class Car { constructor(make, model, price) { this._make = make this._model = model this._price = price } // instance methods  get price() { return this._price } drive() { console.log(\u0026#39;calling \u0026#34;this\u0026#34; in an instance method\u0026#39;, this) console.log(`driving ${this._make}${this._model}`) } // static method  static mostExpensiveCar(cars) { console.log(\u0026#39;calling \u0026#34;this\u0026#34; in a static method\u0026#39;, this) return cars.sort((a, b) =\u0026gt; b.price - a.price)[0] } } // Create 3 instances of the Car class  const car1 = new Car(\u0026#34;honda\u0026#34;, \u0026#34;accord\u0026#34;, 20000) const car2 = new Car(\u0026#34;aston martin\u0026#34;, \u0026#34;db7\u0026#34;, 110000) const car3 = new Car(\u0026#34;bmw\u0026#34;, \u0026#34;5 series\u0026#34;, 50000) // call static method mostExpensiveCar() on the Class (Car)  // not the instance  const priceyCar = Car.mostExpensiveCar([car1, car2, car3]) console.log(priceyCar)  JS Bin on jsbin.com\n"
},
{
	"uri": "/17-deploying-your-app/code-along-hosting-with-heroku/step-4-deploy-to-heroku/",
	"title": "Step 4: Deploy to Heroku",
	"tags": [],
	"description": "",
	"content": " Step 4: Deploy to Heroku Now it\u0026rsquo;s time to deploy our application to production (i.e. Heroku\u0026rsquo;s cloud servers)\na. Create a \u0026ldquo;Heroku app\u0026rdquo;  In your terminal (from within your project folder) run the following command to create a Heroku app\n$ heroku create  This will result in output that looks like the following:\n   heroku create did the following:\n Added a new remote repository for your project that points to Heroku\u0026rsquo;s servers (we\u0026rsquo;ll soon see that Heroku uses to the git toolchain, similar to Github, for deployment)\n Provides you with an url on their servers, this is the url where your application will live when it is deployed\n   \nb. Make Heroku aware of your application\u0026rsquo;s environment variables When your application is deployed to Heroku, it will live on their servers. In order for Heroku to recognize process.env.GIPHY_API_KEY line in app.js, we will need to let Heroku know what GIPHY_API_KEY represents\nThe Heroku CLI makes it easy to add \u0026ldquo;production\u0026rdquo; environment variables for your app to reference while on running on Heroku\u0026rsquo;s servers\n Run following command (from within your project folder) to add \u0026ldquo;production\u0026rdquo; environment variables that your app will reference when it\u0026rsquo;s deployed to Heroku (see docs)\n$ heroku config:set GIPHY_API_KEY=add_your_api_key_here  If you ever need to confirm or review your environment variables set on Heroku (for your app) you can run the following command:\n$ heroku config   \nc. Stage and Commit any recent changes to codebase  Stage and Commit any uncommitted changes\n$ git add . \u0026amp;\u0026amp; git commit -m \u0026quot;add your commit message here\u0026quot;   You\u0026rsquo;ll need to do this step before every deploy to ensure any recent changes to your app\u0026rsquo;s codebase are sent to Heroku; remember Heroku uses to the git toolchain (similar to Github) for deployment\n \nd. Deploy app to Heroku Now it\u0026rsquo;s time to push our code to Heroku\n Run the following command (from within the project folder) to deploy your application to Heroku\n$ git push heroku master    Run the following command to open your application\u0026rsquo;s heroku url in your computer\u0026rsquo;s browser\n$ heroku open   Alternatively, you can open a browser and navigate to the Heroku url the old fashioned way\n\nCongrats! You\u0026rsquo;ve successfully deployed your application to Heroku!\n\nTroubleshooting If you are encountering errors, try to following:\n Ensure that you have staged and committed your latest changes, Heroku uses the git toolchain to deploy your application; it will only deploy code that has been committed\n View the heroku logs to help determine the root cause of the error\n In another terminal, window (within the project folder) run the following command to view the heroku logs for your app\n$ heroku logs --tail    "
},
{
	"uri": "/12-project-build-a-slackbot/tutorial/step-4-run-ngrok/",
	"title": "Step 4: Run ngrok",
	"tags": [],
	"description": "",
	"content": " Run ngrok  Next we need to give our local server access to the internet so our slack app can communicate with it\n ngrok is a tool that allows developers to create \u0026ldquo;tunnels\u0026rdquo; that connect the server running locally (i.e. on your computer) to the internet\n  1. Run ngrok command from within project folder  In a new command line tab run the following command (make sure you run this within the project folder)\n$ ngrok http 3000  Here, we are are telling ngrok to create a local tunnel that connects our server running on port 3000 (i.e. http://localhost:3000) and to ngrok url that is accessible to the internet\n You ngrok command should display output that looks similar to the following (the urls will be unique to your server and will not match the output below):\n  2. Confirm your local server is accessible via the internet At this point in the project, you will want to have multiple tabs open in your command line application. In order for the Slack to be able to communicate with our server both our local server and ngrok must be running in their own separate tabs.\n  Copy the ngrok \u0026ldquo;forwarding\u0026rdquo; url (from our ngrok tab) that begins with https and paste it into the address bar of a new browser tab\n Confirm that the welcome message is successfully displayed when using the ngrok url to access your server\n  "
},
{
	"uri": "/17-deploying-your-app/surge/",
	"title": "Surge",
	"tags": [],
	"description": "",
	"content": " What is Surge?  An alternative to Github pages\n Best used for Static websites\n Simple to deploy\n  "
},
{
	"uri": "/12-project-build-a-slackbot/tutorial/",
	"title": "Tutorial",
	"tags": [],
	"description": "",
	"content": "  Step 1: Create New Slack Workspace   Step 2: Create New Slack App   Step 3: Set Up Node Application   Step 4: Run ngrok   Step 5: Create a test Slash command   Step 6: Install App to Workspace   Step 7: Responding to Slash Commands   Step 8: Test your Slash Command   Step 9: Access Slash Command Parameters   Step 10: Make API Request to OpenWeather   Step 11: Respond to Slack with Current Weather   Step 12: Use Environment Variables to Protect Secure Credentials   Step 13: Handle Errors Gracefully   Step 14: Enhance Weather Response with Emojis   "
},
{
	"uri": "/class-resources/node-git-installation/windows/",
	"title": "Windows Installation Instructions",
	"tags": [],
	"description": "",
	"content": " Windows Installation Instructions 1) Open the Command Prompt application  All of the following commands (below) that start with $ should be copied and pasted in your terminal / command prompt (also referred to as the \u0026ldquo;command line\u0026rdquo;)\n DO NOT include the \u0026lsquo;$\u0026rsquo; when copying and pasting the commands below; \u0026lsquo;$\u0026rsquo; is a universal symbol for the terminal / command line\n Press the enter / return key on your keyboard after pasting the command\n  2) Install Git  Git is used to track the state of your code over time. GitHub has built its platform on Git technology. We will be using both Git and GitHub in this class to distribute code, submit assignments, and offer feedback.\n Git can be downloaded and installed from this URL.\n  3) Configure Git  In order to interact with Git, you\u0026rsquo;ll need to first open the Git Bash utility. A quick way to access this terminal is by right clicking your desktop and choosing \u0026ldquo;Git Bash\u0026rdquo;.\n Copy and paste the following two commands (separately) into your Terminal / Command Prompt. Replace the name and email address values with your own\n$ git config --global user.name \u0026quot;Steve Jobs\u0026quot; $ git config --global user.email \u0026quot;steve@apple.com\u0026quot;  Follow these instructions to create a new SSH Key (a special, very secure, key which allows your laptop access to your github account without having to remember your github password)\n Add your new SSH Key to GitHub following these instructions\n Verify your key works by running the following:\n$ ssh git@github.com  You should see output similar to:\nHi \u0026lt;you\u0026gt;! You've successfully authenticated, but GitHub does not provide shell access. Connection to github.com closed.   4) Install Node  Refer to the package installer on Node’s website  "
},
{
	"uri": "/class-resources/atom-themes/",
	"title": "Working with Atom Themes",
	"tags": [],
	"description": "",
	"content": " Changing Themes Atom allows you to easily switch between your installed themes by doing the following:\n Opening Atom Settings (mac: cmd + , | pc: ctrl + ,) Select Themes in the left-hand menu Select the dropdown menu labeled Syntax Themes Choose one of the installed themes listed in the dropdown menu  Atom comes pre-installed with a set of themes. See that section below to add new themes to Atom\n Installing New Themes Atom allows you to install themes created by developers who participate in Atom\u0026rsquo;s vibrant community. Atom has a dedication section on their official site for the discovery of these themes (Atom Themes)\nHere are steps involved in adding a new Atom theme:\n Visit https://atom.io/themes Find a theme that you\u0026rsquo;d like to install Press the install button on the theme\u0026rsquo;s page An alert will be displayed asking you if you would like to open Atom - select the option labeled Open Atom While in Atom Settings, press the button labeled Install to install the new theme Select Themes in the left-hand menu of Atom Settings Select the dropdown menu labeled Syntax Themes Select the newly installed theme from the dropdown menu to apply the new theme to Atom  Here\u0026rsquo;s an example of the installation of an Atom theme named Atom Material\n"
},
{
	"uri": "/01-command-line-js-and-git/github/",
	"title": "Github",
	"tags": [],
	"description": "",
	"content": " What is Github?  Web-based Git repository hosting service\n Built on top of git\n Serves as the remote repository for a developer\u0026rsquo;s git projects\n Home to +90% of all open source projects\n Has become a \u0026ldquo;social network\u0026rdquo; for developers share, discuss and collaborate on software projects\n Many companies also use GitHub internally to privately collaborate on software projects with the other software engineers within their organization\n  "
},
{
	"uri": "/02-javascript-basics/arithmetic-operators/",
	"title": "Arithmetic Operators",
	"tags": [],
	"description": "",
	"content": " Arithmetic Operators  Mathematical symbol that can act on two values (or variables) and produce a result\n JavaScript adheres to the PEDMAS approach when determining the order of operations\n     Description Operator Example     Addition + 7 + 8   Subtraction - 34 - 12   Multiplication * 3 * 5   Division / 42 / 6   Modulus (Remainder) % 13 % 6 (returns 1, as 6 goes into 13 twice, leaving 1 as the remainder )   Exponential ** 4 ** 2 (returns 16 or 4 * 4)   Increment ++ 9++ (returns 10)   Decrement -- 37-- (returns 36)    Examples JS Bin on jsbin.com\nExercise Add the following expressions in the jsbin below and evaluate the result; use console.log() to print the result. Don\u0026rsquo;t forget to press \u0026ldquo;run\u0026rdquo; after adding your code.\n 45 % 3\n 8 / 2 * (2 * 2)\n 8**3\n  JS Bin on jsbin.com\n"
},
{
	"uri": "/05-arrays-objects/",
	"title": "Arrays &amp; Objects",
	"tags": [],
	"description": "",
	"content": " Lesson 05 Arrays \u0026amp; Objects "
},
{
	"uri": "/10-asynchronous-js-and-promises/challenges-of-async-programming/",
	"title": "Challenges of Async Programming",
	"tags": [],
	"description": "",
	"content": " Challenges of Asynchronous Programming  Asynchronous programming presents a challenge when we want make multiple asynchronous requests and we want to control the order of the responses  Example Let\u0026rsquo;s see an example of this below:\n/* Modify printLetter() to make it an async function by using .setTimeout After the changes, the letter will be print at a random interval from 0 seconds to 3 seconds */ function printLetter(letter) { setTimeout(() =\u0026gt; { console.log(letter) }, Math.floor(Math.random() * 3000)) } function printAll(){ printLetter(\u0026#34;A\u0026#34;) printLetter(\u0026#34;B\u0026#34;) printLetter(\u0026#34;C\u0026#34;) } console.log(\u0026#39;Calling printAll function\u0026#39;) printAll() console.log(\u0026#39;End of code\u0026#39;)   In the code example above we have turned .printLetter() into an asynchronous function through the use of .setTimeout to randomly delay each function call from anywhere between 0 seconds and 3 seconds\n Run the jsbin below (multiple times) and notice how the order of the printed letters is no longer predictable and that A, B, and C print in a different and random order each time you call printAll\n  JS Bin on jsbin.com\n One way to fix this issue is to use callbacks  "
},
{
	"uri": "/17-deploying-your-app/code-along-hosting-with-surge/",
	"title": "Code Along: Hosting with Surge",
	"tags": [],
	"description": "",
	"content": " Code Along: Hosting with Surge  Together we\u0026rsquo;ll walk through the process of hosting a static website / application (that does not have a backend server like Express) using Surge  Instructions 1. Install the surge package on your computer  Run the following from your command line (from any folder location) to install surge globally on your computer\n$ npm install --global surge   \n2. Run surge from the Traffic Light project folder  On the command line, navigate to the project folder of the Traffic Light app (the one we used in the Github Pages code along)\n Then, run the following command from within the project folder:\n$ surge  Press \u0026ldquo;enter\u0026rdquo; twice to confirm the project path and the surge domain url\n  3. Open surge-provided url in browser and confirm successful deploy  Open your browser and navigate to the surge-provided domain url assigned to your project\n Confirm that a fully functional Traffic Light app is available at the surge-provided domain url\n  "
},
{
	"uri": "/final-projects/milestones-due-dates/create-submit-wireframes/",
	"title": "Create &amp; Submit Wireframes",
	"tags": [],
	"description": "",
	"content": " Milestone IV: Create and Submit Wireframes  Due Date: Monday, October 14th\n Create wireframes for each page layout (assuming you have multiple pages with different layouts) of your final project\n Instructions\n  The following assumes you have already created a github repository for your final project and cloned the project down to your \u0026lsquo;github\u0026rsquo; folder on your laptop (see Milestone II)\n  Add a new folder to your project files/folders for final project (created in Milestone II) called wireframes\n Add the digital version of your wireframe files to the newly created wireframes folder\n In Github Desktop: Commit your updates that includes the newly added wireframe files\n In Github Desktop: Push your commit to the remote repository for final project on Github.com so your changes can be reflected on Github.com\n Navigate to the repository on Github.com, open the wireframe folder (on Github.com) and copy the url (this url leads directly to your wireframes)\n Deliverable: Submit the url that leads directly to your wireframe files using this form\n  Here\u0026rsquo;s an example of what link should look like: https://github.com/kareemgrant/kg-awesome-game/tree/master/wireframes\n"
},
{
	"uri": "/01-command-line-js-and-git/git-vocabulary/",
	"title": "Git Vocabulary",
	"tags": [],
	"description": "",
	"content": " Git Vocabulary  Repository   Commit   Branch   Master Branch   Merge   Push   Pull   Fork   Clone   Pull Request   "
},
{
	"uri": "/13-object-oriented-js/inheritance/",
	"title": "Inheritance",
	"tags": [],
	"description": "",
	"content": "  Overview   Super \u0026amp; Extends   "
},
{
	"uri": "/06-dom-and-jquery/jquery-overview/jquery-selectors/",
	"title": "jQuery Selectors",
	"tags": [],
	"description": "",
	"content": " Selecting Elements  A most common usage pattern for jQuery is to:\n Programmatically select (or grab) an element, then\n Add an event listener to it or manipulate (change) it in some way\n  jQuery allows us to use css selectors to select elements:\n// We can use css selectors to programmatically select elements $('p') // Type (Tag) selector $('.feature') // Class selector $('#checkout') // ID selector $('li strong') // Descendant selector $('em, i') // Multiple selector $('a[target=\u0026quot;_blank\u0026quot;]') // Attribute selector $('p:nth-child(2)') // Pseudo-class selector  ID, Class, Type and Descendant selectors are the selectors we\u0026rsquo;ll be using the most during this course\n  A complete list of CSS Selectors can be found here\n  Dynamically changing your page using JavaScript is commonly referred to as manipulating the DOM  Example #1\nJS Bin on jsbin.com\nIn the example above jQuery is used to listen for a .click() event on the #button element and then execute the callback function when that element is clicked\nInside the callback function, $(\u0026quot;p\u0026quot;) selects the p element and uses the .toggleClass() method to dynamically toggle the class of .red-background\nExample #2\nJS Bin on jsbin.com\nIn the example above jQuery is used to listen for a .click() event on the #mark-complete element and then call the callback function when the element is clicked\nInside the callback function, $(\u0026quot;p.last-of-type\u0026quot;) selects the last p element and uses the .addClass() method to dynamically add a class to the element\n"
},
{
	"uri": "/01-command-line-js-and-git/git-vocabulary/merge/",
	"title": "Merge",
	"tags": [],
	"description": "",
	"content": " Merge  Merging takes the changes from one branch (in the same repository or from a fork), and applies them into another\n This often happens as a Pull Request (which can be thought of as a request for comments and a request to merge into the another branch * usually the master branch)\n  "
},
{
	"uri": "/10-asynchronous-js-and-promises/promises/passing-values-with-promises/",
	"title": "Passing values with Promises",
	"tags": [],
	"description": "",
	"content": " Passing values with Promises  A common use case when working with asynchronous code is to take the data received from one asynchronous call (output) and use that data as input for another function or action in your program\n Promises allow developers to easily pass data (or values) between functions\n  Example function getSuperheroes() { return new Promise(resolve =\u0026gt; { setTimeout(() =\u0026gt; { // send an array of heroes when  // promise is resolved  resolve([ { name: \u0026#34;Captain Marvel\u0026#34;, team: \u0026#34;Avengers\u0026#34; }, { name: \u0026#34;Batman\u0026#34;, team: \u0026#34;Justice League\u0026#34;}, { name: \u0026#34;Jean Grey\u0026#34;, team: \u0026#34;X-Men\u0026#34;}, { name: \u0026#34;Domino\u0026#34;, team: \u0026#34;X-Force\u0026#34;} ]) }, 3000) }); } function printHeroes(heroes) { heroes.forEach((hero) =\u0026gt; { console.log(`name: ${hero.name}, team: ${hero.team}`) }) } /* Declare function with \u0026#34;async\u0026#34; keyword */ function fetchHeroes() { /* make asynchronous call to .getSuperheroes() and use .then() to pass the result from .getSuperheroes (\u0026#34;fetchedHeroes\u0026#34;) so it can be used as a parameter for .printHeroes() */ getSuperheroes() .then((fetchedHeroes) =\u0026gt; { printHeroes(fetchedHeroes) }) } console.log(\u0026#34;Calling fetchHeroes()\u0026#34;) fetchHeroes() console.log(\u0026#34;end of the code\u0026#34;)  JS Bin on jsbin.com\n In the code above, we have two functions .getSuperheroes() which is responsible for asynchronously fetching a list of superheroes and .printHeroes which is responsible for printing the heroes to the console\n .printHeroes depends on the data from the (asynchronous) .getSuperheroes() function\n In addition to helping us control the sequence of asynchronous functions, .then() also allows us to \u0026ldquo;pass\u0026rdquo; values to other function in the \u0026ldquo;promise chain\u0026rdquo;\n .getSuperheroes returns an array of objects, we use .then() to pass that array of objects as a parameter (fetchedHeroes) to the next function in the promise chain: printHeroes()\n  "
},
{
	"uri": "/04-functions-and-scope/returning-values-from-functions/",
	"title": "Returning Values from Functions",
	"tags": [],
	"description": "",
	"content": "  Many times you will write a function and expect a value to be returned - this is called a return value\n To have your function return a value you must use the return keyword in the last line of the body of your function\n We use the return keyword when we want our function to \u0026ldquo;give us back\u0026rdquo; a value\n You can store the returned value in a variable and use it later in your program\n  Example // declare a function called bark // that *returns* a string respreseting \u0026#39;woof woof\u0026#39; function bark() { return \u0026#39;woof woof!\u0026#39; } // call the bark function and store result in a variable const sound = bark() // print out result to the console console.log(`a dog makes the following sound ${sound}`)  JS Bin on jsbin.com\n If you don\u0026rsquo;t use the return keyword, then no value will be returned  // declare a function called meow // that generates a string representing \u0026#39;meow\u0026#39; but // does not use the return keyword  function meow() { \u0026#39;meow\u0026#39; } // call the meow function and store result in a variable const sound = meow() // print out result to the console console.log(`a cat makes the following sound ${sound}`)  JS Bin on jsbin.com\nExercise  Create a function called sayMoo that returns the string mooooooo!. Next, call the function and store the result into a variable named cowSound  JS Bin on jsbin.com\n"
},
{
	"uri": "/class-resources/atom-show-git-ignored-files/",
	"title": "Show Git-Ignored Files in Atom",
	"tags": [],
	"description": "",
	"content": " Show Git-Ignored Files in Atom Atom, by default, will not show files in its file pane (file tree view) if those files have been added to .gitignore.\nAn easy approach to fixing this issue is to do the following:\n Click anywhere in the Tree View (left hand pane with files and folders) Press i (this will toggle the visibility of hidden files)  "
},
{
	"uri": "/12-project-build-a-slackbot/tutorial/step-5-create-a-test-slash-command/",
	"title": "Step 5: Create a test Slash command",
	"tags": [],
	"description": "",
	"content": " Step 5: Create a test Slash command 1. Go to your Slack developer page  Go to https://api.slack.com/apps and select your OpenWeatherBot app  2. Create a new slash command for OpenWeatherBot  Click on Slack Commands in the left side panel and then press the button labeled Create New Command\n Next fill out the form with the following information and press the \u0026ldquo;Save\u0026rdquo; button:\n Command: test Request URL: [YOUR NGROK HTTPS URL]/test Short Description: Test command Usage Hint: [name]   We are creating a slash command called test, when initiated in Slack, this command will make a POST request to our server using the ngrok https url for our app (remember the ngrok url is unique to your server)   "
},
{
	"uri": "/02-javascript-basics/variables/var-keyword/",
	"title": "var keyword",
	"tags": [],
	"description": "",
	"content": " var  In recent past var was the only way to declare variables\n While var worked it presented some annoying issues (related to scope) for developers\n let and const were introduced in the latest release of JavaScript, ES6 to address these issues\n While var is still in use for legacy codebases, it is a recommended best practice to use let or const(we\u0026rsquo;ll discuss const shortly) instead of var going forward\n  // declaring a variable using var var name = \u0026#34;Jen\u0026#34; // declaring a variable using const (or let) (best practice) const name = \u0026#34;Jen\u0026#34;  Click here for more information on the differences between let and var\n "
},
{
	"uri": "/01-command-line-js-and-git/git-basics/",
	"title": "Git Basics",
	"tags": [],
	"description": "",
	"content": " Git Basics  Before we can understand how git saves files, we need to cover some concepts about how git works  Three States of a Git file  Git has three main states that your files can reside in: committed, modified, and staged\n committed: files that have been saved / recorded to the repository\u0026rsquo;s history\n staged: files that have been modified\n modified: files that has been modified but have not yet been staged and committed to project\u0026rsquo;s history\n   Git Projects have three main sections  Git projects are broken up into three main sections:   Working Directory - where all the recent “unstaged” changes (since your last commit) reside\n modified files reside in the Working Directory  Staging Area where all your staged changes live ; stores information about what will go into your next commit (i.e. changes to be committed)\n staged files reside in the staging area  Git directory (repository) where all the changes throughout history of a git project are permanently stored; changes are recorded to the Git directory through the use of commits\n committed files reside in the git directory / repository   Typical Git Workflow  The basic Git workflow goes something like this:\n You modify files in your working directory\n You stage the files, adding snapshots of them to your staging area\n You do a commit, which takes the files as they are in the staging area and stores that snapshot permanently to your Git directory\n   "
},
{
	"uri": "/06-dom-and-jquery/jquery-overview/jquery-objects/",
	"title": "jQuery Objects",
	"tags": [],
	"description": "",
	"content": " jQuery Objects  Whenever we use $() or jQuery() to target an element, a jQuery object is created\n For example $('p') creates a jQuery object that targets all \u0026lt;p\u0026gt; elements on a page  jQuery objects can be stored in variables in the same way we are already familiar with\n It is a best practice to prepend a $ to the name of any variable that holds a jQuery Object:   // store jQuery object into a variable named \u0026#34;$mainMenu\u0026#34;  $mainMenu = $(\u0026#39;#main-menu\u0026#39;) // call a jQuery methods `.hide()` on jQuery object to hide the targeted element  $mainMenu.hide()  "
},
{
	"uri": "/06-dom-and-jquery/jquery-manipulation/inserting-removing-content/before/",
	"title": ".before()",
	"tags": [],
	"description": "",
	"content": " .before() Method  Method is used to insert content before the selected elements  Example $(() =\u0026gt; { $(\u0026#39;#addHeader\u0026#39;).click(() =\u0026gt; { // Add header \u0026#34;before\u0026#34; .numbers div  const header = \u0026#34;\u0026lt;h2\u0026gt;Numbers\u0026lt;/h2\u0026gt;\u0026#34; $(\u0026#39;.numbers\u0026#39;).before(header) }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/05-arrays-objects/array-iterators/find/",
	"title": ".find()",
	"tags": [],
	"description": "",
	"content": " .find()  Returns the value of the first element in the array that satisfies the provided testing function\n undefined is returned if no element satisfies testing function\n The callback function for .find() accepts the following parameters:\n element: (required) current element being processed in the array.\n index: (optional) index of the current element being processed in the array\n array: (optional) the array map was called upon\n  .find() only returns a single value and does not return an array\n  Syntax Using traditional (ES5) function syntax\nconst result = arr.find(function(item, index, array) { // if true is returned, item is returned and iteration is stopped  // for falsy scenario returns undefined })  Using arrow syntax (ES6)\nconst result = arr.find((item, index, array) =\u0026gt; { // if true is returned, item is returned and iteration is stopped  // for falsy scenario returns undefined })  Example const numbers = [5, 3, 13, 4, 11 ] const greaterThan5 = numbers.find( number =\u0026gt; number \u0026gt; 5 ) console.log(greaterThan5) // 13  JS Bin on jsbin.com\nExercise  Use .find() to return the first word that has more than 6 characters in the words array. Save the returned values to a variable declared with const called longWord  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-events/mouse-events/hover/",
	"title": ".hover() Event",
	"tags": [],
	"description": "",
	"content": " .hover() Event  Attaches an event handler function to an element that is triggered when users hover over the element with their mouse\n with .hover() you can specify two handlers functions to the matched elements, where the first handler is executed when the mouse pointer enters initially hovers over the element and the 2nd handler is executed when the most is no longer hovered over the targeted elements\n  Example $(() =\u0026gt; { // listen for .hover() event on .box  $(\u0026#39;.box\u0026#39;).hover( (event) =\u0026gt; { // 1st handler function  // add .red class on hover  $(event.currentTarget).addClass(\u0026#39;red\u0026#39;) }, (event) =\u0026gt; { // 2nd handler function  // remove .red class when hover is exited  $(event.currentTarget).removeClass(\u0026#39;red\u0026#39;) }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-manipulation/css-style-manipulation/remove-class/",
	"title": ".removeClass()",
	"tags": [],
	"description": "",
	"content": " .removeClass() Method  Method removes one or more classes from selected elements  Example $(() =\u0026gt; { $(\u0026#34;#removeBorderClass\u0026#34;).click(() =\u0026gt; { // remove .strongBorder to box  $(\u0026#34;.box\u0026#34;).removeClass(\u0026#34;strongBorder\u0026#34;) }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/05-arrays-objects/array-review/adding-removing-items/shift/",
	"title": ".shift()",
	"tags": [],
	"description": "",
	"content": " .shift()  Removes the first element from an array and returns that removed element\n This method is a mutating method because it changes the original array\n  Example const fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Grapes\u0026#34;] fruits.shift() console.log(fruits) // Orange, Grapes  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-effects/slide-toggle/",
	"title": ".slideToggle()",
	"tags": [],
	"description": "",
	"content": " .slideToggle() Method  Method that toggles between the slideUp() and slideDown() methods  Example $(() =\u0026gt; { $(\u0026#34;button\u0026#34;).click(() =\u0026gt; { // slide toggle #box element  $(\u0026#34;#box\u0026#34;).slideToggle() }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-manipulation/getting-setting-content/val/",
	"title": ".val()",
	"tags": [],
	"description": "",
	"content": " .val() Method  Method is mainly used to get or set the current value of the HTML form elements such as \u0026lt;input\u0026gt;, \u0026lt;select\u0026gt; and \u0026lt;textarea\u0026gt;  Example of Getting (Reading) values from form elements  To Get (Read) text of an element use .val() with nothing inside the parentheses  $(() =\u0026gt; { $(\u0026#34;#getName\u0026#34;).click(() =\u0026gt; { // read value of text field  const name = $(\u0026#34;#name\u0026#34;).val() alert(name) }) $(\u0026#34;#getComment\u0026#34;).click(() =\u0026gt; { // read value of the text area  const comment = $(\u0026#34;#comment\u0026#34;).val() alert(comment) }) $(\u0026#34;#getCity\u0026#34;).click(() =\u0026gt; { // read value from select dropdown  const city = $(\u0026#34;#city\u0026#34;).val() alert(city) }) })  JS Bin on jsbin.com\nExample of Setting (writing) values to form elements  To Set (Write) text of an element use .val(newVal) with the new value inside the parentheses  $(() =\u0026gt; { $(\u0026#34;#setName\u0026#34;).click(() =\u0026gt; { // set value of text field  $(\u0026#34;#name\u0026#34;).val(\u0026#34;Jill Scott\u0026#34;) }) $(\u0026#34;#setComment\u0026#34;).click(() =\u0026gt; { // set value of the text area  $(\u0026#34;#comment\u0026#34;).val(\u0026#34;She\u0026#39;s awesome!\u0026#34;) }) $(\u0026#34;#setCity\u0026#34;).click(() =\u0026gt; { // set value of select dropdown  $(\u0026#34;#city\u0026#34;).val(\u0026#34;Philadelphia\u0026#34;) }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/00-course-intro-and-tools/class-logistics-materials/",
	"title": "Class Logistics &amp; Materials",
	"tags": [],
	"description": "",
	"content": " Class Logistics  Class Schedule: Mondays \u0026amp; Wednesdays, 8:00pm - 11:00pm, from Aug 26th through Nov 4th\n Break: 15 minute break during the middle of class from 9:15pm to 9:30pm (subject to change depending on flow of the class, but you\u0026rsquo;ll always get a 15 min break)\n Class Materials: Most lessons will include a set of files that you\u0026rsquo;ll work with during that lesson, we\u0026rsquo;ll refer to these files as the \u0026ldquo;lesson files\u0026rdquo;\n Homework: Homework assignments will be assigned at the end of class on Wednesdays and assignments will be due the following Wednesday\n Reading Assignment / Tutorials: Reading Assignments and Tutorials may be assigned after a class. They are usual short in nature and are meant to help increase your understanding of upcoming or past concepts. If assigned, you will be expected to complete them before the next class.\n Labs: Labs are in-class assignments completed at the end of class; they can be done completed individually or in groups.\n Code Alongs: Small projects or exercises that the instructor and the class complete together\n Exercises: Short in-class exercises that are completed by students (either individually or in teams)\n Office Hours: Weekly Office Hours - Schedule TBD\n Final Project: Pick something your passionate about; Single Page Application (SPA) that incorporates concepts covered throughout the class (more detail will be provided later in the course)\n  "
},
{
	"uri": "/01-command-line-js-and-git/code-along-basic-git-workflow/",
	"title": "Code Along: Basic Git Workflow",
	"tags": [],
	"description": "",
	"content": " Code Along: Basic Git Workflow  There\u0026rsquo;s a learning curve when working with Git\n The best way to learn how Git works is to see it in action\n Along the way, we\u0026rsquo;re going introduce important concepts and Git Commands\n This tutorial is meant to be interactive, so please follow along\n The tutorial will involve heavy use of the command line\n  Step 0: Navigate to your class folder on your command line  From your command line, navigate to your class folder (i.e. the folder named jsd)  This tutorial assumes that you already have Git installed. Git installation instructions can be found here\n Step 1: Set up your project directory  Navigate into the lesson_01_files directory (this assumes you are currently in your jsd directory)\n$ cd lesson_01_files  Create a new directory named git_intro\n$ mkdir git_intro  Navigate into the git_intro directory using the cd command\n$ cd git_intro  git_intro is where all the files for this project will reside\n  Step 2: Create git repository for our project  In order to use git to track all the changes within this project we need to create a repository  Repositories (or often, \u0026lsquo;repos\u0026rsquo;, for short) represent the entire collection of files and folders associated with a project, along with each file’s revision history\n  One way to create a repository is to use the git init command\n Let\u0026rsquo;s create a new git repository to track all the changes inside your git_intro project\n Initialize a new repository by running the following command:\n$ git init  Confirm that you received output in your terminal that looks similar to the following:\n Initialized empty Git repository in /jsd/lesson_01_files/git_intro/.git/  Congrats! Git is now set up to track all changes to this project\n  Step 3: Add a new file to the repository  Create a new file using the touch command\n$ touch homer_simpson_quote.txt  Next, open up your text editor and add the following content to homer_simpson_quote.txt and save the file\nTo start, press any key. Where’s the ANY key?  After creating the new file, you can use the git status command to see which files git knows exist\n$ git status  Your output should look similar to the following:\n On branch master No commits yet Untracked files: (use \u0026quot;git add \u0026lt;file\u0026gt;...\u0026quot; to include in what will be committed) homer_simpson_quote.txt nothing added to commit but untracked files present (use \u0026quot;git add\u0026quot; to track)   Git is telling us that they acknowledge that we\u0026rsquo;ve created a new file called homer_simpson_quote.txt but will not do anything with it until we use the git add command\n Our changes to homer_simpson_quote.txt are in the \u0026ldquo;Working Directory\u0026rdquo; and in order to eventually commit those changes to our repository\u0026rsquo;s history, we first need to stage our changes using git add\n   Step 4: Add a file to the staging environment  Let\u0026rsquo;s use the git add command to add our newly updated file to the staging area, after which run git status\n$ git add homer_simpson_quote.txt $ git status  git status should now result in the following output:\nOn branch master No commits yet Changes to be committed: (use \u0026quot;git rm --cached \u0026lt;file\u0026gt;...\u0026quot; to unstage) new file: homer_simpson_quote.txt  Git has added the file to the staging area (notice the \u0026ldquo;Changes to be committed\u0026rdquo; line)\n  Step 5: Create a commit  Let\u0026rsquo;s create our first commit\n Committing in git will move any updates that are currently in the \u0026ldquo;staging area\u0026rdquo; to our \u0026ldquo;git directory (repository)\u0026rdquo;\n We commit files using the git commit -m \u0026quot;[your short message goes here]\u0026quot; command\ngit commit -m \u0026quot;Add homer simpson quote\u0026quot;  The command should result in an output similar to the following:\n[master (root-commit) fdd3af7] add homer simpson quote 1 file changed, 1 insertion(+) create mode 100644 homer_simpson_quote.txt  Standard conventions for commit messages:\n Must be in quotation marks\n Written in the present tense\n Should be brief (50 characters or less) when using -m\n   Step 6: Edit an existing file  We\u0026rsquo;ve seen what its like to create a new file with git, now let\u0026rsquo;s see how everything works when we edit an existing file\n Open homer_simpson_quote.txt in your text editor and change the word \u0026ldquo;start\u0026rdquo; to \u0026ldquo;begin\u0026rdquo;; save the file\n Let\u0026rsquo;s take a look how git handles this scenario, first lets run git status\n Your output should look like the following:\nOn branch master Changes not staged for commit: (use \u0026quot;git add \u0026lt;file\u0026gt;...\u0026quot; to update what will be committed) (use \u0026quot;git checkout -- \u0026lt;file\u0026gt;...\u0026quot; to discard changes in working directory) modified: homer_simpson_quote.txt no changes added to commit (use \u0026quot;git add\u0026quot; and/or \u0026quot;git commit -a\u0026quot;)  Git was smart enough to recognize that our homer_simpson_quote.txt file changed, but what if we wanted to see detailed change at a \u0026lsquo;line-level\u0026rsquo;?\n Let\u0026rsquo;s run the git diff command to accomplish this\n$ git diff  Here\u0026rsquo;s the output:\ndiff --git a/homer_simpson_quote.txt b/homer_simpson_quote.txt index 46b008a..bd6f49a 100644 --- a/homer_simpson_quote.txt +++ b/homer_simpson_quote.txt @@ -1 +1 @@ -To start, press any key. Where’s the ANY key? +To begin, press any key. Where’s the ANY key? (END)   Press the q key to escape from the git diff output in your terminal\n  Notice that git diff gives us a granular view of the recent changes that have occurred on a line by line level  Step 7: Stage and Commit your recent changes  Let\u0026rsquo;s stage the file so the changes can be moved from the \u0026ldquo;working directory\u0026rdquo; to the \u0026ldquo;staging area\u0026rdquo;\n$ git add homer_simpson_quote.txt  Next, let\u0026rsquo;s commit the changes\n$ git commit -m \u0026quot;update homer simpson quote\u0026quot;   Step 8: View a log of your commits  Git makes it easy for you to see a summarized history of your commits using the git log command\n$ git log  Here\u0026rsquo;s what the output should look like:\nOn branch master nothing to commit, working tree clean commit 4842dd2b97adfbfd6daaa7cfeb575c7ed1d2f44b (HEAD -\u0026gt; master) Author: Kareem Grant \u0026lt;kareem@getuserwise.com\u0026gt; Date: Thu Aug 1 17:52:49 2019 -0400 update homer simpson quote commit fdd3af7e7064dea063b625306c75adf0d04794c0 Author: Kareem Grant \u0026lt;kareem@getuserwise.com\u0026gt; Date: Thu Aug 1 17:21:10 2019 -0400 add homer simpson quote   Press the q key to escape from the git log output in your terminal\n Student Exercise: Make additional updates  Now it\u0026rsquo;s your turn to try your hand at using git\n Use your knowledge of the command line \u0026amp; git command accomplish the following (all of the following should occur within the git_intro project):\n Create a new file called marge_simpson_quote.txt\n Add the following text to marge_simpson_quote.txt\nThe only thing I'm high on is love.  Add another file called bart_simpson_quote.txt\n Add the following text to bart_simpson_quote.txt\nEat my shorts!  Stage and commit both files; use the following commit message: \u0026ldquo;add marge and bart simpson quotes\u0026rdquo;\n Use one of the introduced git commands to visual confirm that you now have three commits\n Edit the bart_simpson_quote.txt file and change \u0026ldquo;shorts\u0026rdquo; to \u0026ldquo;sneakers\u0026rdquo;\n Stage and commit your changes; use the following commit message: \u0026ldquo;update bart simpson quote\u0026rdquo;\n   Step 9: Create a new repository on GitHub  Now let\u0026rsquo;s create a remote repository on GitHub so it can be synced in the cloud\n To create a new repo on GitHub, log in and go to the GitHub home page. You should see a + sign that will allow you to create a new repository:\n After clicking the button, GitHub will ask you to name your repo and provide a brief description\n Name the repository git_intro and provide a short description:\n When you\u0026rsquo;re done filling out the information, press the Create repository button to make your new repo\n GitHub will ask if you want to create a new repo from scratch or if you want to add a repo you have created locally. In this case, since we\u0026rsquo;ve already created a new repo locally, we want to push that onto GitHub so follow the \u0026hellip;.or push an existing repository from the command line\u0026rsquo; section\n Copy the first line (starting with git remote add\u0026hellip;) and paste it into the command line (please ensure you are still in your project folder)\n$ git remote add origin git@github.com:{your-git-username}/git_intro.git  The git remote add command creates link between the remote repository on Github and the local repository on your computer\n Now run git remote -v to confirm that the remote repository was added\n$ git remote -v  The output should look similar to the following:\norigin git@github.com:kareemgrant/git_intro.git (fetch) origin git@github.com:kareemgrant/git_intro.git (push)   origin is a default alias (i.e. nickname) used for remote repositories; developers can specify their own alias by providing additional option to the git remote add command (see docs)\n  Next we\u0026rsquo;ll use the git push command to push our changes to the remote repository on Github so the repositories will be in sync\n$ git push -u origin master  The output of the command should look similar to the following:\nEnumerating objects: 6, done. Counting objects: 100% (6/6), done. Delta compression using up to 8 threads Compressing objects: 100% (4/4), done. Writing objects: 100% (6/6), 568 bytes | 568.00 KiB/s, done. Total 6 (delta 0), reused 0 (delta 0) To github.com:kareemgrant/git_intro.git '* [new branch] master -\u0026gt; master Branch 'master' set up to track remote branch 'master' from 'origin'.  Login to your Github account and navigate to the remote repository https://{your_git_username}/git_intro\n A link between our remote and local repositories has been established\n It\u0026rsquo;s important to point out that keeping the remote and local repositories in sync does not happen automatically; it will be the responsibility of developer (using commands such as git push and others)\n  "
},
{
	"uri": "/07-dom-and-jquery-ii/code-along-color-scheme-switcher-jquery/",
	"title": "Code Along: Color Scheme Switcher",
	"tags": [],
	"description": "",
	"content": " Code Along: Color Scheme Switcher  The starter code for this code along is hosted on Github, see the url below:\n Code Along: Color Scheme Switcher  Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment\n  "
},
{
	"uri": "/02-javascript-basics/variables/const/",
	"title": "const",
	"tags": [],
	"description": "",
	"content": " const  Stands for constant\n The values of these variables can not be changed through reassignment (i.e. have it\u0026rsquo;s value changed using =)\n This help make your code easier to debug and protects certain values from accidentally being overridden in your codebase\n  Declaring a variable using const const are the same as let but with one key difference, values can only be assigned once to a const variable\n// declare a constant named \u0026#39;school\u0026#39;  const school = \u0026#34;General Assembly\u0026#34;  An error will occur if you try to update the value of a const\n// correctly declare a constant using \u0026#34;const\u0026#34; keyword const greeting = \u0026#34;Hello\u0026#34; // const values cannot be updated, if you attempt to do so // an error will occur  greeting = \u0026#34;Good Morning\u0026#34; // this will throw an error  Variables declared with const can still be mutated When dealing with arrays and objects you will find that you are still able to mutate their respective values because updating their values does not require reassignment\nHere\u0026rsquo;s an example of working with arrays declared with const:\n// declare an array using const const myNumbers = [1, 2, 3] /* add a new number to the array and no error will occur, because we did not \u0026#34;reassign\u0026#34; new values directly to the myNumbers variables using `=` */ myNnumbers.push(4) console.log(myNumbers) // [1, 2, 3, 4]  /* However, uncomment the line below and observe the error when we attempt to \u0026#34;reassign\u0026#34; myNumbers */ // myNumbers = [4, 5] // an error will occur  JS Bin on jsbin.com\nObjects declared with const can have their properties changes without any issues:\n// declare an object using const const myObject = {a: 1, b: 2, c: 3} /* add update an existing property and add a new property to myObject and no error will occur, because we did not \u0026#34;reassign\u0026#34; new values directly to the myObject variable using `=` */ myObject.c = 30 myObject.d = 4 console.log(myObject) // { a: 1, b: 2, c: 30, d: 4}  /* However, uncomment the line below and observe the error when we attempt to \u0026#34;reassign\u0026#34; values directly to myObject */ // myObject = {e: 5, g: 6} // an error will occur  JS Bin on jsbin.com\n"
},
{
	"uri": "/final-projects/milestones-due-dates/create-project-plan/",
	"title": "Create Project Plan",
	"tags": [],
	"description": "",
	"content": " Milestone V: Create Project Plan  Due Date: Wednesday, October 16th\n Work with the instructor team to break up your final project into a series of steps that you\u0026rsquo;ll turn into tasks\n  Details: TBD\nTrello is a free project management tool that uses the kanban approach to track tasks\n -- "
},
{
	"uri": "/06-dom-and-jquery/jquery-manipulation/css-style-manipulation/",
	"title": "CSS &amp; Style Manipulation",
	"tags": [],
	"description": "",
	"content": " CSS \u0026amp; Style Manipulation  .css()   .addClass()   .removeClass()   .toggleClass()   "
},
{
	"uri": "/06-dom-and-jquery/",
	"title": "DOM &amp; jQuery",
	"tags": [],
	"description": "",
	"content": " Lesson 06 Intro to DOM \u0026amp; jQuery "
},
{
	"uri": "/10-asynchronous-js-and-promises/promises/error-handling-with-catch/",
	"title": "Error Handling with .catch()",
	"tags": [],
	"description": "",
	"content": " Error Handling with .catch()  Promises chains are a great place to handle errors\n The .catch() method provides us with an easy way to catch any errors that occur in a Promise chain\n  Example const myPromise = () =\u0026gt; { return new Promise((resolve, reject) =\u0026gt; { // return 1 after the promise is resolved  setTimeout(() =\u0026gt; resolve(1), 2000) }) } myPromise().then((result) =\u0026gt; { console.log(result) return result + 1 }).then((result) =\u0026gt; { console.log(result) return result + 1 }).then((result) =\u0026gt; { throw new Error(\u0026#39;FAILED HERE\u0026#39;) // \u0026lt;- simulate an error in the promise chain  console.log(result) return result + 1 }).catch((e) =\u0026gt; { // catch error that occurs anywhere  // the promise chain  console.log(\u0026#39;an error occurred\u0026#39;) console.log(e) })  JS Bin on jsbin.com\nExample #2: Handling errors with our Superhero fetcher  Let\u0026rsquo;s use .catch() to any errors that occur with our Superhero fetcher program  function getSuperheroes() { return new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; { // comment out to simulate reject()  /* resolve([ { name: \u0026#34;Captain Marvel\u0026#34;, team: \u0026#34;Avengers\u0026#34; }, { name: \u0026#34;Batman\u0026#34;, team: \u0026#34;Justice League\u0026#34;}, { name: \u0026#34;Jean Grey\u0026#34;, team: \u0026#34;X-Men\u0026#34;}, { name: \u0026#34;Domino\u0026#34;, team: \u0026#34;X-Force\u0026#34;} ]) */ // reject promise  reject(\u0026#34;Oh no!!! An error occurred while fetching heroes.\u0026#34;) }, 3000) }); } function printHeroes(heroes) { heroes.forEach((hero) =\u0026gt; { console.log(`name: ${hero.name}, team: ${hero.team}`) }) } function fetchHeroes() { /* use .catch() to catch any errors that occur during our asynchronous operation */ getSuperheroes() .then((fetchedHeroes) =\u0026gt; { printHeroes(fetchedHeroes) }).catch((e) =\u0026gt; { console.log(e) }) } console.log(\u0026#34;Calling fetchHeroes()\u0026#34;) fetchHeroes() console.log(\u0026#34;end of the code\u0026#34;)  JS Bin on jsbin.com\n"
},
{
	"uri": "/03-control-flow-and-loops/loops-and-iteration/for-loop/",
	"title": "for Loop",
	"tags": [],
	"description": "",
	"content": " for Loop  The for loop consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement (usually a block statement) to be executed in the loop.\n The three expression help determine how many times the loop will iterate before it terminates\n The statements involve an iterator variable (usually depicted as an \u0026ldquo;i\u0026rdquo;)\n  for (statement 1; statement 2; statement 3) { // code block to be executed }   statement 1 is executed (one time) before the execution of the code block\n statement 2 defines the condition for executing the code block\n statement 3 is executed (every time) after the code block has been executed\n  Example for (let i = 0; i \u0026lt; 5; i++) { console.log(`${i}fish`) }  JS Bin on jsbin.com\nExercise Write a program that uses a for loop to print (using console.log()) a countdown from 10 to 1\nJS Bin on jsbin.com\n"
},
{
	"uri": "/10-asynchronous-js-and-promises/handling-async-issue-with-callbacks/",
	"title": "Handling Async Issues with Callbacks",
	"tags": [],
	"description": "",
	"content": " What is a Callback?  Callbacks are functions that are passed to another function\n We can use callbacks to control the order in which our multiple asynchronous functions are executed\n The code below modifies our .printLetter() function to accept a callback as a 2nd parameter\n  function printLetter(letter, callback) { //\u0026lt;- callback function param added  setTimeout(() =\u0026gt; { console.log(letter) callback() // \u0026lt;- execute (call) the callback param after printing letter  }, Math.floor(Math.random() * 3000)) } //... the rest of code below not shown for brevity   The changes will result in .printLetter() calling the next function (callback) after it\u0026rsquo;s done with the current function\n Now let\u0026rsquo;s see how we can use this callback approach to control the order in which our asynchronous functions are executed\n  Example: Using callbacks to control the execution order of async functions function printLetter(letter, callback) { //\u0026lt;- callback function param added  setTimeout(() =\u0026gt; { console.log(letter) callback() // \u0026lt;- execute (call) the callback param after printing letter  }, Math.floor(Math.random() * 3000)) } /* Using nested callback structure to control the execution order of the async functions */ function printAll(){ printLetter(\u0026#34;A\u0026#34;, () =\u0026gt; { printLetter(\u0026#34;B\u0026#34;, () =\u0026gt; { printLetter(\u0026#34;C\u0026#34;, () =\u0026gt; {}) }) }) } console.log(\u0026#39;Calling printAll function\u0026#39;) printAll() console.log(\u0026#39;End of code\u0026#39;)   Run the jsbin below and notice that no matter how many times we run the code, our asynchronous functions will be executed in the desired order (\u0026ldquo;A\u0026rdquo; -\u0026gt; \u0026ldquo;B\u0026rdquo; -\u0026gt; \u0026ldquo;C\u0026rdquo;)  JS Bin on jsbin.com\n However, observe how our .printAll() function is now using nested callbacks to meet our goals\n The introduction of nesting introduces additional complexity and makes the code difficult to maintain\n The use of nested callbacks to handle asynchronous code is referred to as \u0026ldquo;Callback Hell\u0026rdquo; and should generally be avoided\n  "
},
{
	"uri": "/homework-assignments/hw-assignment-04/",
	"title": "HW Assignment #4",
	"tags": [],
	"description": "",
	"content": " Summary of this week\u0026rsquo;s homework assignment: Due Date: Wednesday, October 9th\nComplete Homework #4 - Rock, Paper, Scissors Application  You are tasked with finishing the partially built Rock, Paper, Scissors application. The code is hosted on Github, see the url below:\n Github Repo for Homework #4 - Rock, Paper, Scissors Application  Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment\n  "
},
{
	"uri": "/03-control-flow-and-loops/conditionals/if-else-if/",
	"title": "if..else if Statement",
	"tags": [],
	"description": "",
	"content": " if..else if Statement  Used when evaluation among more than two choices, use if/else if\n You must specify a condition for every else if clause\n You can use as many else if clauses as is needed\n  // if..else if statement  if (condition) { code to run if this condition is true } else if (another condition) { code to run if this condition is true } else { code to run if NONE of the above conditions are true } // run some other code  Example const yourGrade = 84 if (yourGrade \u0026gt;= 90) { console.log(\u0026#34;Congrats your score is 90 or above, that\u0026#39;s an A!\u0026#34;) } else if (yourGrade \u0026gt;= 80) { console.log(\u0026#34;Congrats your score is 80 or above, you earned a B\u0026#34;) } else { console.log(\u0026#34;Your score is less than 80, no bueno\u0026#34;) }  JS Bin on jsbin.com\nExercise  Update the program below to test for these additional conditions:\n If student has scored greater than or equal to 70, then print \u0026ldquo;You earned a C\u0026rdquo;\n If student has scored greater than or equal to 60, then print \u0026ldquo;You earned a D, do better next time\u0026rdquo;\n If the student scored below 60, then print \u0026ldquo;Unfortunately, you have failed that course will need to retake it next semester\u0026rdquo;\n   JS Bin on jsbin.com\n"
},
{
	"uri": "/03-control-flow-and-loops/lab-js-basics-control-flow-loops/",
	"title": "Lab: JS Basics, Control Flow &amp; Loops",
	"tags": [],
	"description": "",
	"content": " Lab: JavaScript Basics, Control Flow \u0026amp; Loops  You are tasked with completing the problem set which is hosted on Github, see the url below:\n Github Repo for JS Basics, Control Flow \u0026amp; Loops Lab  Use the \u0026ldquo;Assignment Submission Git Workflow\u0026rdquo; (instructions) to access the lab files and submit your completed assignment\n  Tips  Be resourceful, leverage the class notes, google, MDN or any other means at your disposal to solve these problems (a core developer skill is being able to look things up and find the answers)\n Follow the instructions and use the test cases to confirm that your programs successfully meet the requirements\n  "
},
{
	"uri": "/class-resources/node-git-installation/linux/",
	"title": "Linux Installation Instructions",
	"tags": [],
	"description": "",
	"content": " Linux Installation Instructions 1) Find and Open your Terminal / Command Prompt application  All of the following commands (below) that start with $ should be copied and pasted in your terminal / command prompt (also referred to as the \u0026ldquo;command line\u0026rdquo;)\n DO NOT include the \u0026lsquo;$\u0026rsquo; when copying and pasting the commands below; \u0026lsquo;$\u0026rsquo; is a universal symbol for the terminal / command line\n Press the enter / return key on your keyboard after pasting the command\n  2) Install Git  Git is a tool used to track the state of your code over time. GitHub is a company that has made a business on top of the Git technology. We will be using both Git and GitHub in this class to distribute code, submit assignments and offer feedback.\n Git can be installed by running the following command:\n$ sudo apt-get install build-essential git-core curl   3) Configure Git  Copy and paste the following two commands (separately) into your Terminal. Replace the name and email address values with your own\n$ git config --global user.name \u0026quot;Steve Jobs\u0026quot; $ git config --global user.email \u0026quot;steve@apple.com\u0026quot;  Follow these instructions to create a new SSH Key (a special, very secure, key which allows your laptop access to your github account without having to remember your github password)\n Add your new SSH Key to GitHub following these instructions\n Verify your key works by running the following:\n$ ssh git@github.com  You should see output similar to:\nHi \u0026lt;you\u0026gt;! You've successfully authenticated, but GitHub does not provide shell access. Connection to github.com closed.   4) Install Node.js  $ curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - sudo apt-get install -y nodejs $ apt-get install --yes build-essential  "
},
{
	"uri": "/05-arrays-objects/objects/methods/",
	"title": "Methods",
	"tags": [],
	"description": "",
	"content": " Object Methods  Methods are functions of an object\n Methods specify the actions of an object (i.e. what the action can do)\n Methods are called in the same way we call all other functions\n  Example const superHero = { \u0026#39;secret identity\u0026#39;: \u0026#39;Peter Parker\u0026#39;, name: \u0026#39;Spiderman\u0026#39;, powers: [\u0026#39;super strength\u0026#39;, \u0026#39;hyper awareness\u0026#39;, \u0026#39;agility\u0026#39;, \u0026#39;genius intellect\u0026#39;], age: 17, sayTagline: function() { // \u0026lt;- method  console.log(\u0026#34;Hey everyone it\u0026#39;s your friendly neighborhood Spiderman\u0026#34;) } } // call the the method, just as you would call any function superHero.sayTagline()  JS Bin on jsbin.com\nExercise Create add a method to our superVillain object with the key named sayCatchPhrase, the method should print out the following message to the console \u0026ldquo;I am inevitable\u0026rdquo;\nJS Bin on jsbin.com\n"
},
{
	"uri": "/05-arrays-objects/objects/",
	"title": "Objects",
	"tags": [],
	"description": "",
	"content": " Objects  Objects are used to represent real world objects in programming\n Within an object, variables are known as properties and functions are known as methods\n Curly braces are a means of identifying if a variable is an object\n// create an object that represents a dog  const myDog = { name: \u0026#34;Fido\u0026#34;, age: 4, speak: function() { console.log(\u0026#39;Woof woof\u0026#39;) } }  Objects are organized in Key / Value pairs, in the example above: name is a key and \u0026quot;Fido\u0026quot; is the value, the pair together is referred to as the property\n  Details  Creating Objects   Accessing Properties   Assigning Properties   Methods   Nested Objects   "
},
{
	"uri": "/06-dom-and-jquery/jquery-events/other-events/",
	"title": "Other Events",
	"tags": [],
	"description": "",
	"content": " Other Events There are many other events available, click here to see a complete list of jQuery Events\n"
},
{
	"uri": "/01-command-line-js-and-git/git-vocabulary/push/",
	"title": "Push",
	"tags": [],
	"description": "",
	"content": " Push  Refers to sending your committed changes to a remote repository such as GitHub.com\n For instance, if you change something locally, you\u0026rsquo;d want to then push those changes so that others may access them\n  "
},
{
	"uri": "/17-deploying-your-app/securing-sensitive-credentials-with-parcel/",
	"title": "Securing Sensitive Credentials with Parcel",
	"tags": [],
	"description": "",
	"content": " Securing Sensitive Credentials with Parcel  Often times when using an API in our applications, those API providers require that we send an API Key with our API requests\n Those API keys should be considered sensitive credentials and the best practice is to use Environment Variables to prevent those sensitive credentials from being exposed\n However, the use of Environment Variables have traditionally only been available to applications that have a backend server (i.e. Express (via Node))\n Static applications (application without a built-in backend server) that need to secure sensitive credentials (i.e API Keys, Secret tokens, etc) can use Parcel\n  What is Parcel?  Parcel is an easy-to-use Web Application Bundler that requires very little configuration\n Parcel is a lighter-weight version of another popular Web Application Bundler - Webpack\n  Benefits  Bundles all your assets (html, css, js, images, etc) and automatically minimizes file sizes with for faster loading performance\n Hot Module Replacement - automatic reloading for any code changes (no more having to manually refresh after code changes); commonly referred to as \u0026ldquo;Hot Reloading\u0026rdquo; or \u0026ldquo;Hot Re-booting\u0026rdquo;\n Built-in support for ES6 and all it\u0026rsquo;s features\n Supports use of Environment Variables for static applications\n  "
},
{
	"uri": "/12-project-build-a-slackbot/tutorial/step-6-install-app-to-workspace/",
	"title": "Step 6: Install App to Workspace",
	"tags": [],
	"description": "",
	"content": " Step 6: Install App to your Workspace 1. Go to your Slack developer page  Go to https://api.slack.com/apps and select your OpenWeatherBot app  2. Install App to your workspace  Click on OAuth \u0026amp; Permissions in the left side panel and then press the button labeled Install App to Workspace\n Confirm that your newly created workspace (from Step 1) is listed and press \u0026ldquo;Allow\u0026rdquo;\n  3. Confirm that your slash command is available in your workspace  Navigate to your slack workspace via the web: https://slack.com/signin\n Select your testing workspace from Step 1\n Go to any channel and type /tes (purposely leaving off the last \u0026ldquo;t\u0026rdquo;) and our \u0026ldquo;test\u0026rdquo; slash command in the autocomplete listing\n Congrats you\u0026rsquo;ve installed your first slash command, during the next step, we will set up our server to handle the command\n  "
},
{
	"uri": "/05-arrays-objects/array-review/updating-array-values/",
	"title": "Updating Array Values",
	"tags": [],
	"description": "",
	"content": " Updating Arrays Values  You can change a value in an array by referencing the value and then changing the value using an = (equal sign)  Example // declare a variable called newEditionMembers and use it to store // an array of names  const newEditionMembers = [\u0026#34;Ricky Bell\u0026#34;, \u0026#34;Michael Bivins\u0026#34;, \u0026#34;Bobby Brown\u0026#34;, \u0026#34;Ronnie DeVoe\u0026#34;, \u0026#34;Ralph Tresvant\u0026#34;] // We are going replace Bobby Brown with Johnny Gill // by referencing the 3rd element of the array by using index 2 // and then use assignment (just an equal sign) to change // the value to Johnny Gill  newEditionMembers[2] = \u0026#34;Johnny Gill\u0026#34;  JS Bin on jsbin.com\n"
},
{
	"uri": "/04-functions-and-scope/working-with-parameters/",
	"title": "Working with Parameters",
	"tags": [],
	"description": "",
	"content": " Declaring Functions that need information  Some functions need additional information in order to perform a specific task\n This additional information is referred to as “parameters”\n To provide parameters to a function, you specify them inside the parentheses after the parameter name\n The parameters are used like variables within the function body\n We use the return keyword when we want our function to \u0026ldquo;give us back\u0026rdquo; a value\n In the case of the example we want the function to return the result of the multiplying the width times the height   Example // define a function called getArea() // that accepts two parameters width \u0026amp; height // we MUST use the return keyword if we // want the function to give us back a value  function getArea(width, height) { return width * height } // Calling the getArea() function with values getArea(7, 5) // returns 35  // Calling the getArea() function again but this time with variables const doorWidth = 2 const doorHeight = 8 getArea(doorWidth, doorHeight) // returns 16  JS Bin on jsbin.com\nExercise  Create a function calculateAge that accepts yearOfBirth (number) as a parameter and returns the current age of the associated with the provided yearOfBirth  JS Bin on jsbin.com\n"
},
{
	"uri": "/01-command-line-js-and-git/code-along-git-branching-merging/",
	"title": "Code Along: Git Branching &amp; Merging",
	"tags": [],
	"description": "",
	"content": " Code Along: Git Branching \u0026amp; Merging Step 0: Navigate to your class folder on your command line  From your command line, navigate to your class folder (i.e. the folder named jsd)  Step 1: Set up your project directory  Navigate into the lesson_01_files directory (this assumes you are currently in your jsd directory)\n$ cd lesson_01_files  Create a new directory named nursery_rhymes\n$ mkdir nursery_rhymes  Navigate into the nursery_rhymes directory using the cd command\n$ cd nursery_rhymes  nursery_rhymes is where all the files for this project will reside\n  Step 2: Create git repository for our project  Let\u0026rsquo;s create a new git repository to track all the changes inside your nursery_rhymes project\n Initialize a new repository by running the following command:\n$ git init   Step 3: Add a new files to the repository  Create two new files using the touch command\n$ touch humpty_dumpty.txt jack_be_nimble.txt  Open up your text editor and add the following content to humpty_dumpty.txt and save the file\nHumpty Dumpty sat on a wall, Humpty Dumpty had a great fall. All the king's horses and all the king's men Couldn't put Humpty together again.  Next, add the following text to jack_be_nimble.txt and save the file\nJack be nimble, Jack be quick, Jack jump over The candlestick.   Step 4: Stage and Commit your recent changes  Let\u0026rsquo;s stage the file so the changes can be moved from the \u0026ldquo;working directory\u0026rdquo; to the \u0026ldquo;staging area\u0026rdquo;\n$ git add .   git add . will add all files in the working directory to the staging area\n  Next, let\u0026rsquo;s commit the changes\n$ git commit -m \u0026quot;add initial nursery rhymes\u0026quot;   Step 5: Create a new branch  Branches allow developers work on a new feature without making any disruptive to changes to the main project (i.e. master branch) during the development of the feature\n Git branches are created using the git branch {branch-name} command\n Let\u0026rsquo;s create a new branch that will allow us to experiment with \u0026ldquo;remixes\u0026rdquo; to the Humpty Dumpty nursery rhyme\n First let\u0026rsquo;s create a new branch named \u0026ldquo;humpty_dumpty_remix\u0026rdquo;\n$ git branch humpty_dumpty_remix  Confirm that the new branch was successfully created by running git branch (without the \u0026ldquo;name\u0026rdquo; option)\n$ git branch  You should receive the following output:\nhumpty_dumpty_remix `* master  Note that you should have two (2) branches listed: master and humpty_dumpty_remix\n Also note that the asterisk (*) denotes which is currently active; we are currently \u0026ldquo;on the master branch\u0026rdquo;\n  Press the q key to escape from the git branch output in your terminal\n  In order to actually make changes on your new branch, we need to check it out so that it will be our \u0026ldquo;active branch\u0026rdquo;; otherwise, any changes we make now will be associated with our master branch\n Run the following command to check out our humpty_dumpty_remix branch\n$ git checkout humpty_dumpty_remix   git checkout {branch_name} allows developers to switch between branches in their local repository\n  Output should look similar to the following:\nSwitched to branch 'humpty_dumpty_remix'  You are now \u0026ldquo;on the humpty_dumpty_remix branch\u0026rdquo;\n  Step 6: Make changes on the feature branch  Open humpty_dumpty.txt in your text editor and change replace the last two lines of the nursery rhyme with the following lines; save the file:\nHe didn't get bruised he didn't get bumped Humpty Dumpty bungee jumped!  Run git diff to observe the line-by-line differences; your output should look like the following:\ndiff --git a/humpty_dumpty.txt b/humpty_dumpty.txt index 9516671..b5eeca0 100644 --- a/humpty_dumpty.txt +++ b/humpty_dumpty.txt @@ -1,4 +1,4 @@ Humpty Dumpty sat on a wall, Humpty Dumpty had a great fall. -All the king's horses and all the king's men -Couldn't put Humpty together again. +He didn't get bruised he didn't get bumped +Humpty Dumpty bungee jumped!   Step 7: Stage and Commit your recent changes  Let\u0026rsquo;s stage the file so the changes can be moved from the \u0026ldquo;working directory\u0026rdquo; to the \u0026ldquo;staging area\u0026rdquo;\n$ git add humpty_dumpty.txt  Next, let\u0026rsquo;s commit the changes\n$ git commit -m \u0026quot;remix humpty dumpty nursery rhyme\u0026quot;  Run git log to review the latest commit history\ncommit c6e54274bb0d6984e21622cb58274f48a80dc7d9 (HEAD -\u0026gt; humpty_dumpty_remix) Author: Kareem Grant \u0026lt;kareem@getuserwise.com\u0026gt; Date: Mon Aug 5 18:58:02 2019 -0400 remix humpty dumpty nursery rhyme commit 7edef5f21ddf4b42afb72c079cd03f3e2267e32c (origin/master, master) Author: Kareem Grant \u0026lt;kareem@getuserwise.com\u0026gt; Date: Mon Aug 5 16:36:50 2019 -0400 Add initial nursery rhymes  Note that our recent commit lives on the humpty_dumpty_remix branch\n  Step 8: Merge the changes into the master branch  We\u0026rsquo;re happy with our changes and now we\u0026rsquo;re ready to merge the changes into the master branch\n First, we need to move back to the master branch (we are currently on the humpty_dumpty_remix branch)\n We accomplish this by using the git checkout {branch_name} command\n$ git checkout master  The output should confirm that you successfully switched back to the master branch\nSwitched to branch 'master'  Now let\u0026rsquo;s merge the recent changes from our humpty_dumpty_remix branch into the master branch\n Merges in git are accomplished using the git merge command\n$ git merge humpty_dumpty_remix  The output should be similar to the following:\nUpdating 7edef5f..c6e5427 Fast-forward humpty_dumpty.txt | 4 ++-- 1 file changed, 2 insertions(+), 2 deletions(-)  The \u0026ldquo;fast-forward\u0026rdquo; reference means that Git was able to do an expedited merge because no conflicts were found (reference)\n Run git log to review the latest commit history\ncommit c6e54274bb0d6984e21622cb58274f48a80dc7d9 (HEAD -\u0026gt; master, humpty_dumpty_remix) Author: Kareem Grant \u0026lt;kareem@getuserwise.com\u0026gt; Date: Mon Aug 5 18:58:02 2019 -0400 remix humpty dumpty nursery rhyme commit 7edef5f21ddf4b42afb72c079cd03f3e2267e32c (origin/master) Author: Kareem Grant \u0026lt;kareem@getuserwise.com\u0026gt; Date: Mon Aug 5 16:36:50 2019 -0400 Add initial nursery rhymes  Notice that the HEAD (pointer which usually points to the most recent commit) is now on the master \u0026amp; the humpty_dumpty_remix branch; this means that our latest commit are up-to-date on both branches\n  Step 9: Delete the feature branch  Next, we\u0026rsquo;ll delete the feature branch because it\u0026rsquo;s no longer needed (the feature has been merged to master)\n To delete a branch we\u0026rsquo;ll use the git branch -d {name_of_branch}\n$ git branch -d humpty_dumpty_remix  The expected output should look similar to the following:\nDeleted branch humpty_dumpty_remix (was c6e5427).   Step 10: Create and checkout a new branch  Let\u0026rsquo;s create and check out a new branch that we\u0026rsquo;ll use to experiment with additional changes to jack_be_nimble.txt`\n Enter the following command to create a new branch and check it out at the same time\n$ git checkout -b update_jack_be_nimble  Here\u0026rsquo;s what the output should look like\nSwitched to a new branch 'update_jack_be_nimble'   git checkout -b {new_branch_name} uses the -b flag to checkout the newly created branch immediately after creating the branch\n Step 11: Make additional changes  Let\u0026rsquo;s makes some updates to our other nursery rhyme\n Run git branch to confirm that you are currently on the update_jack_be_nimble branch\n Open jack_be_nimble.txt in your text editor and replace all references to \u0026ldquo;Jack\u0026rdquo; with \u0026ldquo;Jill\u0026rdquo;; save the file\n  Step 12: Stage and Commit your recent changes  Stage the file so the changes can be moved from the \u0026ldquo;working directory\u0026rdquo; to the \u0026ldquo;staging area\u0026rdquo;\n$ git add jack_be_nimble.txt  Next, let\u0026rsquo;s commit the changes\n$ git commit -m \u0026quot;change references from jack to jill in 'jack be nimble'\u0026quot;   Step 13: Change back to the master branch and make a \u0026lsquo;conflicting\u0026rsquo; change  Next, we\u0026rsquo;re going to create a merge conflict on purpose and learn how to properly handle those conflicts\n Run git branch to confirm that you are currently on the master branch\n Open jack_be_nimble.txt in your text editor and change all references to \u0026ldquo;Jack\u0026rdquo; to \u0026ldquo;Jennifer\u0026rdquo;; save the file\n  Step 14: Stage and Commit your recent changes  Stage the file so the changes can be moved from the \u0026ldquo;working directory\u0026rdquo; to the \u0026ldquo;staging area\u0026rdquo;\n$ git add jack_be_nimble.txt  Next, let\u0026rsquo;s commit the changes\n$ git commit -m \u0026quot;change references from jack to jennifer in 'jack be nimble'\u0026quot;   Step 15: Attempt to merge \u0026ldquo;update_jack_be_nimble\u0026rdquo; into \u0026ldquo;master\u0026rdquo;  Let\u0026rsquo;s see what happens when we attempt to merge the update_jack_be_nimble branch into the master branch\n Ensure you are currently on the master branch and run the following command:\n$ git merge update_jack_be_nimble  You should receive output that resembles the following:\nAuto-merging jack_be_nimble.txt CONFLICT (content): Merge conflict in jack_be_nimble.txt Automatic merge failed; fix conflicts and then commit the result.  Git is informing us that it was not able to automatically merge the two branches due to a merge conflict\n  Step 16: View the merge conflict  Open jack_be_nimble.txt in your text editor; you should see the following:\n \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD Jennifer be nimble, Jennifer be quick, Jennifer jump over ======= Jill be nimble, Jill be quick, Jill jump over \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; update_jack_be_nimble The candlestick.  Note that some additional text has been added to our file:\n \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD\n =======\n `\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; update_jack_be_nimble\n  Think of these new lines as \u0026ldquo;conflict dividers\u0026rdquo;\n The ======= line is the \u0026ldquo;center\u0026rdquo; of the conflict.\n All the content between the center and the \u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt;\u0026lt; HEAD line is content that exists in the current branch master which the HEAD ref is pointing to\n Alternatively all content between the center and \u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt;\u0026gt; update_jack_be_nimble is content that is present in our merging branch\n   Step 16: Resolve the merge conflict  We\u0026rsquo;re going to fix the merge conflict by directly editing the file and removing the conflict dividers and any changes that we\u0026rsquo;ve determined (after discussing with our team) should be updated and/or deleted\n It\u0026rsquo;s been determined that the new name of our nursery rhyme subject should be \u0026ldquo;Jill\u0026rdquo;\n Remove all the conflict lines and the lines that start with \u0026ldquo;Jennifer\u0026rdquo;; save the file\n jack_be_nimble.txt should look like the following after the changes:\nJill be nimble, Jill be quick, Jill jump over The candlestick.  Next, run git add jack_be_nimble.txt to stage our changes\n Then commit the changes using git commit\n$ git commit -m \u0026quot;merged and resolved conflict in jack_be_nimble.txt\u0026quot;  Run a git log to view the updated commit history; the output should look similar to the following:\nOn branch master commit fd13059a4f83b0746ab95bb9aaf34c74ce8f74f6 (HEAD -\u0026gt; master) Merge: e82c6db 8fddf9d Author: Kareem Grant \u0026lt;kareem@getuserwise.com\u0026gt; Date: Tue Aug 6 09:57:34 2019 -0400 merged and resolved conflict in jack_be_nimble.txt commit e82c6db31408abfbe34a9917c75fa3e7be4e6053 Author: Kareem Grant \u0026lt;kareem@getuserwise.com\u0026gt; Date: Tue Aug 6 09:35:06 2019 -0400 change references from jack to jennifer in 'jack be nimble' commit 8fddf9dd40a77f94b10cab353f56e1fabddeeefb (update_jack_be_nimble) Author: Kareem Grant \u0026lt;kareem@getuserwise.com\u0026gt; Date: Tue Aug 6 09:32:59 2019 -0400 change references from jack to jill in 'jack be nimble' commit 7f102fe037156f74aa891e05c7779edddcb27531 Author: Kareem Grant \u0026lt;kareem@getuserwise.com\u0026gt; Date: Tue Aug 6 09:27:56 2019 -0400 remix humpty dumpty nursery rhyme commit 8409ae16180d09e67187330718c86310600bbb70 Author: Kareem Grant \u0026lt;kareem@getuserwise.com\u0026gt; Date: Tue Aug 6 09:26:30 2019 -0400 add initial nursery rhymes  Congrats! You\u0026rsquo;ve successfully resolved our merge conflict\n  "
},
{
	"uri": "/05-arrays-objects/array-review/adding-removing-items/unshift/",
	"title": ".unshift()",
	"tags": [],
	"description": "",
	"content": " .unshift()  Adds one or more elements to the beginning of an array and returns the new length of the array\n This method is a mutating method because it changes the original array\n  Example const fruits = [\u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Grapes\u0026#34;] fruits.unshift(\u0026#34;Peach\u0026#34;, \u0026#34;Mango\u0026#34;) console.log(fruits) // Peach, Mango, Apple, Orange, Grapes  JS Bin on jsbin.com\n"
},
{
	"uri": "/09-http-and-apis/code-along-giphy-api/",
	"title": "Code Along: Giphy API",
	"tags": [],
	"description": "",
	"content": " Code Along: Giphy Search API We\u0026rsquo;re going to build an application that uses Giphy\u0026rsquo;s API to display gifs based on search terms provided by users\n The starter code for this code along is hosted on Github, see the url below:\n Code Along: Giphy Search API  Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment\n  "
},
{
	"uri": "/17-deploying-your-app/code-along-using-env-variables-with-parcel/",
	"title": "Code Along: Using Environment Variables with Parcel",
	"tags": [],
	"description": "",
	"content": " Code Along: Using Environment Variables with Parcel  Together we\u0026rsquo;ll walk through the process of using Parcel to bundle a static application that needs to secure sensitive credentials  Instructions 1. Access your Giphy API project from a class session earlier in the course  Using your operating system\u0026rsquo;s finder / explorer application, copy your Giphy Search API application (project name: giphy-search-api) application an earlier lesson to your lesson_17 folder\n If you do not have a working version of giphy-search-api you can clone down a working version here\n If you choose this option, make sure you add your Giphy API Key to app.js where you see the following line of code:\nconst apiKey = 'ADD_YOUR_API_KEY_HERE'    \n-- 2. Install Parcel We\u0026rsquo;ll be following the set up instructions found here: https://parceljs.org/getting_started.html\n In the terminal, run the following command to install parcel globally\n$ npm install -g parcel-bundler   \n3. Create a package.json file inside your project folder  While inside your project folder, run the following command to create a package.json file\n$ npm init -y   \n4. Run Parcel development server Parcel has a development server built in, which will automatically rebuild your app as you change files and supports hot module replacement for fast development\n Run the following command from the command line to start parcel\u0026rsquo;s local development server:\n$ parcel index.html  Now open your browser and navigate to http:localhost:1234\n Test the app and confirm that it\u0026rsquo;s fully functional\n  \n5. Create .env file Parcel uses the dotenv to support loading environment variables from .env files (see docs)\nThis means we dot not have to explicitly install dotenv since parcel already has it installed as a dependency. However, we still need to the create the .env file.\n Run the following command from within the project folder\n$ touch .env.local  Parcel has a specific way it wants developers to set up .env files; .env.local is communicates to Parcel that these environment variables should be used \u0026ldquo;locally\u0026rdquo; (i.e. on your computer) (see docs)\n  \n6. Create and use Environment Variables to secure your API key Next, we\u0026rsquo;re going to to create an Environment Variable that will represent our app\u0026rsquo;s Giphy API key\n Open .env.local in your text editor and the following snippet:\nGIPHY_API_KEY=add_your_api_key_here   Replace add_your_api_key_here with your actual Giphy API key  Next, update app.js to replace your hardcoded API key process.env.GIPHY_API_KEY\n Here\u0026rsquo;s what search() should look like after the update in app.js:\nfunction search (searchTerm) { const url = \u0026#39;https://api.giphy.com/v1/gifs/search\u0026#39; const apiKey = process.env.GIPHY_API_KEY // \u0026lt;- this line was updated  $.ajax({ url: url, type: \u0026#39;GET\u0026#39;, data: { q: searchTerm, limit: 50, api_key: apiKey } }) .done((response) =\u0026gt; { // execute this function if request is successful  console.log(response) displayResults(response.data) }) .fail(() =\u0026gt; { // execute this function if request fails  console.log(\u0026#39;error occurred\u0026#39;) }) } })   \n7. Restart the Parcel development server  Shut down the Parcel server (from your command line) using Ctrl-C\n Restart the Parcel local development server:\n$ parcel index.html  Now open your browser and navigate to http:localhost:1234\n Confirm that the app remains fully functional with the use of the Environment Variable\n  \n8. Create a .gitignore file to prevent .env.local from being included in your git repository Git allows developers to specify files that they do not want to be tracked and committed to their git repository. These files will essentially be ignored by git\nWe accomplish this by creating a .gitignore file and adding the path of any files that we\u0026rsquo;d like to be ignored\n Create a .gitignore file\n$ touch .gitignore  Open .gitignore in your editor and add the following:\n.env.local /node_modules   Here we are adding .env.local to prevent our secure credentials from tracked. We\u0026rsquo;ve also followed the best practice of ignoring the /node_modules directory\n\nCongrats! You\u0026rsquo;ve successfully set up a development environment for your front-end application that the use of Environment Variables to secure your sensitive credentials\nImportant: Going forward, you will need to run parcel index.html so your app will be able handle Environment Variables without any issues\nIf you attempt to use the app without running parcel index.html you will receive the error depicted in the image below:\nFront-end websites that are not running on Node-based server cannot reference the process object; this is the benefit of using a bundler like Parcel, it provides us with a local web server\n"
},
{
	"uri": "/02-javascript-basics/comparison-operators/",
	"title": "Comparison Operators",
	"tags": [],
	"description": "",
	"content": " Comparison Operators  Compares operands (the things on either side of the operator) and returns true or false (boolean) based one the comparison     Operator Description Example (all return true)     Equal (==) Returns true if the operands are equal 3 == \u0026ldquo;3\u0026rdquo; (uhmm yes this is actually true)   Not equal (!=) Returns true if the operands are not equal. (4 + 1) != 10   Strict equal (===) Returns true if the operands are equal and of the same type (8 * 1) === 8   Strict not equal (!==) Returns true if the operands are of the same type but not equal, or are of different type 3 !== \u0026ldquo;3\u0026rdquo;   Greater than (\u0026gt;) Returns true if the left operand is greater than the right operand 10 \u0026gt; (3 * 3)   Greater than or equal (\u0026gt;=) Returns true if the left operand is greater than or equal to the right operand 10 \u0026gt;= (3 * 3) + 1   Less than (\u0026lt;) Returns true if the left operand is less than the right operand 7 \u0026lt; (3 * 3)   Less than or equal (\u0026lt;=) Returns true if the left operand is less than or equal to the right operand 18 \u0026lt;= 6 * 3    Examples JS Bin on jsbin.com\nExercise Add the following expressions in the jsbin below and evaluate the result; use console.log() to print the result. Don\u0026rsquo;t forget to press \u0026ldquo;run\u0026rdquo; after adding your code.\n \u0026quot;JavaScript\u0026quot; === \u0026quot;Java\u0026quot;\n \u0026quot;17\u0026quot; == parseInt(\u0026quot;17\u0026quot;)\n 10 \u0026gt;= (3 * 3) + 1\n  JS Bin on jsbin.com\n"
},
{
	"uri": "/00-course-intro-and-tools/course-structure/",
	"title": "Course Structure",
	"tags": [],
	"description": "",
	"content": " Overview  The course has 20 classes\n What you\u0026rsquo;ll learn:\n Fundamentals of JavaScript: including programming concepts such as data types, variables, and loops—the core concepts of programming\n Object Oriented JavaScript (OOP) and APIs: Learn how JavaScript can be used to exchange information and functionality within our programs\n Practical applications of JavaScript: Learn how to JavaScript can be used to manipulate websites and applications\n  3 Projects\n Slackbot\n Todo Application\n Final Project\n   "
},
{
	"uri": "/07-dom-and-jquery-ii/",
	"title": "DOM &amp; jQuery II",
	"tags": [],
	"description": "",
	"content": " Lesson 07 Intro to DOM \u0026amp; jQuery II "
},
{
	"uri": "/04-functions-and-scope/functions-calling-other-functions/",
	"title": "Functions Calling Other Functions",
	"tags": [],
	"description": "",
	"content": " Functions can call other functions  Function reusability is key results in cleaner code\n Reusing functions leverages key programming principle - Don\u0026rsquo;t Repeat Yourself (DRY)\n  Example  In the example of below, the surfaceAreaOfCube function calls another function (areaOfSquare) instead of duplicating work that was already done  // Function that calculates area of a square  function areaOfSquare(side){ return side * side } areaOfSquare(3) // returns 9  // This is a function that calculates the // surface area of a cube that *reuses* the areaOfSquare function  function surfaceAreaOfCube(side){ return 6 * areaOfSquare(side) } surfaceAreaOfCube(7) // returns 294  JS Bin on jsbin.com\nExercise  Create a function named surfaceAreaOfSphere that calculates the surface area of the Sphere using the following formula: 4 * PI * r**2; the function MUST reuse the provided areaOfCircle function  JS Bin on jsbin.com\n"
},
{
	"uri": "/final-projects/milestones-due-dates/host-final-project/",
	"title": "Host Final Project",
	"tags": [],
	"description": "",
	"content": " Milestone VI: Host Final Project  Due Date: Friday, November 1st\n Deploy and host your fully-functioning project on either Github Pages or Heroku (we\u0026rsquo;ll be going over both options during the \u0026ldquo;Deploying Your App\u0026rdquo; lesson)\n Deliverable: Submit the url that leads to the hosted version of your app using this form\n  "
},
{
	"uri": "/10-asynchronous-js-and-promises/promises/",
	"title": "Promises",
	"tags": [],
	"description": "",
	"content": " Promises  Overview   Creating Promises   Consuming Promises   Handling Async Issues with Promises   Passing values with Promises   Error Handling with .catch()   "
},
{
	"uri": "/01-command-line-js-and-git/git-vocabulary/pull/",
	"title": "Pull",
	"tags": [],
	"description": "",
	"content": " Pull  Pulls code from a remote repository and merges it with code in your local repository (on your computer)  "
},
{
	"uri": "/12-project-build-a-slackbot/tutorial/step-7-responding-to-slash-commands/",
	"title": "Step 7: Responding to Slash Commands",
	"tags": [],
	"description": "",
	"content": " Step 7: Responding to Slash Commands Next we\u0026rsquo;ll set up our server to respond to the Slash command, here\u0026rsquo;s how Slack describes the process in their documentation:\n When a slash command is invoked, Slack sends an HTTP POST to the Request URL you specified above. This request contains a data payload describing the source command and who invoked it, like a really detailed knock at the door.\n We are going to have our server send back an immediate response the process is detailed here\n1. Update index.js Add the following code to the bottom of index.js\napp.post(\u0026#39;/test\u0026#39;, async (req, res) =\u0026gt; { try { console.log(req) const data = { \u0026#39;response_type\u0026#39;: \u0026#39;in_channel\u0026#39;, \u0026#39;text\u0026#39;: \u0026#39;Testing testing 123!\u0026#39; } res.json(data) } catch (e) { console.log(e) } })   Here\u0026rsquo;s a summary of the newly added code\n We are using the API of Express to create a route with the path /test, this is the same route that matches url we entered during the creation of the Slash command on Step 5\n We are also leveraging a feature of Express that allows us to use the async/await syntax (and the try..catch syntax for error handling) to handle asynchronous calls\n When we create a route in Express, we get access to a callback that provides us with two parameters (request and response)\n The request object will contain information about the request that was sent to our server\n The response object allows us to send back a response to the sender\n  We are constructing a json object (according to Slack\u0026rsquo;s API documentation) that will allow send a response back with data to Slack\n We are using the .json() method available on the response object to send back a json response to Slack\n   2. Restart your Express server  Any time we make changes to our server code, we will need to restart the server before those new changes can be applied\n Navigate to the tab in your command line application that houses the running node server\n On your keyboard press Ctrl-C to shut down the server\n Then press the up arrow to access your previous command (which should be node index.js) and press enter to restart the server\n  "
},
{
	"uri": "/02-javascript-basics/variables/when-to-use-let-vs-const/",
	"title": "When to use let vs const",
	"tags": [],
	"description": "",
	"content": " When to use let vs const  Use let when you create a variable where you want to have the option of directly reassigning its value (using =) somewhere in your code\nlet message if (loginSuccessful) { message = \u0026#34;welcome back!\u0026#34; } else { message = \u0026#34;Invalid email or password, please try again\u0026#34; }  Use const in all other occasions\n  "
},
{
	"uri": "/08-dom-jquery-iii/",
	"title": "DOM &amp; jQuery III",
	"tags": [],
	"description": "",
	"content": " Lesson 08 Intro to DOM \u0026amp; jQuery III "
},
{
	"uri": "/04-functions-and-scope/function-expressions-anonymous-functions/",
	"title": "Function Expressions &amp; Anonymous Functions",
	"tags": [],
	"description": "",
	"content": " Function Expressions \u0026amp; Anonymous Functions  Another way to define a function is to use a function expression\n To define a function inside an expression, we can use the function keyword with the function name omitted\n function with no name is called anonymous functions\n  Example const getArea = function(width, height) { return width * height } // Calling the getArea() function with values getArea(7, 5) // returns 35  JS Bin on jsbin.com\n"
},
{
	"uri": "/00-course-intro-and-tools/tools/",
	"title": "Course Tools",
	"tags": [],
	"description": "",
	"content": " Text Editor:\n Why?: Text editor is a program that developers use to create and edit a range of programming language files. We\u0026rsquo;ll be using Atom, because it\u0026rsquo;s open source (free) and really good.\n Download Atom\n  Browser:\n Why?: Google chrome is a robust browser with a variety of tools that are helpful to developers.\n Install Google Chrome\n  Github:\n Why?: Github (and Git) are tools/applications used to by developers to manage their code and work collaboratively with each other. You\u0026rsquo;ll be using Github/Git to submit our homework assignments. kj\n Create a Github Account\n    Slack:\n Why?: Is a popular chat application that we\u0026rsquo;ll be using as our primary method of communication both during and outside of class\n Join the GA NYC Part Time Students Slack Community slack channel\n You should have received an emailed invitation to join GA’s slack team\n Don’t see an invitation in your inbox? Check your spam folder - many of Slack’s invitation emails tend to end up there. Let me know if you weren’t sent an invite and we’ll get you sorted out.\n  Add yourself to the dedicated Slack Channel for our class named #jsr-826 (see instructions on how to join a Slack Channel here)\n  Wireframes:\n Why?: Wireframes are a planning tools that helps you visualize the layout and other aspects of your web projects before writing any code.\n Multiple options:\n Whimsical - free wireframing software\n Google Drawing\n Pen \u0026amp; Paper\n  Example of a wireframe:\n   "
},
{
	"uri": "/04-functions-and-scope/arrow-functions/",
	"title": "Arrow Functions",
	"tags": [],
	"description": "",
	"content": " Arrow Functions  ES6 introduced/arrow function syntax/, a shorter way to write functions by using the special \u0026ldquo;fat arrow\u0026rdquo; (=\u0026gt;)\n Instead, you first include the parameters inside the () and then add an arrow =\u0026gt; that points to the function body surrounded in { } like this:\nconst getArea = (width, height) =\u0026gt; { const area = width * height return area } console.log(getArea(9, 8))  JS Bin on jsbin.com\n  Parameter syntax rules for Arrow functions  Functions that take only a single parameter do not need that parameter to be enclosed in parentheses.\n However, if a function takes zero or multiple parameters, parentheses are required\n Zero parameters  const functionName = () =\u0026gt; {}  const sayHello = () =\u0026gt; { console.log(\u0026#34;Hello\u0026#34;) }   One parameter  const functionName = param =\u0026gt; {}  const squareMe = num =\u0026gt; { return num * num }   Two parameters  const functionName = (paramOne, paramTwo) =\u0026gt; {}  const getArea = (width, height) =\u0026gt; { return width * height }   Function body syntax rules for Arrow functions  A function body composed of a single-line block does not need curly braces or a return keyword\n Without the curly braces, whatever that line evaluates will be automatically returned\n This is referred to as implicit return\n Examples\n Single line block  const squareMe = number =\u0026gt; number * number   Multi-line block  const verifyVotingEligibility = age =\u0026gt; { if (age \u0026gt; 18 ) { return true } else { return false } }   Exercise  Convert the following function to an arrow function\n Store the arrow function in a variable named areaOfCircle using const\n  function areaOfCircle(radius){ return Math.PI * (radius**2) }  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-manipulation/inserting-removing-content/after/",
	"title": ".after()",
	"tags": [],
	"description": "",
	"content": " .after() Method  Method is used to insert content after the selected elements  Example $(() =\u0026gt; { $(\u0026#39;#addFooter\u0026#39;).click(() =\u0026gt; { // Add footer \u0026#34;after\u0026#34; .numbers div  const footer = \u0026#34;\u0026lt;h2\u0026gt;Footer\u0026lt;/h2\u0026gt;\u0026#34; $(\u0026#39;.numbers\u0026#39;).after(footer) }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-manipulation/getting-setting-content/attr/",
	"title": ".attr()",
	"tags": [],
	"description": "",
	"content": " .attr() Method  Method to either get the value of an element\u0026rsquo;s attribute or set one or more attributes for the selected element  Example of Getting (Reading) attributes from elements  To Get (Read) text of an element use .attr(attrName) with name of the attribute you want to receive a value for  $(() =\u0026gt; { $(\u0026#34;#getIdName\u0026#34;).click(() =\u0026gt; { // read class name of .box  const idName = $(\u0026#34;.box\u0026#34;).attr(\u0026#34;id\u0026#34;) alert(idName) }) $(\u0026#34;#getUrl\u0026#34;).click(() =\u0026gt; { // read href of a tag  const url = $(\u0026#34;a\u0026#34;).attr(\u0026#34;href\u0026#34;) alert(url) }) })  JS Bin on jsbin.com\nExample of Setting (writing) attributes to elements  To Set (Write) text of an element use .attr(attrName, attrValue) with the new attribute name and value inside the parentheses  $(() =\u0026gt; { $(\u0026#34;#setClassName\u0026#34;).click(() =\u0026gt; { // set class name of #box to .green  $(\u0026#34;#box\u0026#34;).attr(\u0026#34;class\u0026#34;, \u0026#34;green\u0026#34;) }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-effects/fade-in-fade-out/",
	"title": ".fadeIn() &amp; .fadeOut()",
	"tags": [],
	"description": "",
	"content": " .fadeIn() \u0026amp; .fadeOut() Methods  Methods used to display or hide the HTML elements by gradually increasing or decreasing their opacity  .fadeIn() Example $(() =\u0026gt; { $(\u0026#34;button\u0026#34;).click(() =\u0026gt; { // fade in #box element; duration 1 sec  $(\u0026#34;#box\u0026#34;).fadeIn(1000) }) })  JS Bin on jsbin.com\n.fadeOut() Example $(() =\u0026gt; { $(\u0026#34;button\u0026#34;).click(() =\u0026gt; { // fade out #box element; duration 3 sec  $(\u0026#34;#box\u0026#34;).fadeOut(3000) }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/05-arrays-objects/array-iterators/filter/",
	"title": ".filter()",
	"tags": [],
	"description": "",
	"content": " .filter()  Returns the value of the first element in the array that satisfies the provided testing function\n undefined is returned if no element satisfies testing function\n The callback function for .find() accepts the following parameters:\n element: (required) current element being processed in the array.\n index: (optional) index of the current element being processed in the array\n array: (optional) the array map was called upon\n  .filter() returns a new array containing all elements that match the testing function\n  Syntax Using traditional (ES5) function syntax\nconst result = arr.filter(function(item, index, array) { // if true is returned, item is returned and iteration is stopped  // for falsy scenario returns undefined })  Using arrow syntax (ES6)\nconst result = arr.filter((item, index, array) =\u0026gt; { // if true is returned, item is returned and iteration is stopped  // for falsy scenario returns undefined })  Example const numbers = [5, 3, 13, 4, 11 ] const greaterThan5 = numbers.filter(number =\u0026gt; { return number \u0026gt; 5 }) console.log(greaterThan5) // [13, 11]  JS Bin on jsbin.com\nExercise Use .filter() to return all words that have more than 6 characters in the words array.\nSave the returned values to a variable declared with const called longWords\nJS Bin on jsbin.com\n"
},
{
	"uri": "/05-arrays-objects/array-review/adding-removing-items/slice/",
	"title": ".slice()",
	"tags": [],
	"description": "",
	"content": " .slice()  Returns a shallow copy of a portion of an array into a new array object selected from begin to end (end not included) where begin and end represent the index of items in that array\n This is method is NOT a mutating method because the original array is not modified\n  Example const fruits = [\u0026#34;Peach\u0026#34;, \u0026#34;Mango\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Grapes\u0026#34;, \u0026#34;Strawberries\u0026#34;] let myFavoriteFruits = fruits.slice(1, 4) console.log(myFavoriteFruits) // Mango, Apple, Orange  // The original \u0026#39;fruits\u0026#39; array was NOT modified console.log(fruits) // Peach , Mango, Apple, Orange, Grapes, Strawberries  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-manipulation/css-style-manipulation/toggle-class/",
	"title": ".toggleClass()",
	"tags": [],
	"description": "",
	"content": " .toggleClass() Method  Method toggles one or more classes to / from selected elements  Example $(() =\u0026gt; { $(\u0026#34;#toggleBorderClass\u0026#34;).click(() =\u0026gt; { // toggle .strongBorder on box  $(\u0026#34;.box\u0026#34;).toggleClass(\u0026#34;strongBorder\u0026#34;) }) })  JS Bin on jsbin.com\n"
},
{
	"uri": "/05-arrays-objects/array-review/adding-removing-items/",
	"title": "Adding &amp; Removing Items",
	"tags": [],
	"description": "",
	"content": " Adding \u0026amp; Removing Items  Let\u0026rsquo;s review some of the most common ways to Add and Remove elements from an array:   .push()   .pop()   .shift()   .unshift()   .slice()   "
},
{
	"uri": "/10-asynchronous-js-and-promises/async-await/",
	"title": "Async / Await",
	"tags": [],
	"description": "",
	"content": " Async / Await  Overview   Handling Async Issues with Async / Await   Passing Values with Async / Await   Error Handling with Async / Await   "
},
{
	"uri": "/07-dom-and-jquery-ii/code-along-traffic-light/",
	"title": "Code Along: Traffic Light",
	"tags": [],
	"description": "",
	"content": " Code Along: Traffic Light  The starter code for this code along is hosted on Github, see the url below:\n Code Along: Traffic Light  Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment\n  "
},
{
	"uri": "/09-http-and-apis/code-along-twilio-api-sms/",
	"title": "Code Along: Twilio SMS API",
	"tags": [],
	"description": "",
	"content": " Code Along: Twilio SMS API We\u0026rsquo;ll be using the Twilio API to build a small app that sends text messages.\n1) Sign up for a free Twilio account\n2) Verify your Personal Number - trial accounts are only allowed to send SMS messages to \u0026ldquo;verified numbers\u0026rdquo;, follow this process and add your mobile phone number as a \u0026ldquo;verified number\u0026rdquo;\nYou can optionally set up a Google Voice number as an alternative to using your own mobile number\n 3) Get the starter code*: It\u0026rsquo;s hosted on Github, see the url below:\n Code Along: Twilio SMS API\n Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment\n  4) Navigate to this guide: Sending Outbound SMS with Nodejs - we\u0026rsquo;ll be following along with this guide to build the application\n"
},
{
	"uri": "/03-control-flow-and-loops/loops-and-iteration/for-each/",
	"title": "forEach Loop",
	"tags": [],
	"description": "",
	"content": " forEach Loop  forEach() is an Array method executes a provided function once for each item (or element) in the array\n The function used in forEach is called a callback function because it is being passed as a parameter into another function (we\u0026rsquo;ll cover these concepts in more detail in a later class)\n The callback function for forEach provides the following:\n element - this current element from the array that is being evaluated\n index - this represents the current element\u0026rsquo;s index (or position in the array)\n   callbacks are used extensively in JavaScript; we will discuss them more in detail when we do a deeper dive into functions later in the course\n someArray.forEach(function(element, index) { // code block to be executed for each element in the array })  Example const chipmunks = [\u0026#34;alvin\u0026#34;, \u0026#34;simon\u0026#34;, \u0026#34;theodore\u0026#34;] chipmunks.forEach(function(element, index) { console.log(`${element}is at index ${index}`) })  JS Bin on jsbin.com\nExercise Write a program that uses a forEach loop to print each of the fruit names (found in the provided fruits array) in all caps\nJS Bin on jsbin.com\n"
},
{
	"uri": "/17-deploying-your-app/heroku/",
	"title": "Heroku",
	"tags": [],
	"description": "",
	"content": " What is Heroku?  Heroku is a PaaS (Platform as a Service) that enables developers to easily host (deploy), monitor and scale their applications\n Supports many different languages (Node.js (JavaScript), Ruby, Python, Jav, PHP, etc) and supports virtually any type of application (from static websites to server-backed applications connected to a database)\n Heroku\u0026rsquo;s focus is to take the pain of deploying applications and maintaining environment (server updates \u0026amp; scalability, database backups, etc) so developers can focus solely on building their applications\n  "
},
{
	"uri": "/09-http-and-apis/",
	"title": "HTTP and APIs",
	"tags": [],
	"description": "",
	"content": " Lesson 09 HTTP and APIs "
},
{
	"uri": "/05-arrays-objects/array-review/length-property/",
	"title": "length Property",
	"tags": [],
	"description": "",
	"content": " length property  Property of an Array that returns the number of elements in that array  Example const fruits = [\u0026#34;Peach\u0026#34;, \u0026#34;Mango\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Orange\u0026#34;, \u0026#34;Grapes\u0026#34;, \u0026#34;Strawberries\u0026#34;, \u0026#34;Plum\u0026#34;] const numberOfFruits = fruits.length console.log(numberOfFruits) // 7  JS Bin on jsbin.com\n"
},
{
	"uri": "/02-javascript-basics/logical-operators/",
	"title": "Logical Operators",
	"tags": [],
	"description": "",
	"content": " Logical Operators  Evaluates between two conditions/expressions and returns true or false\n with \u0026amp;\u0026amp; (Logical And) operators, both conditions have to be true in order for the whole expression to be true\n with || (Logical Or) operators, any of the condition must be true for entire expression to be true; but if all conditions are false then the entire expression is false\n     Operator Description Example (all return true)     Logical AND (\u0026amp;\u0026amp;) expr1 \u0026amp;\u0026amp; expr2 (3 \u0026gt; 1) \u0026amp;\u0026amp; \u0026ldquo;cat\u0026rdquo;.length === 3   Logical OR (||) expr1 || expr2 (4 + 1) \u0026lt; 8 || 53 \u0026gt; (9 * 6)    Examples JS Bin on jsbin.com\nExercise Add the following expressions in the jsbin below and evaluate the result; use console.log() to print the result. Don\u0026rsquo;t forget to press \u0026ldquo;run\u0026rdquo; after adding your code.\n true \u0026amp;\u0026amp; false\n true \u0026amp;\u0026amp; 8 \u0026gt; (3 * 3) \u0026amp;\u0026amp; \u0026quot;hello\u0026quot;\n true \u0026amp;\u0026amp; (9 / 3 \u0026gt; 5) || \u0026quot;Yolo!\u0026quot;\n false || \u0026quot;Apple\u0026quot; === \u0026quot;apple\u0026quot; || parseInt(\u0026quot;12\u0026quot;) === 12\n  JS Bin on jsbin.com\n"
},
{
	"uri": "/05-arrays-objects/objects/nested-objects/",
	"title": "Nested Objects",
	"tags": [],
	"description": "",
	"content": " Nested Methods  In non-trivial applications, data is often nested\n JavaScript allows use to traverse an nested object using either dot notation or bracket notation\n  Example const avengers = { headquarters: \u0026#34;Stark Tower\u0026#34;, members: [ { name: \u0026#39;Black Widow\u0026#39;, \u0026#39;secret identity\u0026#39;: \u0026#39;Natasha Romanov\u0026#39;, powers: [\u0026#34;elite martial artist\u0026#34;, \u0026#34;genius intellect\u0026#34;, \u0026#34;strategy\u0026#34;, \u0026#34;leadership\u0026#34;] }, { name: \u0026#39;Captain America\u0026#39;, \u0026#39;secret identity\u0026#39;: \u0026#39;Steve Rogers\u0026#39;, powers: [\u0026#34;super strength\u0026#34;, \u0026#34;leadership\u0026#34;] } ] } // access the first member of the Avengers console.log(avengers.members[0].name) // access the 2nd member\u0026#39;s first listed power console.log(avengers.members[1].powers[0])  JS Bin on jsbin.com\n"
},
{
	"uri": "/04-functions-and-scope/scope/",
	"title": "Scope",
	"tags": [],
	"description": "",
	"content": " Scope Overview  Scope is the set of variables you have access to\n As we learned in the beginning of this class, JavaScript reads from top to bottom\n Sometimes, however, we declare variables inside functions (just like arguments), which aren\u0026rsquo;t accessible in other parts of our code; this is the concept of scope.\n  Types of Scope  A variables scope is determined primarily based on where is was declared\n Variables declared inside a function are in local scope\n Variables defined outside of a function are in the global scope\n Each function when invoked creates a new scope\n  Details  Global Scope   Local Scope   Scope in Block Statements   "
},
{
	"uri": "/12-project-build-a-slackbot/tutorial/step-8-test-your-slash-command/",
	"title": "Step 8: Test your Slash Command",
	"tags": [],
	"description": "",
	"content": " Step 8: Test your Slash Command Now we\u0026rsquo;ll test our Slash command to see if our Server is able to successfully return a response\n1. Navigate back to your workspace  Navigate to your slack workspace via the web: https://slack.com/signin\n Select your testing workspace from Step 1\n Go to any channel and type /test and press enter\n   Congrat\u0026rsquo;s your server successfully responded to your Slash Command  "
},
{
	"uri": "/12-project-build-a-slackbot/tutorial/step-9-access-slash-command-parameters/",
	"title": "Step 9: Access Slash Command Parameters",
	"tags": [],
	"description": "",
	"content": " Step 9: Access Slash Command Parameters Next we will take a look at the information that Slack sends us when we receive a request from a Slash command\n1. Update the app.post(/test..) function in index.js  Inside the our app.post(/test) function, change the console.log(req) to console.log(req.body)  app.post(\u0026#39;/test\u0026#39;, async (req, res) =\u0026gt; { try { console.log(req.body) // \u0026lt;-- update this line  const data = { \u0026#39;response_type\u0026#39;: \u0026#39;in_channel\u0026#39;, \u0026#39;text\u0026#39;: \u0026#39;Testing testing 123!\u0026#39; } res.json(data) } catch (e) { console.log(e) } })   Restart your node server\n Navigate to your Slack workspace and make another slash command to but this time add a name for example, /test Fred Flintstone\n  2. Navigate to your node server tab in your command line application and observe the output  Let\u0026rsquo;s see the result of console.log(req.body)\n Navigate to the node server tab in your command line application and you should see something similar to the following\n  { token: \u0026#39;CePdTWPzpIXUufKUL3UJhaVx\u0026#39;, team_id: \u0026#39;TN43P8U3X\u0026#39;, team_domain: \u0026#39;reemcoworkspace\u0026#39;, channel_id: \u0026#39;CN17QEB2M\u0026#39;, channel_name: \u0026#39;slackbot-testing\u0026#39;, user_id: \u0026#39;UN43P8UCD\u0026#39;, user_name: \u0026#39;kareem.grant\u0026#39;, command: \u0026#39;/test\u0026#39;, text: \u0026#39;Fred Flintstone\u0026#39;, response_url: \u0026#39;https://hooks.slack.com/commands/TN43P8U3X/755841282464/Xu0N0r65xVmo3dbMgD83xUq7\u0026#39;, trigger_id: \u0026#39;755841282544.752125300133.615d84c666fefe471d23a7e53bf50f07\u0026#39; }   Note that the parameter \u0026ldquo;Fred Flintstone\u0026rdquo; is available to us through req.body.text in the object we get back from Slack  3. Update your response back to Slack in include the parameter We are going to update our response back the Slack to the parameter that was sent along with the slash command (`text: \u0026lsquo;Fred Flintstone\u0026rsquo;)\n Update the app.post(/test..) function  app.post(\u0026#39;/test\u0026#39;, async (req, res) =\u0026gt; { try { console.log(req.body) const data = { \u0026#39;response_type\u0026#39;: \u0026#39;in_channel\u0026#39;, \u0026#39;text\u0026#39;: `Testing testing 123! ${req.body.text}` // \u0026lt;-- update this line  } res.json(data) } catch (e) { console.log(e) } })  4. Make a slash command to /test Fred Flintstone in your workspace  Let\u0026rsquo;s see if we can successfully send back data we received from Slack in our response\n In your workspace, make the following slash command: /test Fred Flintstone\n You should now see: Testing testing 123! Fred Flintstone\n  "
},
{
	"uri": "/03-control-flow-and-loops/conditionals/ternary-operator/",
	"title": "ternary Operator",
	"tags": [],
	"description": "",
	"content": " ternary Operator  Used as a shortcut for the if statement  condition ? expression that is run if condition is true : expression that is run if condition is false  Example const isLactoseIntolerant = true const milkType = isLactoseIntolerant ? \u0026#34;almond\u0026#34; : \u0026#34;dairy\u0026#34; console.log(milkType)  JS Bin on jsbin.com\nExercise Rewrite the following if..else statement using a ternary operator:\nlet yearOfBirth = 2001 if (yearOfBirth \u0026lt;= 2002) { console.log(\u0026#39;you will be old enough to vote in 2020\u0026#39;) } else { console.log(\u0026#39;Sorry, you will not be old enough to vote next year\u0026#39;) }  JS Bin on jsbin.com\n"
},
{
	"uri": "/06-dom-and-jquery/code-along-rolling-dice-jquery/",
	"title": "Code Along: Rolling Dice jQuery",
	"tags": [],
	"description": "",
	"content": " Code Along: Rolling Dice jQuery  During this code along, we\u0026rsquo;ll convert the DOM manipulation logic in the Rolling Dice application from native JavaScript to jQuery\n The starter code for this code along is hosted on Github, see the url below:\n Code Along: Rolling Dice jQuery  Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment\n  "
},
{
	"uri": "/10-asynchronous-js-and-promises/",
	"title": "Asynchronous JS and Promises",
	"tags": [],
	"description": "",
	"content": " Lesson 10 Asynchronous JS and Promises "
},
{
	"uri": "/10-asynchronous-js-and-promises/code-along-giphy-api-with-async-await/",
	"title": "Code Along: Giphy API with Async / Await",
	"tags": [],
	"description": "",
	"content": " Code Along: Giphy Search API with Async / Await We\u0026rsquo;re going to modify our Giphy\u0026rsquo;s API application and use async / await to make our API request\n1) Sign up for a Giphy API Key here: https://developers.giphy.com/ (only for those students who don\u0026rsquo;t already have one)\n2) Get the starter code\n The starter code for this code along is hosted on Github, see the url below:\n Code Along: Giphy Search API with Async / Await\n Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment\n   3) We\u0026rsquo;ll be using axios to make our API request. Add the following script tag right before your closing \u0026lt;body\u0026gt; tag but before the script tag targeting your app.js file\n\u0026lt;script src=\u0026#34;https://code.jquery.com/jquery-3.4.1.min.js\u0026#34; integrity=\u0026#34;sha256-CSXorXvZcTkaix6Yvo6HppcZGetbYMGWSFlBw8HfCJo=\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/axios/dist/axios.min.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- Add the axios script tag here --\u0026gt; \u0026lt;script src=\u0026#34;js/app.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;  "
},
{
	"uri": "/17-deploying-your-app/code-along-hosting-with-heroku/",
	"title": "Code Along: Hosting with Heroku",
	"tags": [],
	"description": "",
	"content": " Code Along: Hosting with Heroku During this code along, we\u0026rsquo;ll be walking through the process of hosting the \u0026ldquo;Parcel-enabled\u0026rdquo; Giphy Search API application (from the previous code along) on Heroku\n Step 1: Install Heroku   Step 2: Prepare the App   Step 3: Run Heroku Locally   Step 4: Deploy to Heroku   "
},
{
	"uri": "/final-projects/milestones-due-dates/complete-final-project/",
	"title": "Complete Final Project",
	"tags": [],
	"description": "",
	"content": " Milestone VII: Complete Final Project  Complete your final project\n Due Date: Tuesday, November 4th\n  "
},
{
	"uri": "/01-command-line-js-and-git/git-vocabulary/fork/",
	"title": "Fork",
	"tags": [],
	"description": "",
	"content": " Fork  A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project\n Most commonly, forks are used to either propose changes to someone else\u0026rsquo;s project or to use someone else\u0026rsquo;s project as a starting point for your own idea\n  "
},
{
	"uri": "/06-dom-and-jquery/jquery-events/",
	"title": "jQuery Events",
	"tags": [],
	"description": "",
	"content": " jQuery Events  The jQuery library provides a collection of methods that serve one of two purposes\n To listen for an event — an event (e.g. clicking a button) is something the user does to trigger an action\n To add a visual effect — a visual effect (e.g. a drop-down menu appearing when a user clicks a button) is something that changes the appearance of the web page\n  Events are often responsible for triggering a visual effect\n  "
},
{
	"uri": "/09-http-and-apis/lab-send-receive-sms-twilio-api/",
	"title": "Lab: Send &amp; Receive with Twilio SMS API",
	"tags": [],
	"description": "",
	"content": " Lab: Sending and Receiving with Twilio SMS API We\u0026rsquo;re going to build on the Twilio Code Along and follow this tutorial: https://www.twilio.com/docs/sms/quickstart/node#receive-and-reply-to-inbound-sms-messages-with-express\n"
},
{
	"uri": "/04-functions-and-scope/single-responsibility-principle/",
	"title": "Single Responsibility Principle",
	"tags": [],
	"description": "",
	"content": " Single Responsibility Principle (SRP)  SRP is a programming best practice that advocates modular code\n Put another way, your programs should be broken up in such a way where each part is responsible for only one \u0026ldquo;thing\u0026rdquo; or domain\n SRP is often applied to functions\n  Applying SRP to Functions  This concepts calls for your functions to only be \u0026ldquo;responsible\u0026rdquo; for one thing\n Often you\u0026rsquo;ll find that the logic in your functions are doing too much (for example: making calculations AND displaying the result to the screen)\n In these cases you should break out those multiple responsibilities into multiple functions\n This is what we did in the Geometry Calculator code along\n  "
},
{
	"uri": "/12-project-build-a-slackbot/tutorial/step-10-make-api-request-to-openweather/",
	"title": "Step 10: Make API Request to OpenWeather",
	"tags": [],
	"description": "",
	"content": " Step 10: Make API Request to OpenWeather Now it\u0026rsquo;s time to make an API request from our server to OpenWeather\n1. Add the following code to the bottom of index.js  Add the following code to the bottom of index.js and replace [YOUR_OPENWEATHER_API_KEY] with your api key from OpenWeather  async function openWeatherApi (query) { try { const url = \u0026#39;https://api.openweathermap.org/data/2.5/weather\u0026#39; const apiKey = \u0026#39;[YOUR_OPENWEATHER_API_KEY]\u0026#39; // make api request using axios  const response = await axios.get(url, { params: { appid: apiKey, q: query, units: \u0026#39;imperial\u0026#39; } }) console.log(response) return response.data } catch (e) { console.log(e) } }   Here\u0026rsquo;s a summary of the code above:\n We\u0026rsquo;re going to use async/await to handle our API request to OpenWeather so we\u0026rsquo;ve prepended async in front of openWeatherApi()\n openWeatherApi() accepts a query parameter which will represent the city name received from slash command\n axios is being used to make a get request to the OpenWeather API\n axios is a \u0026ldquo;promise-based\u0026rdquo; http client, which means it will return a promise after it\u0026rsquo;s done making the request\n we are using await to halt the execution of the rest of the code in the function until a response is received from OpenWeather\n Once the response is received, we are returning the response.data object since axios always includes any payload (data information) in a key named data\n If an error occurs, we are simply logging the error to the console for now\n   2. Update app.post(/weather...) in index.js We are going to update the logic in our route handler app.post(/weather...) so it calls the openWeatherApi()\n Update the app.post(/weather...) route handler to reflect the code below:  app.post(\u0026#39;/weather\u0026#39;, async (req, res) =\u0026gt; { try { console.log(req.body) // respond with an OK to sender within 3 secs  // as required by Slack for delayed responses  // documentation: https://api.slack.com/slash-commands#responding_response_url  res.json() // extract city passed in as a parameter to  // our slash command (/weather cityName)  const query = req.body.text // making API request via openWeatherApi function  const response = await openWeatherApi(query) // print out OpenWeather API  // response to the console  console.log(response) // res.json(data)  } catch (e) { console.log(e) }  3. Try your /weather slash command again  Restart your Express server and go back to your development workspace on Slack and try the /weather slash command again (make sure you include a valid city name): /weather brooklyn\n Go to your command line application and open the tab associated with your Express server\n Confirm the data from our OpenWeather API request is now being displayed in our server log (via) - the output should look similar to the image below:\n   Nice! We just made a successful API request to OpenWeather  "
},
{
	"uri": "/01-command-line-js-and-git/git-vocabulary/clone/",
	"title": "Clone",
	"tags": [],
	"description": "",
	"content": " Clone  Copies a remote repository (i.e. repository in the cloud on a platform like Github.com) and creates a local copy of the repository on your computer\n Cloning creates a link between the the remote and local copy of a repository, allowing you to your code in sync between the two\n  "
},
{
	"uri": "/07-dom-and-jquery-ii/code-along-score-keeper/",
	"title": "Code Along: Score Keeper",
	"tags": [],
	"description": "",
	"content": " Code Along: Score Keeper  The starter code for this code along is hosted on Github, see the url below:\n Code Along: Score Keeper  Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment\n  "
},
{
	"uri": "/00-course-intro-and-tools/folder-structure/",
	"title": "Folder Organization",
	"tags": [],
	"description": "",
	"content": " Recommended Folder Organization  Create a folder in your Documents folder (My Documents on Windows) called jsr\n At beginning of every class, you\u0026rsquo;ll use git (this process will be explained in the next class) to download any starter files to your jsr folder are available for that day\u0026rsquo;s lesson\n As the course progresses you\u0026rsquo;ll have a neatly organized listing of all of your work that looks similar to this:\n  "
},
{
	"uri": "/06-dom-and-jquery/jquery-manipulation/",
	"title": "jQuery Manipulation",
	"tags": [],
	"description": "",
	"content": " jQuery Manipulation During this section we\u0026rsquo;ll cover:\n Getting \u0026amp; Setting Content   Inserting \u0026amp; Removing Content   CSS \u0026amp; Style Manipulation   "
},
{
	"uri": "/11-lab-giphy-weather-app/",
	"title": "Lab: Giphy Weather App",
	"tags": [],
	"description": "",
	"content": " Lesson 11 Lab: Giphy Weather App "
},
{
	"uri": "/class-resources/node-git-installation/",
	"title": "Node &amp; Git Installation",
	"tags": [],
	"description": "",
	"content": " Node \u0026amp; Git Installation  You will need to install certain tools that will be used throughout the course. The installation instructions vary depending on whether you have a Mac, Windows, or Linux machine.\n Choose the installation instructions specific to your OS below and follow the step-by-step instructions:\n Mac OS X\n Windows\n Linux\n   Helpful Debugging Tips Error installing due to permissions\nPermissions issues are common when installing programs on the terminal. In order to install command line utilities, you need to be signed into a user account on your computer with administrator-level rights. If you have trouble with this, please ask a member of the instructional team for help.\nGoogle is your friend\nEven experienced programmers occasionally need to look up error messages on Google. If you experience an error, it’s likely that someone else has experienced the error, as well. To find the fix, copy and paste the error message into Google, but remove content specific to your computer to ensure the accuracy of your search. You will most likely find a reference to your specific error. StackOverflow is a trustworthy reference.\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-effects/other-effects/",
	"title": "Other Effects",
	"tags": [],
	"description": "",
	"content": " Other Effects There are many other effects available, click here to see a complete list of jQuery Effects\n"
},
{
	"uri": "/06-dom-and-jquery/jquery-traversing/other-traversal-methods/",
	"title": "Other Traversal Methods",
	"tags": [],
	"description": "",
	"content": " Other Traversal Methods There are many other traversal methods available click here to see a complete list\n"
},
{
	"uri": "/12-project-build-a-slackbot/tutorial/step-11-respond-to-slack-with-current-weather/",
	"title": "Step 11: Respond to Slack with Current Weather",
	"tags": [],
	"description": "",
	"content": " Step 11: Respond to Slack with Current Weather Now that we\u0026rsquo;ve confirmed that we can make an successful API call to OpenWeather, we need to send weather data back to Slack\nAccording to Slack\u0026rsquo;s API documentation, if we are going to make an API call on our server as a result of slash command then we should send data back to Slack as a \u0026ldquo;delayed response\u0026rdquo; (see docs)\nIn order to send a delayed response to Slack we need to make a POST request back to Slack using the response_url that is sent with the initial request associated with the slash command (in req.body)\nHere\u0026rsquo;s a reminder of what Slack is sending our server users use our /weather slash command\n1. Update app.post(/weather...) route handler in index.js We\u0026rsquo;re going to take the data we received from our request to OpenWeather and send it to Slack as a \u0026ldquo;delayed response\u0026rdquo;\n Update the app.post(/weather...) route handler to reflect the code below:  app.post(\u0026#39;/weather\u0026#39;, async (req, res) =\u0026gt; { try { console.log(req.body) // respond with an OK to sender within 3 secs  // as required by Slack for delayed responses  // documentation: https://api.slack.com/slash-commands#responding_response_url  res.json() // extract city passed in as a parameter to  // our slash command (/weather cityName)  const query = req.body.text // making API request via openWeatherApi function  const response = await openWeatherApi(query) // print out OpenWeather API  // response to the console  console.log(response) // Create a forecast based on info  // received from OpenWeather  const forecast = `Current temperature in ${query}is ${response.main.temp}degrees with a high of ${response.main.temp_max}degrees and a low of ${response.main.temp_min}degrees` // construct an object (according to Slack API docs)  // that will be used to send a response  // back to Slack  const data = { \u0026#39;response_type\u0026#39;: \u0026#39;in_channel\u0026#39;, \u0026#39;text\u0026#39;: forecast } // make a POST request (with axios) using \u0026#34;response_url\u0026#34;  // to complete our \u0026#34;delayed response\u0026#34; as  // per the Slack API docs  axios.post(req.body.response_url, data) // res.json(data)  } catch (e) { console.log(e) } })  Here\u0026rsquo;s a summary of the changes made:\n We\u0026rsquo;re using the data received from OpenWeather to constructing a forecast that includes current temp and the min and max temps and storing the string in a variable named forecast\n Next, we are formatting our response object (the structure of the object is specified by the Slack API docs) named data; the value stored in the forecast variable will be included in this object\n Lastly, we\u0026rsquo;re using axios to make a POST request to the response_url and send the data object that contains our forecast\n  2. Try your /weather slash command again  Restart your Express server and go back to your development workspace on Slack and try the /weather slash command again (make sure you include a valid city name): /weather brooklyn\n After submitting the slash command (with a valid city), the forecast for that city should be displayed directly in Slack\n   Congrats! Your server successfully responded with a current weather forecast for the requested city  "
},
{
	"uri": "/00-course-intro-and-tools/confirm-node-git-installation/",
	"title": "Confirm Node &amp; Git Installation",
	"tags": [],
	"description": "",
	"content": " Confirm Node \u0026amp; Git Installation 1) Ensure that you followed the installation instructions for your Operation System found here: Node and Git Installation\n2) Open up your console / terminal\n For Mac OS X users:\n Open the \u0026ldquo;Terminal\u0026rdquo; app (Applications \u0026gt; Utilities \u0026gt; Terminal)  For Windows:\n Open the \u0026ldquo;Command Prompt\u0026rdquo; application.   3) In the terminal type the following command to confirm git was successfully installed:\n $ git  4) In the terminal type the following command to confirm node was successfully installed:\n $ node  Note: type control-c to exit out of node\n"
},
{
	"uri": "/12-project-build-a-slackbot/",
	"title": "Project: Build a Slackbot",
	"tags": [],
	"description": "",
	"content": " Lesson 12 Project: Build a Slackbot "
},
{
	"uri": "/01-command-line-js-and-git/git-vocabulary/pull-request/",
	"title": "Pull Request",
	"tags": [],
	"description": "",
	"content": " Pull Request  Pull requests are proposed changes to a repository submitted by a user and accepted or rejected by a repository\u0026rsquo;s collaborators (i.e. team members).\n Pull requests can be thought of as a developer asking for permission to merge their changes into the master branch\n Pull requests each have their own discussion forum, where developer can discuss the changes requested and suggest further revisions.\n This discussion as also referred to as Code Reviews\n  "
},
{
	"uri": "/08-dom-jquery-iii/code-along-hilo/",
	"title": "Code Along: HiLo",
	"tags": [],
	"description": "",
	"content": " Code Along: HiLo  The starter code for this code along is hosted on Github, see the url below:\n Code Along: HiLo  Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment\n  "
},
{
	"uri": "/04-functions-and-scope/code-along-rolling-dice/",
	"title": "Code Along: Rolling Dice",
	"tags": [],
	"description": "",
	"content": " Code Along: Rolling Dice  We\u0026rsquo;ll walk through the process using functions to create a program that simulates rolling dice\n The starter code for this code along is hosted on Github, see the url below:\n Code Along: Rolling Dice  Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment\n  "
},
{
	"uri": "/13-object-oriented-js/",
	"title": "Object Oriented JS",
	"tags": [],
	"description": "",
	"content": " Lesson 13 Object Oriented JS "
},
{
	"uri": "/12-project-build-a-slackbot/tutorial/step-12-use-environment-variables-to-protect-secure-credentials/",
	"title": "Step 12: Use Environment Variables to Protect Secure Credentials",
	"tags": [],
	"description": "",
	"content": " Step 12: Use Environment Variables to Protect Secure Credentials In our openWeatherApi() function we\u0026rsquo;ve hard coded our API key from OpenWeather. While this works, it is not a best practice because if we were to push our code to Github then anyone who had access to the code would be able to see and potential use our API key. This introduces security risk and can lead to some serious consequences in a real-world application.\nasync function openWeatherApi (query) { try { const url = \u0026#39;https://api.openweathermap.org/data/2.5/weather\u0026#39; const apiKey = \u0026#39;111222333abcabcabcabc\u0026#39; // \u0026lt;- Danger danger! - security risk!!!  // make api request using axios  const response = await axios.get(url, { params: { appid: apiKey, q: query, units: \u0026#39;imperial\u0026#39; } }) return response.data } catch (e) { console.log(e) } }  Thankfully, there\u0026rsquo;s an approach that solves this problem for developers. The best practice is to store our application\u0026rsquo;s secure credentials (API Keys, security keys, etc) in Environment Variables\nEnvironment variables are used to obscure your secure credentials by representing them as variables instead of hard coding them.\nLet\u0026rsquo;s walk through the process securing our OpenWeather API key\n1. Create a file named .env We are going to be using the popular npm package called dotenv (we installed in Step 3) to manage our environment variables\n Create a file (inside your project folder) named .env\n$ touch .env   2. Add secure credentials to .env Open .env in your editor and add the following:\n// OpenWeather API Key OPEN_WEATHER_API_KEY=[YOUR_OPENWEATHER_API_KEY]  Here are storing our OpenWeather API key in an environment variable named OPEN_WEATHER_API_KEY (best practice is to use snake case and all caps when naming your environment variables)\n3. Update openWeatherApi() to use our environment variable Replace the hardcoded API key with the environment variable\nasync function openWeatherApi (query) { try { const url = \u0026#39;https://api.openweathermap.org/data/2.5/weather\u0026#39; const apiKey = process.env.OPEN_WEATHER_API_KEY // \u0026lt;- using the env variable  // make api request using axios  const response = await axios.get(url, { params: { appid: apiKey, q: query, units: \u0026#39;imperial\u0026#39; } }) return response.data } catch (e) { console.log(e) } }  The dotenv package (see docs) allows us to access our environment variables (store in .env) via process.env.[YOUR_ENVIRONMENT_VARIABLE_NAME]\nIn our code, we replaced the our hardcoded API key with process.env.OPEN_WEATHER_API_KEY (the name of the environment variable we added to .env)\n4. Create a .gitignore file to prevent .env from being included in your git repository Git allows developers to specify files that they do not want to be tracked and committed to their git repository. These files will essentially be ignored by git\nWe accomplish this by creating a .gitignore file and adding the path of any files that we\u0026rsquo;d like to be ignored to .gitignore\n Create a .gitignore file\n$ touch .gitignore  Open .gitignore in your editor and add the following:\n.env /node_modules   Here we are adding .env to prevent our secure credentials from tracked.\nWe are also adding /node_modules folder. This is often a best practice because the /node_modules directory can become quite large (it is where all of the libraries and their dependencies) are installed. There\u0026rsquo;s no need to include these libraries in the git repository because a detailed list of all the packages needed for your application are stored in package.json. If someone were to pull your application from Github, they would simply need to run:\n$ npm install  This command will inspect the project\u0026rsquo;s package.json and install all of the packages (and their dependencies)\nYou have now secured your application\u0026rsquo;s secure credentials. If you were to push this code to Github your actual API key would not be available since you added .env to your .gitignore file\n4: Initialize a git repository for our project and confirm .env is being ignored  Initialize a new repository for the project by running the following command:\n$ git init  Stage your changes\n$ git add .  Run git status to confirm that .env and /node_modules are being ignored\n$ git status   Confirm that .env and /node_modules are not listed (meaning they are successfully being ignored by git)\n6. Ensure that you\u0026rsquo;re able to see \u0026ldquo;git-ignored\u0026rdquo; files in your text editor Some text editors (such as Atom) will hide files that have been \u0026ldquo;git-ignored\u0026rdquo; which will result in those files not being visible in your text editor\u0026rsquo;s file pane (tree view)\nCheck if you\u0026rsquo;re able to see the recently created .env file in the file pane of your text editor\nDo the following if you don\u0026rsquo;t see the .env file:\n For Atom, users - follow the instructions found here to display hidden files\n Display git-ignored files in Atom  For non-Atom users, you will need to look up how to display hidden files in your editor (only if hidden files aren\u0026rsquo;t currently showing)\n  6. Try your /weather slash command again  Restart your Express server and go back to your development workspace on Slack and try the /weather slash command again (make sure you include a valid city name): /weather brooklyn\n Confirm that everything continues to work as before\n  "
},
{
	"uri": "/00-course-intro-and-tools/what-is-programming/",
	"title": "What is Programming?",
	"tags": [],
	"description": "",
	"content": " What is Programming?  List of instructions that a computer needs in order to complete a task\n Instructions are provided in a programming language that the computer understands\n These set of instructions are commonly referred as source code or a program\n There are many programming languages available, during this course we will be learning JavaScript\n  "
},
{
	"uri": "/12-project-build-a-slackbot/tutorial/step-13-handle-errors-gracefully/",
	"title": "Step 13: Handle Errors Gracefully",
	"tags": [],
	"description": "",
	"content": " Step 13: Handle Errors Gracefully If you try the pass an invalid city name to your /weather slash command, we\u0026rsquo;ll receive the following error in our server log:\nThis is happening because we aren\u0026rsquo;t appropriately handling errors. In an ideal scenario, if a user was to pass an invalid city name to the /weather slash command our server should respond back a message informing users of the error\n1. Update openWeatherApi() in index.js  Update the openWeatherApi() to reflect the code below:  async function openWeatherApi (query) { try { const url = \u0026#39;https://api.openweathermap.org/data/2.5/weather\u0026#39; const apiKey = process.env.OPEN_WEATHER_API_KEY // make api request using axios  const response = await axios.get(url, { params: { appid: apiKey, q: query, units: \u0026#39;imperial\u0026#39; } }) console.log(response) return response.data } catch (e) { console.log(e) // \u0026#34;throw\u0026#34; error, which will be \u0026#34;caught\u0026#34;  // by the function that called openWeatherApi  throw new Error(\u0026#39;City not found\u0026#39;) } }  Here\u0026rsquo;s a summary of the update:\n In the catch(){} part of our try..catch block we are using throw to forward our error to the function that called openWeatherApi() - we are doing this because we want to make the app.post(/weather...) route handler aware that an error occurred during our API request to OpenWeather\n We are following the JavaScript best practice of creating an Error object (using the new keyword) when constructing errors; we are passing a message to provide additional context around the error\n  2. Update app.post(/weather...) in index.js Now that we\u0026rsquo;ve made openWeatherApi() throw any errors it encounters, our app.post(/weather...) route handle with then catch those errors in its own try..catch block`\n Update the app.post(/weather...) to reflect the code below:  app.post(\u0026#39;/weather\u0026#39;, async (req, res) =\u0026gt; { try { console.log(req.body) // respond with an OK to sender within 3 secs  // as required by Slack for delayed responses  // documentation: https://api.slack.com/slash-commands#responding_response_url  res.json() // extract city passed in as a parameter to  // our slash command (/weather cityName)  const query = req.body.text // making API request via openWeatherApi function  const response = await openWeatherApi(query) // print out OpenWeather API  // response to the console  console.log(response) // Create a forecast based on info  // received from OpenWeather  const forecast = `Current temperature in ${query}is ${response.main.temp}degrees with a high of ${response.main.temp_max}degrees and a low of ${response.main.temp_min}degrees` // construct an object (according to Slack API docs)  // that will be used to send a response  // back to Slack  const data = { \u0026#39;response_type\u0026#39;: \u0026#39;in_channel\u0026#39;, \u0026#39;text\u0026#39;: forecast } // make a POST request (with axios) using \u0026#34;response_url\u0026#34;  // to complete our \u0026#34;delayed response\u0026#34; as  // per the Slack API docs  axios.post(req.body.response_url, data) // res.json(data)  } catch (e) { console.log(e) // construct an error response to send  // to Slack in the case of the user  // sending an invalid city  const errorResponse = { \u0026#39;response_type\u0026#39;: \u0026#39;in_channel\u0026#39;, \u0026#39;text\u0026#39;: \u0026#39;[ADD ANY SLACK EMOJI CODE HERE] Oh oh, there was a problem with your last request. Please make sure you enter a valid city name.\u0026#39; } axios.post(req.body.response_url, errorResponse) } })  Here\u0026rsquo;s a summary of the update:\n In the catch(){} portion of openWeatherApi() we are constructing an object that will contain our response to Slack (structure of this object is based on Slack API docs); in the \u0026quot;text\u0026quot; section of the object, we are sending a helpful message to users so they can take corrective action\n Lastly, we\u0026rsquo;re using axios to make a POST request to the response_url and send the errorResponse object that contains our message\n  3. Try your /weather slash command with an invalid city name  Restart your Express server and go back to your development workspace on Slack and try the /weather slash command with an invalid city name such as /weather yolo town\n After submitting the slash command with an invalid city), an informative error message should be displayed in Slack\n  "
},
{
	"uri": "/class-resources/keys-to-success/",
	"title": "Keys to Success",
	"tags": [],
	"description": "",
	"content": " Do your homework: More you practice the concepts learned in class, the faster you\u0026rsquo;ll pick them up\n Don\u0026rsquo;t try to memorize anything: You\u0026rsquo;ll memorize things naturally through the act of doing things over and over again. Besides, if you don\u0026rsquo;t remember something just look it up (i.e. google).\n Work smarter not harder: In additional to looking things up, developers are really good at referencing past code that they\u0026rsquo;ve used in the past to solve problems they encounter in the present. So keep your past code organized so you easily reference it later. You don\u0026rsquo;t get points for memorizing anything, but you do get points for being resourceful and using past work to help you move a litter faster today.\n Ask Questions: Don\u0026rsquo;t be afraid to ask questions, everyone learns differently, it\u0026rsquo;s the instructor\u0026rsquo;s responsibility to ensure you grasp the concepts. Your questions helps me (your instructor) understand what\u0026rsquo;s working and what\u0026rsquo;s not.\n Change your perspective of failure: Expects things to not work. That\u0026rsquo;s where the fun part and truly where the learning begins. It\u0026rsquo;s during the troubleshooting phase where\u0026rsquo;s you\u0026rsquo;ll gained a deep understanding of concepts taught in class. If everything worked the first time, you\u0026rsquo;d never learn anything :)\n Get comfortable with the fact that there are multiple ways to do things: If I gave a 10 experienced developers a coding homework assignment chances are that I will receive 10 different approaches and they\u0026rsquo;ll all be \u0026ldquo;correct\u0026rdquo; (meaning each approach will accomplish the stated goals of the assignment). There is no 1 right answers when it comes to coding. There are \u0026ldquo;best practices\u0026rdquo; some of which we will push in this course, others best practices will be learned through continued practice. Instead of focusing on what you think may be the \u0026ldquo;best\u0026rdquo; approach, just focus on ensuring that your program / assignments is the goals or requirements (\u0026ldquo;just get it things working first\u0026rdquo;).\n Perfection is the enemy of good enough: When you go through your homework assignments and labs your # 1 goal is to \u0026ldquo;just get things working\u0026rdquo; and not to make it perfect the first time. Get things working first (no matter how janky it may seem) and only after you\u0026rsquo;ve got it working should you go through the process developers call refactoring, optimizing the code without changing the behavior (i.e. making it look nice).\n Use names that make sense: As a developer you are going to be frequently tasked with naming things. Naming things is hard, but my advice is to be as explicit as possible. You should always write your code as if someone else is going to read it and you want them to be able to quickly understand what’s going on. One of the best ways to accomplish that is to use names that highly contextual. For example, if you have a variable that is supposed to represent a person’s first name, then be as explicit as possible:\n// very bad - you don't get points for making names super short let n = \u0026quot;Kiara\u0026quot; // ok but not great let name = \u0026quot;Kiara\u0026quot; // best - explicit, there's no doubt what this variable should represent let firstName = \u0026quot;Kiara\u0026quot;   "
},
{
	"uri": "/05-arrays-objects/array-iterators/reduce/",
	"title": ".reduce()",
	"tags": [],
	"description": "",
	"content": " .reduce()  .reduce() is used calculate a single value based on the array\n A reducer function (that you provide) is called on each element of the array and results in a single output value\n Often used to perform a calculation that accepts all the elements of an array (usually numbers) as inputs\n For example: Calculating the sum of all the items in an array  .reduce() accepts the following parameters\n The callback function (also referred to the reducer function in this case) for .reduce() accepts the following parameters:\n accumulator: (required) the accumulated value previously returned in from the last iteration;\n currentValue: (required) current element being processed in the array.\n index: (optional) index of the current element being processed in the array\n array: (optional) the array map was called upon\n  initialValue: (optional) the value to use as the first argument to for the first iteration of reduce(); If no initialValue is supplied, the first element in the array will be used\n  Syntax Using traditional (ES5) function syntax\nconst value = arr.reduce(function(previousValue, item, index, array) { // ... }, [initial]);  Using arrow syntax (ES6)\nconst value = arr.reduce((previousValue, item, index, array) =\u0026gt; { // ... }, [initial]);  Example  Example where no initialValue is supplied  const numbers = [1, 2, 3, 4, 5] const result = numbers.reduce((sum, currentNumber) =\u0026gt; sum + currentNumber) console.log(result) // 15  JS Bin on jsbin.com\n Example where we set the initialValue to 10  const numbers = [1, 2, 3, 4, 5] const result = numbers.reduce((sum, currentNumber) =\u0026gt; sum + currentNumber, 10) console.log(result) // 25  JS Bin on jsbin.com\nExercise Use .reduce() to calculate the sum of the numbers found in the amounts array; Save the result in a variable declared with const called total\nJS Bin on jsbin.com\n"
},
{
	"uri": "/14-intro-to-crud-and-firebase/",
	"title": "Intro to CRUD and Firebase",
	"tags": [],
	"description": "",
	"content": " Lesson 13 Intro to CRUD and Firebase "
},
{
	"uri": "/06-dom-and-jquery/jquery-effects/",
	"title": "jQuery Effects",
	"tags": [],
	"description": "",
	"content": " jQuery Effects  jQuery provides several techniques for adding animation to a web page\n Here some commonly used jQuery Effect methods:\n .show() \u0026amp; .hide()   .toggle()   .slideUp() \u0026amp; .slideDown()   .slideToggle()   .fadeIn() \u0026amp; .fadeOut()   Other Effects     "
},
{
	"uri": "/08-dom-jquery-iii/lab-citipix/",
	"title": "Lab: CitiPix",
	"tags": [],
	"description": "",
	"content": " Lab: CitiPix  The starter code for this lab is hosted on Github, see the url below:\n Lab: CitiPix  Use the Assignment Submission Git Workflow (detailed here) to access and submit the assignment\n  "
},
{
	"uri": "/12-project-build-a-slackbot/tutorial/step-14-enhance-weather-response-with-emojis/",
	"title": "Step 14: Enhance Weather Response with Emojis",
	"tags": [],
	"description": "",
	"content": " Step 14: Enhance Weather Response with Emojis As a final touch, let\u0026rsquo;s spruce up our forecasts with emojis. Slack has native support for emojies using codes such as 👍\nOpenWeather\u0026rsquo;s API provides \u0026ldquo;weather codes\u0026rdquo; that it uses to categorize the different types of weather conditions (see docs). For example, rain falls under codes in the 500\u0026rsquo;s (5xx) and snow falls under codes in the 600\u0026rsquo;s (6xx).\nLet\u0026rsquo;s map some emojis to the weather codes we receive from OpenWeather to help make our OpenWeatherBot even more informative.\n1. Update index.js Add the following code to the bottom of index.js\nHere we have created a function called getWeatherEmoji() that accepts a weatherCode as a parameter. Function uses the weatherCode to determine which emoji should be returned\n2. Update app.post(/weather...) in index.js Next, we need to update our app.post(/weather...) router handler so it can make use of getWeatherEmoji()\n Update the app.post(/weather...) to reflect the code below:  app.post(\u0026#39;/weather\u0026#39;, async (req, res) =\u0026gt; { try { console.log(req.body) // respond with an OK to sender within 3 secs  // as required by Slack for delayed responses  // documentation: https://api.slack.com/slash-commands#responding_response_url  res.json() // extract city passed in as a parameter to  // our slash command (/weather cityName)  const query = req.body.text // making API request via openWeatherApi function  const response = await openWeatherApi(query) // print out OpenWeather API  // response to the console  console.log(response) // Create a forecast based on info  // received from OpenWeather  const forecast = `Current temperature in ${query}is ${response.main.temp}degrees with a high of ${response.main.temp_max}degrees and a low of ${response.main.temp_min}degrees` // pass weather code from OpenWeather response  // to getWeatherEmoji() and receive an emoji  const emoji = getWeatherEmoji(response.weather[0].id) // construct an object (according to Slack API docs)  // that will be used to send a response  // back to Slack  // Add attachments section  // (see Slack API docs: https://api.slack.com/docs/message-attachments) to display our emoji and description  const data = { \u0026#39;response_type\u0026#39;: \u0026#39;in_channel\u0026#39;, \u0026#39;text\u0026#39;: forecast, \u0026#39;attachments\u0026#39;: [ // \u0026lt;-- new code  { \u0026#39;text\u0026#39;: `Forecast: ${emoji}${response.weather[0].description}` } ] } // make a POST request (with axios) using \u0026#34;response_url\u0026#34;  // to complete our \u0026#34;delayed response\u0026#34; as  // per the Slack API docs  axios.post(req.body.response_url, data) // res.json(data)  } catch (e) { console.log(e) // construct an error response to send  // to Slack in the case of the user  // sending an invalid city  const errorResponse = { \u0026#39;response_type\u0026#39;: \u0026#39;in_channel\u0026#39;, \u0026#39;text\u0026#39;: \u0026#39; Oh oh, there was a problem with your last request. Please make sure you enter a valid city name.\u0026#39; } axios.post(req.body.response_url, errorResponse) } })  Here\u0026rsquo;s a summary of the updates:\n After receiving the OpenWeather response, we are going to pass the weather code to our getWeatherEmoji() function and store the result in a variable named emoji\n Next, we are going to update the response object to include an attachments section that will allow us to add additional content to our Slack response (see Slack docs on attachments)\n  3. Try your /weather slash with a valid city name  Restart your Express server and go back to your development workspace on Slack and try the /weather slash command again (make sure you include a valid city name): /weather brooklyn\n Confirm that your response now includes an emoji along with the weather description from OpenWeather\u0026rsquo;s API response\n   Congrats, you\u0026rsquo;ve created your first Slackbot!  "
},
{
	"uri": "/00-course-intro-and-tools/what-is-javascript/",
	"title": "What is JavaScript?",
	"tags": [],
	"description": "",
	"content": " What is JavaScript?  programming language created in 1995 by Netscape (now Mozilla)\n It was created in 10 days\n Not the same as Java\n  What does JavaScript do?  Adds interactivity to your websites\n Makes web based software feel more like desktop software\n Can be used to save data to a database or to create desktop applications\n Improves overall user experience of web-based applications\n  Advantages of JavaScript  JavaScript is the only programming language that all web browsers understand\n JavaScript is a programming language that is essential for web development\n JavaScript can be run in the browser (i.e. front-end) and on the server (i.e. backend through the use of Node.js)\n  This makes JavaScript the only programming language that is truly \u0026ldquo;full-stack\u0026rdquo; (i.e. supports both front-end and backend development)\n Documentation  Best resource of JavaScript documentation on the web can be found here: Mozilla Development Network - JavaScript Documentation  "
},
{
	"uri": "/15-project-firebase-todo-app/",
	"title": "Project: Firebase Todo App",
	"tags": [],
	"description": "",
	"content": " Lesson 15 Project: Firebase Todo App "
},
{
	"uri": "/16-intro-to-express/",
	"title": "Intro to Express",
	"tags": [],
	"description": "",
	"content": " Lesson 16 Intro to Express "
},
{
	"uri": "/06-dom-and-jquery/jquery-traversing/",
	"title": "jQuery Traversing",
	"tags": [],
	"description": "",
	"content": " jQuery Traversing  Traversal methods allows us to select elements up and down the DOM tree very easily\n DOM traversing is one of the prominent features of the jQuery\n   Notice how DOM elements are structured in a parent-child relationship\n The \u0026lt;body\u0026gt; element is the parent of the \u0026lt;div\u0026gt; element, and an ancestor of everything inside of it. The enclosed \u0026lt;div\u0026gt; element is the parent of \u0026lt;h1\u0026gt;, \u0026lt;p\u0026gt; and \u0026lt;ul\u0026gt; elements, and a child of the \u0026lt;body\u0026gt; element.\n The elements \u0026lt;h1\u0026gt;, \u0026lt;p\u0026gt; and \u0026lt;ul\u0026gt; are siblings, since they share the same parent.\n The \u0026lt;h1\u0026gt; element is a child of the \u0026lt;div\u0026gt; element and a descendant of the \u0026lt;body\u0026gt; element. This element does not have any children.\n The \u0026lt;p\u0026gt; element is the parent of \u0026lt;em\u0026gt; element, child of the \u0026lt;div\u0026gt; element and a descendant of the \u0026lt;body\u0026gt; element. The containing \u0026lt;em\u0026gt; element is a child of this \u0026lt;p\u0026gt; element and a descendant of the \u0026lt;div\u0026gt; and \u0026lt;body\u0026gt; element.\n Similarly, the \u0026lt;ul\u0026gt; element is the parent of the \u0026lt;li\u0026gt; elements, child of the \u0026lt;div\u0026gt; element and a descendant of the \u0026lt;body\u0026gt; element. The containing \u0026lt;li\u0026gt; elements are the child of this \u0026lt;ul\u0026gt; element and a descendant of the \u0026lt;div\u0026gt; and \u0026lt;body\u0026gt; element. Also, both the \u0026lt;li\u0026gt; elements are siblings.\n  Here some commonly used jQuery traversal methods used to programatically nagivate the DOM\n ancestors   descendants   Other Traversal Methods     "
},
{
	"uri": "/class-resources/learning-html-css/",
	"title": "Learning HTML &amp; CSS",
	"tags": [],
	"description": "",
	"content": " Here are some great (FREE) resources for learning HTML \u0026amp; CSS\nHTML \u0026amp; CSS  Codecademy - HTML \u0026amp; CSS course\n Shay Howe - Learn to Code HTML \u0026amp; CSS\n FreeCodeCamp Responsive Web Design Certification (300 hours)\n Udacity - Intro to HTML and CSS\n Khan Academy - Intro to HTML/CSS\n  Flexbox  MDN - Flexbox\n Flexbox - Flexbox Froggy\n Flexbox - Flexbox Zombies\n  CSS Selectors  MDN - CSS Selectors\n CSS Diner\n  CSS Grid  MDN - CSS Grid\n CSS Grid Garden\n  "
},
{
	"uri": "/05-arrays-objects/array-iterators/other-iterators/",
	"title": "Other Iterators",
	"tags": [],
	"description": "",
	"content": " Other Iterators  There are many other built-in iterator methods, a complete list can be found on MDN’s Array iteration methods list\n As developer, you will be working with arrays of data on a constant basis; which means you\u0026rsquo;ll be visiting the documentation often to look up array methods you may not have used before\n Let\u0026rsquo;s get some practice \u0026ldquo;looking things up\u0026rdquo;\n  Exercise Visit the MDN Array Documentation and find the appropriate iterator method that will allow you to sort the list of words found in the words array in descending alphabetical order\nJS Bin on jsbin.com\n"
},
{
	"uri": "/00-course-intro-and-tools/pseudocode/",
	"title": "Pseudocode",
	"tags": [],
	"description": "",
	"content": " Pseudocode  Process of writing a program without using the syntax of a programming language\n Mixture of natural language and high-level programming concepts\n There is no standard way to write pseudocode, use langauge that can be understood by technical and non-technical people\n Use pseudocode as an \u0026ldquo;outline\u0026rdquo; for your real code\n  "
},
{
	"uri": "/17-deploying-your-app/",
	"title": "Deploying Your App",
	"tags": [],
	"description": "",
	"content": " Lesson 17 Deploying Your App "
},
{
	"uri": "/00-course-intro-and-tools/class-exercise-smart-thermostat-pseudocode/",
	"title": "Class Exercise - Smart Thermostat Pseudocode",
	"tags": [],
	"description": "",
	"content": " Class Exercise: Thermostat logic in pseudocode We\u0026rsquo;re going to use pseudocode to describe the basic functionality of a smart thermostat\n As as class we are going to write some pseudocode for a program for a smart thermostat\n We’ll focus on coming up with the logic that will help the thermostat know when to turn the heat on and off\n  "
},
{
	"uri": "/class-resources/cors/",
	"title": "CORS",
	"tags": [],
	"description": "",
	"content": " CORS  CORS is the policy that defines this, an acronym that stands for \u0026ldquo;Cross-Origin Resource Sharing\u0026rdquo;\n You cannot normally make an AJAX request across different domains\n Some domains don\u0026rsquo;t allow you to ping them from other domains and some do\n  Click here for more information about CORS\n "
},
{
	"uri": "/00-course-intro-and-tools/group-exercise-rock-paper-scissors/",
	"title": "Group Exercise - Rock, Paper, Scissors",
	"tags": [],
	"description": "",
	"content": " Group Exercise: Rock, Paper and Scissors Form groups (of 2 or 3) and write pseudocode describing a game of Rock, Paper, Scissors\n"
},
{
	"uri": "/class-resources/",
	"title": "Class Resources",
	"tags": [],
	"description": "",
	"content": " Class Resources "
},
{
	"uri": "/homework-assignments/",
	"title": "Homework Assignments",
	"tags": [],
	"description": "",
	"content": " Homework Assignments "
},
{
	"uri": "/final-projects/",
	"title": "Final Projects",
	"tags": [],
	"description": "",
	"content": " Final Projects "
},
{
	"uri": "/lesson-recordings/",
	"title": "Lesson Recordings",
	"tags": [],
	"description": "",
	"content": " Lesson Recordings "
},
{
	"uri": "/solutions/",
	"title": "Solutions",
	"tags": [],
	"description": "",
	"content": " Solutions "
},
{
	"uri": "/",
	"title": "JSR",
	"tags": [],
	"description": "",
	"content": " JSR - JavaScript Development "
},
{
	"uri": "/02-javascript-basics/truthy-falsey/",
	"title": "",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]
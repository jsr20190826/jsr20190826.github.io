<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Asynchronous JS and Promises on JavaScript</title>
    <link>/10-asynchronous-js-and-promises/</link>
    <description>Recent content in Asynchronous JS and Promises on JavaScript</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/10-asynchronous-js-and-promises/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Objectives</title>
      <link>/10-asynchronous-js-and-promises/objectives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10-asynchronous-js-and-promises/objectives/</guid>
      <description> Understand the differences between synchronous and asynchronous programming
 Explain the different ways developers address issues presented with asynchronous programming
 Create and Consume Promises
 Handle errors generated from promises
 Use Async / Await to improve readability of asynchronous code
  </description>
    </item>
    
    <item>
      <title>Synchronous Programming</title>
      <link>/10-asynchronous-js-and-promises/synchronous-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10-asynchronous-js-and-promises/synchronous-programming/</guid>
      <description>What is Synchronous Programming?  In a synchronous programming model, things happen one at a time
 This means that only one operation can be in progress at time
 When you call a function that performs a long-running action, it returns only when the action has finished and it can return the result
 Subsequent actions can only be run after the previous action has completed; this means that action #1 blocks action #2</description>
    </item>
    
    <item>
      <title>Asynchronous Programming</title>
      <link>/10-asynchronous-js-and-promises/asynchronous-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10-asynchronous-js-and-promises/asynchronous-programming/</guid>
      <description>What is Asynchronous Programming?  An asynchronous model allows multiple things to happen at the same time
 An asynchronous operation is one that allows the computer to “move on” to other tasks while waiting for the asynchronous operation to complete
 Asynchronous programming means that time-consuming operations don’t have to bring everything else in our programs to a halt
 When you start an action, your program continues to run.</description>
    </item>
    
    <item>
      <title>Simulating Async Operations</title>
      <link>/10-asynchronous-js-and-promises/simulating-async-operations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10-asynchronous-js-and-promises/simulating-async-operations/</guid>
      <description>setTimeout()  .setTimeout() function, available both in Node.js and in browsers, waits a given number of milliseconds (1 sec = 1000 ms) and then calls a function
 .setTimeout() takes two parameters:
 A callback function (remember callbacks are just functions passed in as parameters)
 The number of seconds after which the method will be called
  .setTimeout() is async by default; this is the primary reason it&amp;rsquo;s often used to simulate asynchronous operations</description>
    </item>
    
    <item>
      <title>Challenges of Async Programming</title>
      <link>/10-asynchronous-js-and-promises/challenges-of-async-programming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10-asynchronous-js-and-promises/challenges-of-async-programming/</guid>
      <description>Challenges of Asynchronous Programming  Asynchronous programming presents a challenge when we want make multiple asynchronous requests and we want to control the order of the responses  Example Let&amp;rsquo;s see an example of this below:
/* Modify printLetter() to make it an async function by using .setTimeout After the changes, the letter will be print at a random interval from 0 seconds to 3 seconds */ function printLetter(letter) { setTimeout(() =&amp;gt; { console.</description>
    </item>
    
    <item>
      <title>Handling Async Issues with Callbacks</title>
      <link>/10-asynchronous-js-and-promises/handling-async-issue-with-callbacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10-asynchronous-js-and-promises/handling-async-issue-with-callbacks/</guid>
      <description>What is a Callback?  Callbacks are functions that are passed to another function
 We can use callbacks to control the order in which our multiple asynchronous functions are executed
 The code below modifies our .printLetter() function to accept a callback as a 2nd parameter
  function printLetter(letter, callback) { //&amp;lt;- callback function param added  setTimeout(() =&amp;gt; { console.log(letter) callback() // &amp;lt;- execute (call) the callback param after printing letter  }, Math.</description>
    </item>
    
    <item>
      <title>Code Along: Giphy API with Async / Await</title>
      <link>/10-asynchronous-js-and-promises/code-along-giphy-api-with-async-await/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/10-asynchronous-js-and-promises/code-along-giphy-api-with-async-await/</guid>
      <description>Code Along: Giphy Search API with Async / Await We&amp;rsquo;re going to modify our Giphy&amp;rsquo;s API application and use async / await to make our API request
1) Sign up for a Giphy API Key here: https://developers.giphy.com/ (only for those students who don&amp;rsquo;t already have one)
2) Get the starter code
 The starter code for this code along is hosted on Github, see the url below:
 Code Along: Giphy Search API with Async / Await</description>
    </item>
    
  </channel>
</rss>